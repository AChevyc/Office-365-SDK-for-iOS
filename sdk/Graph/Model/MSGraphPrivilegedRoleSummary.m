/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphPrivilegedRoleSummary
 *
 */
@implementation MSGraphPrivilegedRoleSummary


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"RoleId", @"roleId", @"Status", @"status", @"UsersCount", @"usersCount", @"ManagedCount", @"managedCount", @"ElevatedCount", @"elevatedCount", @"MfaEnabled", @"mfaEnabled", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.PrivilegedRoleSummary";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_roleId = (![dic objectForKey: @"RoleId"] || [ [dic objectForKey: @"RoleId"] isKindOfClass:[NSNull class]] )?_roleId:[[dic objectForKey: @"RoleId"] copy];
		_status = (![dic objectForKey: @"Status"] || [ [dic objectForKey: @"Status"] isKindOfClass:[NSNull class]] )?_status:[MSGraphRoleSummaryStatusSerializer fromString:[dic objectForKey: @"Status"]];
		_usersCount = (![dic objectForKey: @"UsersCount"] || [ [dic objectForKey: @"UsersCount"] isKindOfClass:[NSNull class]] )?_usersCount:[[dic objectForKey: @"UsersCount"] intValue];
		_managedCount = (![dic objectForKey: @"ManagedCount"] || [ [dic objectForKey: @"ManagedCount"] isKindOfClass:[NSNull class]] )?_managedCount:[[dic objectForKey: @"ManagedCount"] intValue];
		_elevatedCount = (![dic objectForKey: @"ElevatedCount"] || [ [dic objectForKey: @"ElevatedCount"] isKindOfClass:[NSNull class]] )?_elevatedCount:[[dic objectForKey: @"ElevatedCount"] intValue];
		_mfaEnabled = (![dic objectForKey: @"MfaEnabled"] || [ [dic objectForKey: @"MfaEnabled"] isKindOfClass:[NSNull class]] )?_mfaEnabled:[[dic objectForKey: @"MfaEnabled"] boolValue];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.roleId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"RoleId"];}
	{[dic setValue: [MSGraphRoleSummaryStatusSerializer toString:self.status] forKey: @"Status"];}
	{[dic setValue: [NSNumber numberWithInt: self.usersCount] forKey: @"UsersCount"];}
	{[dic setValue: [NSNumber numberWithInt: self.managedCount] forKey: @"ManagedCount"];}
	{[dic setValue: [NSNumber numberWithInt: self.elevatedCount] forKey: @"ElevatedCount"];}
	{[dic setValue: (self.mfaEnabled?@"true":@"false") forKey: @"MfaEnabled"];}
    [dic setValue: @"#microsoft.graph.PrivilegedRoleSummary" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.roleId;
    if([self.updatedValues containsObject:@"RoleId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"RoleId"];
            }
    }
 if([self.updatedValues containsObject:@"Status"])
            { [dic setValue: [MSGraphRoleSummaryStatusSerializer toString:self.status] forKey: @"Status"];
} if([self.updatedValues containsObject:@"UsersCount"])
            { [dic setValue: [NSNumber numberWithInt: self.usersCount] forKey: @"UsersCount"];
} if([self.updatedValues containsObject:@"ManagedCount"])
            { [dic setValue: [NSNumber numberWithInt: self.managedCount] forKey: @"ManagedCount"];
} if([self.updatedValues containsObject:@"ElevatedCount"])
            { [dic setValue: [NSNumber numberWithInt: self.elevatedCount] forKey: @"ElevatedCount"];
} if([self.updatedValues containsObject:@"MfaEnabled"])
            { [dic setValue: (self.mfaEnabled?@"true":@"false") forKey: @"MfaEnabled"];
}    return dic;
}


/** Setter implementation for property roleId
 *
 */
- (void) setRoleId: (NSString *) value {
    _roleId = value;
    [self valueChangedFor:@"RoleId"];
}
       
/** Setter implementation for property status
 *
 */
- (void) setStatus: (MSGraphRoleSummaryStatus) value {
    _status = value;
    [self valueChangedFor:@"Status"];
}
       

- (void)setStatusString:(NSString *)string {
        
    _status = [MSGraphRoleSummaryStatusSerializer fromString:string];
    [self valueChangedFor:@"Status"]; 
}

/** Setter implementation for property usersCount
 *
 */
- (void) setUsersCount: (int) value {
    _usersCount = value;
    [self valueChangedFor:@"UsersCount"];
}
       
/** Setter implementation for property managedCount
 *
 */
- (void) setManagedCount: (int) value {
    _managedCount = value;
    [self valueChangedFor:@"ManagedCount"];
}
       
/** Setter implementation for property elevatedCount
 *
 */
- (void) setElevatedCount: (int) value {
    _elevatedCount = value;
    [self valueChangedFor:@"ElevatedCount"];
}
       
/** Setter implementation for property mfaEnabled
 *
 */
- (void) setMfaEnabled: (bool) value {
    _mfaEnabled = value;
    [self valueChangedFor:@"MfaEnabled"];
}
       

@end
