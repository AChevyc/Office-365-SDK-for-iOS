/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphAudio
 *
 */
@implementation MSGraphAudio


@synthesize odataType = _odataType;

+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"album", @"album", @"albumArtist", @"albumArtist", @"artist", @"artist", @"bitrate", @"bitrate", @"composers", @"composers", @"copyright", @"copyright", @"disc", @"disc", @"discCount", @"discCount", @"duration", @"duration", @"genre", @"genre", @"hasDrm", @"hasDrm", @"isVariableBitrate", @"isVariableBitrate", @"title", @"title", @"track", @"track", @"trackCount", @"trackCount", @"year", @"year", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}


- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.audio";

    }

	return self;
}


- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_album = [dic objectForKey: @"album"] != nil ? [[dic objectForKey: @"album"] copy] : _album;
		_albumArtist = [dic objectForKey: @"albumArtist"] != nil ? [[dic objectForKey: @"albumArtist"] copy] : _albumArtist;
		_artist = [dic objectForKey: @"artist"] != nil ? [[dic objectForKey: @"artist"] copy] : _artist;
		_bitrate = [dic objectForKey: @"bitrate"] != nil ? [[dic objectForKey: @"bitrate"] longLongValue] : _bitrate;
		_composers = [dic objectForKey: @"composers"] != nil ? [[dic objectForKey: @"composers"] copy] : _composers;
		_copyright = [dic objectForKey: @"copyright"] != nil ? [[dic objectForKey: @"copyright"] copy] : _copyright;
		_disc = [dic objectForKey: @"disc"] != nil ? [[dic objectForKey: @"disc"] intValue] : _disc;
		_discCount = [dic objectForKey: @"discCount"] != nil ? [[dic objectForKey: @"discCount"] intValue] : _discCount;
		_duration = [dic objectForKey: @"duration"] != nil ? [[dic objectForKey: @"duration"] longLongValue] : _duration;
		_genre = [dic objectForKey: @"genre"] != nil ? [[dic objectForKey: @"genre"] copy] : _genre;
		_hasDrm = [dic objectForKey: @"hasDrm"] != nil ? [[dic objectForKey: @"hasDrm"] boolValue] : _hasDrm;
		_isVariableBitrate = [dic objectForKey: @"isVariableBitrate"] != nil ? [[dic objectForKey: @"isVariableBitrate"] boolValue] : _isVariableBitrate;
		_title = [dic objectForKey: @"title"] != nil ? [[dic objectForKey: @"title"] copy] : _title;
		_track = [dic objectForKey: @"track"] != nil ? [[dic objectForKey: @"track"] intValue] : _track;
		_trackCount = [dic objectForKey: @"trackCount"] != nil ? [[dic objectForKey: @"trackCount"] intValue] : _trackCount;
		_year = [dic objectForKey: @"year"] != nil ? [[dic objectForKey: @"year"] intValue] : _year;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.album copy];if (curVal!=nil) [dic setValue: curVal forKey: @"album"];}
	{id curVal = [self.albumArtist copy];if (curVal!=nil) [dic setValue: curVal forKey: @"albumArtist"];}
	{id curVal = [self.artist copy];if (curVal!=nil) [dic setValue: curVal forKey: @"artist"];}
	{[dic setValue: [NSNumber numberWithLongLong: self.bitrate] forKey: @"bitrate"];}
	{id curVal = [self.composers copy];if (curVal!=nil) [dic setValue: curVal forKey: @"composers"];}
	{id curVal = [self.copyright copy];if (curVal!=nil) [dic setValue: curVal forKey: @"copyright"];}
	{[dic setValue: [NSNumber numberWithInt: self.disc] forKey: @"disc"];}
	{[dic setValue: [NSNumber numberWithInt: self.discCount] forKey: @"discCount"];}
	{[dic setValue: [NSNumber numberWithLongLong: self.duration] forKey: @"duration"];}
	{id curVal = [self.genre copy];if (curVal!=nil) [dic setValue: curVal forKey: @"genre"];}
	{[dic setValue: (self.hasDrm?@"true":@"false") forKey: @"hasDrm"];}
	{[dic setValue: (self.isVariableBitrate?@"true":@"false") forKey: @"isVariableBitrate"];}
	{id curVal = [self.title copy];if (curVal!=nil) [dic setValue: curVal forKey: @"title"];}
	{[dic setValue: [NSNumber numberWithInt: self.track] forKey: @"track"];}
	{[dic setValue: [NSNumber numberWithInt: self.trackCount] forKey: @"trackCount"];}
	{[dic setValue: [NSNumber numberWithInt: self.year] forKey: @"year"];}
    [dic setValue: @"#microsoft.graph.audio" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.album;
    if([self.updatedValues containsObject:@"album"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"album"];
            }
    }
	{id curVal = self.albumArtist;
    if([self.updatedValues containsObject:@"albumArtist"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"albumArtist"];
            }
    }
	{id curVal = self.artist;
    if([self.updatedValues containsObject:@"artist"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"artist"];
            }
    }
	{id curVal = self.bitrate;
    if([self.updatedValues containsObject:@"bitrate"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithLongLong: curVal] forKey: @"bitrate"];
            }
    }
	{id curVal = self.composers;
    if([self.updatedValues containsObject:@"composers"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"composers"];
            }
    }
	{id curVal = self.copyright;
    if([self.updatedValues containsObject:@"copyright"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"copyright"];
            }
    }
	{id curVal = self.disc;
    if([self.updatedValues containsObject:@"disc"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"disc"];
            }
    }
	{id curVal = self.discCount;
    if([self.updatedValues containsObject:@"discCount"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"discCount"];
            }
    }
	{id curVal = self.duration;
    if([self.updatedValues containsObject:@"duration"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithLongLong: curVal] forKey: @"duration"];
            }
    }
	{id curVal = self.genre;
    if([self.updatedValues containsObject:@"genre"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"genre"];
            }
    }
	{id curVal = self.hasDrm;
    if([self.updatedValues containsObject:@"hasDrm"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"hasDrm"];
            }
    }
	{id curVal = self.isVariableBitrate;
    if([self.updatedValues containsObject:@"isVariableBitrate"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"isVariableBitrate"];
            }
    }
	{id curVal = self.title;
    if([self.updatedValues containsObject:@"title"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"title"];
            }
    }
	{id curVal = self.track;
    if([self.updatedValues containsObject:@"track"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"track"];
            }
    }
	{id curVal = self.trackCount;
    if([self.updatedValues containsObject:@"trackCount"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"trackCount"];
            }
    }
	{id curVal = self.year;
    if([self.updatedValues containsObject:@"year"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"year"];
            }
    }
    return dic;
}


/** Setter implementation for property album
 *
 */
- (void) setAlbum: (NSString *) value {
    _album = value;
    [self valueChangedFor:@"album"];
}
       
/** Setter implementation for property albumArtist
 *
 */
- (void) setAlbumArtist: (NSString *) value {
    _albumArtist = value;
    [self valueChangedFor:@"albumArtist"];
}
       
/** Setter implementation for property artist
 *
 */
- (void) setArtist: (NSString *) value {
    _artist = value;
    [self valueChangedFor:@"artist"];
}
       
/** Setter implementation for property bitrate
 *
 */
- (void) setBitrate: (long long) value {
    _bitrate = value;
    [self valueChangedFor:@"bitrate"];
}
       
/** Setter implementation for property composers
 *
 */
- (void) setComposers: (NSString *) value {
    _composers = value;
    [self valueChangedFor:@"composers"];
}
       
/** Setter implementation for property copyright
 *
 */
- (void) setCopyright: (NSString *) value {
    _copyright = value;
    [self valueChangedFor:@"copyright"];
}
       
/** Setter implementation for property disc
 *
 */
- (void) setDisc: (int) value {
    _disc = value;
    [self valueChangedFor:@"disc"];
}
       
/** Setter implementation for property discCount
 *
 */
- (void) setDiscCount: (int) value {
    _discCount = value;
    [self valueChangedFor:@"discCount"];
}
       
/** Setter implementation for property duration
 *
 */
- (void) setDuration: (long long) value {
    _duration = value;
    [self valueChangedFor:@"duration"];
}
       
/** Setter implementation for property genre
 *
 */
- (void) setGenre: (NSString *) value {
    _genre = value;
    [self valueChangedFor:@"genre"];
}
       
/** Setter implementation for property hasDrm
 *
 */
- (void) setHasDrm: (bool) value {
    _hasDrm = value;
    [self valueChangedFor:@"hasDrm"];
}
       
/** Setter implementation for property isVariableBitrate
 *
 */
- (void) setIsVariableBitrate: (bool) value {
    _isVariableBitrate = value;
    [self valueChangedFor:@"isVariableBitrate"];
}
       
/** Setter implementation for property title
 *
 */
- (void) setTitle: (NSString *) value {
    _title = value;
    [self valueChangedFor:@"title"];
}
       
/** Setter implementation for property track
 *
 */
- (void) setTrack: (int) value {
    _track = value;
    [self valueChangedFor:@"track"];
}
       
/** Setter implementation for property trackCount
 *
 */
- (void) setTrackCount: (int) value {
    _trackCount = value;
    [self valueChangedFor:@"trackCount"];
}
       
/** Setter implementation for property year
 *
 */
- (void) setYear: (int) value {
    _year = value;
    [self valueChangedFor:@"year"];
}
       

@end
