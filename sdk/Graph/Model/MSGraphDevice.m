/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphDevice
 *
 */
@implementation MSGraphDevice


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"alternativeSecurityIds", @"alternativeSecurityIds", @"approximateLastLogonTimestamp", @"approximateLastLogonTimestamp", @"deviceId", @"deviceId", @"deviceMetadata", @"deviceMetadata", @"deviceObjectVersion", @"deviceObjectVersion", @"deviceOSType", @"deviceOSType", @"deviceOSVersion", @"deviceOSVersion", @"devicePhysicalIds", @"devicePhysicalIds", @"deviceTrustType", @"deviceTrustType", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"lastDirSyncTime", @"lastDirSyncTime", @"registeredOwners", @"registeredOwners", @"registeredUsers", @"registeredUsers", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.Device";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;

        if([dic objectForKey: @"alternativeSecurityIds"] != [NSNull null]){
            _alternativeSecurityIds = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"alternativeSecurityIds"]) {
                [_alternativeSecurityIds addObject:[[MSGraphAlternativeSecurityId alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_alternativeSecurityIds resetChangedFlag];
        }
        
		_approximateLastLogonTimestamp = [dic objectForKey: @"approximateLastLogonTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"approximateLastLogonTimestamp"]] : _approximateLastLogonTimestamp;
		_deviceId = [dic objectForKey: @"deviceId"] != nil ? [[dic objectForKey: @"deviceId"] copy] : _deviceId;
		_deviceMetadata = [dic objectForKey: @"deviceMetadata"] != nil ? [[dic objectForKey: @"deviceMetadata"] copy] : _deviceMetadata;
		_deviceObjectVersion = [dic objectForKey: @"deviceObjectVersion"] != nil ? [[dic objectForKey: @"deviceObjectVersion"] intValue] : _deviceObjectVersion;
		_deviceOSType = [dic objectForKey: @"deviceOSType"] != nil ? [[dic objectForKey: @"deviceOSType"] copy] : _deviceOSType;
		_deviceOSVersion = [dic objectForKey: @"deviceOSVersion"] != nil ? [[dic objectForKey: @"deviceOSVersion"] copy] : _deviceOSVersion;

        if([dic objectForKey: @"devicePhysicalIds"] != [NSNull null]){
            _devicePhysicalIds = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"devicePhysicalIds"]) {
                [_devicePhysicalIds addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_devicePhysicalIds resetChangedFlag];
        }
        
		_deviceTrustType = [dic objectForKey: @"deviceTrustType"] != nil ? [[dic objectForKey: @"deviceTrustType"] copy] : _deviceTrustType;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;

        if([dic objectForKey: @"registeredOwners"] != [NSNull null]){
            _registeredOwners = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredOwners"]) {
                [_registeredOwners addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredOwners resetChangedFlag];
        }
        

        if([dic objectForKey: @"registeredUsers"] != [NSNull null]){
            _registeredUsers = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredUsers"]) {
                [_registeredUsers addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredUsers resetChangedFlag];
        }
        
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{[dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.alternativeSecurityIds) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [MSOrcObjectizer stringFromDate:self.approximateLastLogonTimestamp];if (curVal!=nil) [dic setValue: curVal forKey: @"approximateLastLogonTimestamp"];}
	{id curVal = [self.deviceId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceId"];}
	{id curVal = [self.deviceMetadata copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceMetadata"];}
	{[dic setValue: [NSNumber numberWithInt: self.deviceObjectVersion] forKey: @"deviceObjectVersion"];}
	{id curVal = [self.deviceOSType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceOSType"];}
	{id curVal = [self.deviceOSVersion copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceOSVersion"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.devicePhysicalIds) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [self.deviceTrustType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceTrustType"];}
	{[dic setValue: (self.dirSyncEnabled?@"true":@"false") forKey: @"dirSyncEnabled"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastDirSyncTime];if (curVal!=nil) [dic setValue: curVal forKey: @"lastDirSyncTime"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredOwners) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredUsers) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [self.objectType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp];if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
    [dic setValue: @"#microsoft.graph.Device" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.accountEnabled;
    if([self.updatedValues containsObject:@"accountEnabled"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"accountEnabled"];
            }
    }
	{id curVal = self.alternativeSecurityIds;
    if([self.updatedValues containsObject:@"alternativeSecurityIds"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"alternativeSecurityIds"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.alternativeSecurityIds) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"alternativeSecurityIds"];
        }
        
            }}
	{id curVal = self.approximateLastLogonTimestamp;
    if([self.updatedValues containsObject:@"approximateLastLogonTimestamp"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"approximateLastLogonTimestamp"];
            }
    }
	{id curVal = self.deviceId;
    if([self.updatedValues containsObject:@"deviceId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceId"];
            }
    }
	{id curVal = self.deviceMetadata;
    if([self.updatedValues containsObject:@"deviceMetadata"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceMetadata"];
            }
    }
	{id curVal = self.deviceObjectVersion;
    if([self.updatedValues containsObject:@"deviceObjectVersion"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"deviceObjectVersion"];
            }
    }
	{id curVal = self.deviceOSType;
    if([self.updatedValues containsObject:@"deviceOSType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceOSType"];
            }
    }
	{id curVal = self.deviceOSVersion;
    if([self.updatedValues containsObject:@"deviceOSVersion"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceOSVersion"];
            }
    }
	{id curVal = self.devicePhysicalIds;
    if([self.updatedValues containsObject:@"devicePhysicalIds"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"devicePhysicalIds"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.devicePhysicalIds) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"devicePhysicalIds"];
        }
        
            }}
	{id curVal = self.deviceTrustType;
    if([self.updatedValues containsObject:@"deviceTrustType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceTrustType"];
            }
    }
	{id curVal = self.dirSyncEnabled;
    if([self.updatedValues containsObject:@"dirSyncEnabled"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"dirSyncEnabled"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.lastDirSyncTime;
    if([self.updatedValues containsObject:@"lastDirSyncTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastDirSyncTime"];
            }
    }
	{id curVal = self.registeredOwners;
    if([self.updatedValues containsObject:@"registeredOwners"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredOwners"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredOwners) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredOwners"];
        }
        
            }}
	{id curVal = self.registeredUsers;
    if([self.updatedValues containsObject:@"registeredUsers"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredUsers"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredUsers) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredUsers"];
        }
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
            }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
            }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
            }
    }
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property alternativeSecurityIds
 *
 */
- (void) setAlternativeSecurityIds: (NSMutableArray *) value {
    _alternativeSecurityIds = value;
    [self valueChangedFor:@"alternativeSecurityIds"];
}
       
/** Setter implementation for property approximateLastLogonTimestamp
 *
 */
- (void) setApproximateLastLogonTimestamp: (NSDate *) value {
    _approximateLastLogonTimestamp = value;
    [self valueChangedFor:@"approximateLastLogonTimestamp"];
}
       
/** Setter implementation for property deviceId
 *
 */
- (void) setDeviceId: (NSString *) value {
    _deviceId = value;
    [self valueChangedFor:@"deviceId"];
}
       
/** Setter implementation for property deviceMetadata
 *
 */
- (void) setDeviceMetadata: (NSString *) value {
    _deviceMetadata = value;
    [self valueChangedFor:@"deviceMetadata"];
}
       
/** Setter implementation for property deviceObjectVersion
 *
 */
- (void) setDeviceObjectVersion: (int) value {
    _deviceObjectVersion = value;
    [self valueChangedFor:@"deviceObjectVersion"];
}
       
/** Setter implementation for property deviceOSType
 *
 */
- (void) setDeviceOSType: (NSString *) value {
    _deviceOSType = value;
    [self valueChangedFor:@"deviceOSType"];
}
       
/** Setter implementation for property deviceOSVersion
 *
 */
- (void) setDeviceOSVersion: (NSString *) value {
    _deviceOSVersion = value;
    [self valueChangedFor:@"deviceOSVersion"];
}
       
/** Setter implementation for property devicePhysicalIds
 *
 */
- (void) setDevicePhysicalIds: (NSMutableArray *) value {
    _devicePhysicalIds = value;
    [self valueChangedFor:@"devicePhysicalIds"];
}
       
/** Setter implementation for property deviceTrustType
 *
 */
- (void) setDeviceTrustType: (NSString *) value {
    _deviceTrustType = value;
    [self valueChangedFor:@"deviceTrustType"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property registeredOwners
 *
 */
- (void) setRegisteredOwners: (NSMutableArray *) value {
    _registeredOwners = value;
    [self valueChangedFor:@"registeredOwners"];
}
       
/** Setter implementation for property registeredUsers
 *
 */
- (void) setRegisteredUsers: (NSMutableArray *) value {
    _registeredUsers = value;
    [self valueChangedFor:@"registeredUsers"];
}
       

@end
