/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphUser
 *
 */
@implementation MSGraphUser


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"assignedLicenses", @"assignedLicenses", @"assignedPlans", @"assignedPlans", @"city", @"city", @"country", @"country", @"department", @"department", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"facsimileTelephoneNumber", @"facsimileTelephoneNumber", @"givenName", @"givenName", @"immutableId", @"immutableId", @"jobTitle", @"jobTitle", @"lastDirSyncTime", @"lastDirSyncTime", @"mail", @"mail", @"mailNickname", @"mailNickname", @"mobile", @"mobile", @"onPremisesSecurityIdentifier", @"onPremisesSecurityIdentifier", @"otherMails", @"otherMails", @"passwordPolicies", @"passwordPolicies", @"passwordProfile", @"passwordProfile", @"physicalDeliveryOfficeName", @"physicalDeliveryOfficeName", @"postalCode", @"postalCode", @"preferredLanguage", @"preferredLanguage", @"provisionedPlans", @"provisionedPlans", @"provisioningErrors", @"provisioningErrors", @"proxyAddresses", @"proxyAddresses", @"sipProxyAddress", @"sipProxyAddress", @"state", @"state", @"streetAddress", @"streetAddress", @"surname", @"surname", @"telephoneNumber", @"telephoneNumber", @"thumbnailPhoto", @"thumbnailPhoto", @"usageLocation", @"usageLocation", @"userPrincipalName", @"userPrincipalName", @"userType", @"userType", @"MailboxGuid", @"mailboxGuid", @"aboutMe", @"aboutMe", @"alias", @"alias", @"birthday", @"birthday", @"hireDate", @"hireDate", @"interests", @"interests", @"mySite", @"mySite", @"pastProjects", @"pastProjects", @"preferredName", @"preferredName", @"principalName", @"principalName", @"responsibilities", @"responsibilities", @"schools", @"schools", @"skills", @"skills", @"tags", @"tags", @"appRoleAssignments", @"appRoleAssignments", @"oauth2PermissionGrants", @"oauth2PermissionGrants", @"ownedDevices", @"ownedDevices", @"registeredDevices", @"registeredDevices", @"manager", @"manager", @"directReports", @"directReports", @"memberOf", @"memberOf", @"createdObjects", @"createdObjects", @"ownedObjects", @"ownedObjects", @"Messages", @"messages", @"JoinedGroups", @"joinedGroups", @"MailFolders", @"mailFolders", @"Calendar", @"calendar", @"Calendars", @"calendars", @"CalendarGroups", @"calendarGroups", @"CalendarView", @"calendarView", @"Events", @"events", @"Contacts", @"contacts", @"ContactFolders", @"contactFolders", @"InferenceClassification", @"inferenceClassification", @"RootFolder", @"rootFolder", @"Photo", @"photo", @"Photos", @"photos", @"drive", @"drive", @"TrendingAround", @"trendingAround", @"WorkingWith", @"workingWith", @"tasks", @"tasks", @"plans", @"plans", @"notes", @"notes", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.User";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;

        if([dic objectForKey: @"assignedLicenses"] != [NSNull null]){
            _assignedLicenses = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"assignedLicenses"]) {
                [_assignedLicenses addObject:[[MSGraphAssignedLicense alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_assignedLicenses resetChangedFlag];
        }
        

        if([dic objectForKey: @"assignedPlans"] != [NSNull null]){
            _assignedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"assignedPlans"]) {
                [_assignedPlans addObject:[[MSGraphAssignedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_assignedPlans resetChangedFlag];
        }
        
		_city = [dic objectForKey: @"city"] != nil ? [[dic objectForKey: @"city"] copy] : _city;
		_country = [dic objectForKey: @"country"] != nil ? [[dic objectForKey: @"country"] copy] : _country;
		_department = [dic objectForKey: @"department"] != nil ? [[dic objectForKey: @"department"] copy] : _department;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_facsimileTelephoneNumber = [dic objectForKey: @"facsimileTelephoneNumber"] != nil ? [[dic objectForKey: @"facsimileTelephoneNumber"] copy] : _facsimileTelephoneNumber;
		_givenName = [dic objectForKey: @"givenName"] != nil ? [[dic objectForKey: @"givenName"] copy] : _givenName;
		_immutableId = [dic objectForKey: @"immutableId"] != nil ? [[dic objectForKey: @"immutableId"] copy] : _immutableId;
		_jobTitle = [dic objectForKey: @"jobTitle"] != nil ? [[dic objectForKey: @"jobTitle"] copy] : _jobTitle;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;
		_mail = [dic objectForKey: @"mail"] != nil ? [[dic objectForKey: @"mail"] copy] : _mail;
		_mailNickname = [dic objectForKey: @"mailNickname"] != nil ? [[dic objectForKey: @"mailNickname"] copy] : _mailNickname;
		_mobile = [dic objectForKey: @"mobile"] != nil ? [[dic objectForKey: @"mobile"] copy] : _mobile;
		_onPremisesSecurityIdentifier = [dic objectForKey: @"onPremisesSecurityIdentifier"] != nil ? [[dic objectForKey: @"onPremisesSecurityIdentifier"] copy] : _onPremisesSecurityIdentifier;

        if([dic objectForKey: @"otherMails"] != [NSNull null]){
            _otherMails = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"otherMails"]) {
                [_otherMails addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_otherMails resetChangedFlag];
        }
        
		_passwordPolicies = [dic objectForKey: @"passwordPolicies"] != nil ? [[dic objectForKey: @"passwordPolicies"] copy] : _passwordPolicies;
		_passwordProfile = [dic objectForKey: @"passwordProfile"] != nil ? [[MSGraphPasswordProfile alloc] initWithDictionary: [dic objectForKey: @"passwordProfile"]] : _passwordProfile;
		_physicalDeliveryOfficeName = [dic objectForKey: @"physicalDeliveryOfficeName"] != nil ? [[dic objectForKey: @"physicalDeliveryOfficeName"] copy] : _physicalDeliveryOfficeName;
		_postalCode = [dic objectForKey: @"postalCode"] != nil ? [[dic objectForKey: @"postalCode"] copy] : _postalCode;
		_preferredLanguage = [dic objectForKey: @"preferredLanguage"] != nil ? [[dic objectForKey: @"preferredLanguage"] copy] : _preferredLanguage;

        if([dic objectForKey: @"provisionedPlans"] != [NSNull null]){
            _provisionedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"provisionedPlans"]) {
                [_provisionedPlans addObject:[[MSGraphProvisionedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_provisionedPlans resetChangedFlag];
        }
        

        if([dic objectForKey: @"provisioningErrors"] != [NSNull null]){
            _provisioningErrors = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"provisioningErrors"]) {
                [_provisioningErrors addObject:[[MSGraphProvisioningError alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_provisioningErrors resetChangedFlag];
        }
        

        if([dic objectForKey: @"proxyAddresses"] != [NSNull null]){
            _proxyAddresses = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"proxyAddresses"]) {
                [_proxyAddresses addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_proxyAddresses resetChangedFlag];
        }
        
		_sipProxyAddress = [dic objectForKey: @"sipProxyAddress"] != nil ? [[dic objectForKey: @"sipProxyAddress"] copy] : _sipProxyAddress;
		_state = [dic objectForKey: @"state"] != nil ? [[dic objectForKey: @"state"] copy] : _state;
		_streetAddress = [dic objectForKey: @"streetAddress"] != nil ? [[dic objectForKey: @"streetAddress"] copy] : _streetAddress;
		_surname = [dic objectForKey: @"surname"] != nil ? [[dic objectForKey: @"surname"] copy] : _surname;
		_telephoneNumber = [dic objectForKey: @"telephoneNumber"] != nil ? [[dic objectForKey: @"telephoneNumber"] copy] : _telephoneNumber;
		_thumbnailPhoto = [dic objectForKey: @"thumbnailPhoto"] != nil ? nil/*NSStream*/ : _thumbnailPhoto;
		_usageLocation = [dic objectForKey: @"usageLocation"] != nil ? [[dic objectForKey: @"usageLocation"] copy] : _usageLocation;
		_userPrincipalName = [dic objectForKey: @"userPrincipalName"] != nil ? [[dic objectForKey: @"userPrincipalName"] copy] : _userPrincipalName;
		_userType = [dic objectForKey: @"userType"] != nil ? [[dic objectForKey: @"userType"] copy] : _userType;
		_mailboxGuid = [dic objectForKey: @"MailboxGuid"] != nil ? [[dic objectForKey: @"MailboxGuid"] copy] : _mailboxGuid;
		_aboutMe = [dic objectForKey: @"aboutMe"] != nil ? [[dic objectForKey: @"aboutMe"] copy] : _aboutMe;
		_alias = [dic objectForKey: @"alias"] != nil ? [[dic objectForKey: @"alias"] copy] : _alias;
		_birthday = [dic objectForKey: @"birthday"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"birthday"]] : _birthday;
		_hireDate = [dic objectForKey: @"hireDate"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"hireDate"]] : _hireDate;

        if([dic objectForKey: @"interests"] != [NSNull null]){
            _interests = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"interests"]) {
                [_interests addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_interests resetChangedFlag];
        }
        
		_mySite = [dic objectForKey: @"mySite"] != nil ? [[dic objectForKey: @"mySite"] copy] : _mySite;

        if([dic objectForKey: @"pastProjects"] != [NSNull null]){
            _pastProjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"pastProjects"]) {
                [_pastProjects addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_pastProjects resetChangedFlag];
        }
        
		_preferredName = [dic objectForKey: @"preferredName"] != nil ? [[dic objectForKey: @"preferredName"] copy] : _preferredName;
		_principalName = [dic objectForKey: @"principalName"] != nil ? [[dic objectForKey: @"principalName"] copy] : _principalName;

        if([dic objectForKey: @"responsibilities"] != [NSNull null]){
            _responsibilities = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"responsibilities"]) {
                [_responsibilities addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_responsibilities resetChangedFlag];
        }
        

        if([dic objectForKey: @"schools"] != [NSNull null]){
            _schools = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"schools"]) {
                [_schools addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_schools resetChangedFlag];
        }
        

        if([dic objectForKey: @"skills"] != [NSNull null]){
            _skills = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"skills"]) {
                [_skills addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_skills resetChangedFlag];
        }
        

        if([dic objectForKey: @"tags"] != [NSNull null]){
            _tags = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"tags"]) {
                [_tags addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_tags resetChangedFlag];
        }
        

        if([dic objectForKey: @"appRoleAssignments"] != [NSNull null]){
            _appRoleAssignments = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"appRoleAssignments"]) {
                [_appRoleAssignments addObject:[[MSGraphAppRoleAssignment alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_appRoleAssignments resetChangedFlag];
        }
        

        if([dic objectForKey: @"oauth2PermissionGrants"] != [NSNull null]){
            _oauth2PermissionGrants = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"oauth2PermissionGrants"]) {
                [_oauth2PermissionGrants addObject:[[MSGraphOAuth2PermissionGrant alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_oauth2PermissionGrants resetChangedFlag];
        }
        

        if([dic objectForKey: @"ownedDevices"] != [NSNull null]){
            _ownedDevices = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ownedDevices"]) {
                [_ownedDevices addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ownedDevices resetChangedFlag];
        }
        

        if([dic objectForKey: @"registeredDevices"] != [NSNull null]){
            _registeredDevices = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredDevices"]) {
                [_registeredDevices addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredDevices resetChangedFlag];
        }
        
		_manager = [dic objectForKey: @"manager"] != nil ? [[MSGraphDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]] : _manager;

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            _directReports = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [_directReports addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_directReports resetChangedFlag];
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            _memberOf = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [_memberOf addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_memberOf resetChangedFlag];
        }
        

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            _createdObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [_createdObjects addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_createdObjects resetChangedFlag];
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            _ownedObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [_ownedObjects addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ownedObjects resetChangedFlag];
        }
        

        if([dic objectForKey: @"Messages"] != [NSNull null]){
            _messages = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Messages"]) {
                [_messages addObject:[[MSGraphMessage alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_messages resetChangedFlag];
        }
        

        if([dic objectForKey: @"JoinedGroups"] != [NSNull null]){
            _joinedGroups = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"JoinedGroups"]) {
                [_joinedGroups addObject:[[MSGraphGroup alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_joinedGroups resetChangedFlag];
        }
        

        if([dic objectForKey: @"MailFolders"] != [NSNull null]){
            _mailFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"MailFolders"]) {
                [_mailFolders addObject:[[MSGraphMailFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_mailFolders resetChangedFlag];
        }
        
		_calendar = [dic objectForKey: @"Calendar"] != nil ? [[MSGraphCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]] : _calendar;

        if([dic objectForKey: @"Calendars"] != [NSNull null]){
            _calendars = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Calendars"]) {
                [_calendars addObject:[[MSGraphCalendar alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendars resetChangedFlag];
        }
        

        if([dic objectForKey: @"CalendarGroups"] != [NSNull null]){
            _calendarGroups = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarGroups"]) {
                [_calendarGroups addObject:[[MSGraphCalendarGroup alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarGroups resetChangedFlag];
        }
        

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarView resetChangedFlag];
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_events resetChangedFlag];
        }
        

        if([dic objectForKey: @"Contacts"] != [NSNull null]){
            _contacts = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Contacts"]) {
                [_contacts addObject:[[MSGraphContact alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contacts resetChangedFlag];
        }
        

        if([dic objectForKey: @"ContactFolders"] != [NSNull null]){
            _contactFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ContactFolders"]) {
                [_contactFolders addObject:[[MSGraphContactFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contactFolders resetChangedFlag];
        }
        
		_inferenceClassification = [dic objectForKey: @"InferenceClassification"] != nil ? [[MSGraphInferenceClassification alloc] initWithDictionary: [dic objectForKey: @"InferenceClassification"]] : _inferenceClassification;
		_rootFolder = [dic objectForKey: @"RootFolder"] != nil ? [[MSGraphMailFolder alloc] initWithDictionary: [dic objectForKey: @"RootFolder"]] : _rootFolder;
		_photo = [dic objectForKey: @"Photo"] != nil ? [[MSGraphProfilePhoto alloc] initWithDictionary: [dic objectForKey: @"Photo"]] : _photo;

        if([dic objectForKey: @"Photos"] != [NSNull null]){
            _photos = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Photos"]) {
                [_photos addObject:[[MSGraphProfilePhoto alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_photos resetChangedFlag];
        }
        
		_drive = [dic objectForKey: @"drive"] != nil ? [[MSGraphDrive alloc] initWithDictionary: [dic objectForKey: @"drive"]] : _drive;

        if([dic objectForKey: @"TrendingAround"] != [NSNull null]){
            _trendingAround = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"TrendingAround"]) {
                [_trendingAround addObject:[[MSGraphItem alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_trendingAround resetChangedFlag];
        }
        

        if([dic objectForKey: @"WorkingWith"] != [NSNull null]){
            _workingWith = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"WorkingWith"]) {
                [_workingWith addObject:[[MSGraphUser alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_workingWith resetChangedFlag];
        }
        

        if([dic objectForKey: @"tasks"] != [NSNull null]){
            _tasks = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"tasks"]) {
                [_tasks addObject:[[MSGraphTask alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_tasks resetChangedFlag];
        }
        

        if([dic objectForKey: @"plans"] != [NSNull null]){
            _plans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"plans"]) {
                [_plans addObject:[[MSGraphPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_plans resetChangedFlag];
        }
        
		_notes = [dic objectForKey: @"notes"] != nil ? [[MSGraphNotes alloc] initWithDictionary: [dic objectForKey: @"notes"]] : _notes;
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{[dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedLicenses) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"assignedLicenses"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"assignedPlans"];}
	{id curVal = [self.city copy];if (curVal!=nil) [dic setValue: curVal forKey: @"city"];}
	{id curVal = [self.country copy];if (curVal!=nil) [dic setValue: curVal forKey: @"country"];}
	{id curVal = [self.department copy];if (curVal!=nil) [dic setValue: curVal forKey: @"department"];}
	{[dic setValue: (self.dirSyncEnabled?@"true":@"false") forKey: @"dirSyncEnabled"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.facsimileTelephoneNumber copy];if (curVal!=nil) [dic setValue: curVal forKey: @"facsimileTelephoneNumber"];}
	{id curVal = [self.givenName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"givenName"];}
	{id curVal = [self.immutableId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"immutableId"];}
	{id curVal = [self.jobTitle copy];if (curVal!=nil) [dic setValue: curVal forKey: @"jobTitle"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastDirSyncTime];if (curVal!=nil) [dic setValue: curVal forKey: @"lastDirSyncTime"];}
	{id curVal = [self.mail copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mail"];}
	{id curVal = [self.mailNickname copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mailNickname"];}
	{id curVal = [self.mobile copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mobile"];}
	{id curVal = [self.onPremisesSecurityIdentifier copy];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesSecurityIdentifier"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.otherMails) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"otherMails"];}
	{id curVal = [self.passwordPolicies copy];if (curVal!=nil) [dic setValue: curVal forKey: @"passwordPolicies"];}
	{id curVal = [self.passwordProfile toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"passwordProfile"];}
	{id curVal = [self.physicalDeliveryOfficeName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"physicalDeliveryOfficeName"];}
	{id curVal = [self.postalCode copy];if (curVal!=nil) [dic setValue: curVal forKey: @"postalCode"];}
	{id curVal = [self.preferredLanguage copy];if (curVal!=nil) [dic setValue: curVal forKey: @"preferredLanguage"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"provisionedPlans"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisioningErrors) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"provisioningErrors"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"proxyAddresses"];}
	{id curVal = [self.sipProxyAddress copy];if (curVal!=nil) [dic setValue: curVal forKey: @"sipProxyAddress"];}
	{id curVal = [self.state copy];if (curVal!=nil) [dic setValue: curVal forKey: @"state"];}
	{id curVal = [self.streetAddress copy];if (curVal!=nil) [dic setValue: curVal forKey: @"streetAddress"];}
	{id curVal = [self.surname copy];if (curVal!=nil) [dic setValue: curVal forKey: @"surname"];}
	{id curVal = [self.telephoneNumber copy];if (curVal!=nil) [dic setValue: curVal forKey: @"telephoneNumber"];}
	{id curVal = nil/*NSStream*/;if (curVal!=nil) [dic setValue: curVal forKey: @"thumbnailPhoto"];}
	{id curVal = [self.usageLocation copy];if (curVal!=nil) [dic setValue: curVal forKey: @"usageLocation"];}
	{id curVal = [self.userPrincipalName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"userPrincipalName"];}
	{id curVal = [self.userType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"userType"];}
	{id curVal = [self.mailboxGuid copy];if (curVal!=nil) [dic setValue: curVal forKey: @"MailboxGuid"];}
	{id curVal = [self.aboutMe copy];if (curVal!=nil) [dic setValue: curVal forKey: @"aboutMe"];}
	{id curVal = [self.alias copy];if (curVal!=nil) [dic setValue: curVal forKey: @"alias"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.birthday];if (curVal!=nil) [dic setValue: curVal forKey: @"birthday"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.hireDate];if (curVal!=nil) [dic setValue: curVal forKey: @"hireDate"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.interests) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"interests"];}
	{id curVal = [self.mySite copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mySite"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.pastProjects) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"pastProjects"];}
	{id curVal = [self.preferredName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"preferredName"];}
	{id curVal = [self.principalName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"principalName"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.responsibilities) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"responsibilities"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.schools) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"schools"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.skills) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"skills"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.tags) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"tags"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoleAssignments) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"appRoleAssignments"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2PermissionGrants) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"oauth2PermissionGrants"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedDevices) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ownedDevices"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredDevices) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"registeredDevices"];}
	{id curVal = [self.manager toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Messages"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.joinedGroups) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"JoinedGroups"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"MailFolders"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Calendars"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarGroups"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarView"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Events"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Contacts"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ContactFolders"];}
	{id curVal = [self.inferenceClassification toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"InferenceClassification"];}
	{id curVal = [self.rootFolder toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"RootFolder"];}
	{id curVal = [self.photo toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Photo"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.photos) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Photos"];}
	{id curVal = [self.drive toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"drive"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.trendingAround) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"TrendingAround"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.workingWith) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"WorkingWith"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.tasks) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"tasks"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.plans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"plans"];}
	{id curVal = [self.notes toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"notes"];}
	{id curVal = [self.objectType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp];if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
    [dic setValue: @"#microsoft.graph.User" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

 if([self.updatedValues containsObject:@"accountEnabled"])
            { [dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];
}	{id curVal = self.assignedLicenses;
    if([self.updatedValues containsObject:@"assignedLicenses"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"assignedLicenses"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedLicenses) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"assignedLicenses"];
        }
        
            }}
	{id curVal = self.assignedPlans;
    if([self.updatedValues containsObject:@"assignedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"assignedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"assignedPlans"];
        }
        
            }}
	{id curVal = self.city;
    if([self.updatedValues containsObject:@"city"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"city"];
            }
    }
	{id curVal = self.country;
    if([self.updatedValues containsObject:@"country"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"country"];
            }
    }
	{id curVal = self.department;
    if([self.updatedValues containsObject:@"department"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"department"];
            }
    }
 if([self.updatedValues containsObject:@"dirSyncEnabled"])
            { [dic setValue: (self.dirSyncEnabled?@"true":@"false") forKey: @"dirSyncEnabled"];
}	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.facsimileTelephoneNumber;
    if([self.updatedValues containsObject:@"facsimileTelephoneNumber"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"facsimileTelephoneNumber"];
            }
    }
	{id curVal = self.givenName;
    if([self.updatedValues containsObject:@"givenName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"givenName"];
            }
    }
	{id curVal = self.immutableId;
    if([self.updatedValues containsObject:@"immutableId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"immutableId"];
            }
    }
	{id curVal = self.jobTitle;
    if([self.updatedValues containsObject:@"jobTitle"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"jobTitle"];
            }
    }
	{id curVal = self.lastDirSyncTime;
    if([self.updatedValues containsObject:@"lastDirSyncTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastDirSyncTime"];
            }
    }
	{id curVal = self.mail;
    if([self.updatedValues containsObject:@"mail"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mail"];
            }
    }
	{id curVal = self.mailNickname;
    if([self.updatedValues containsObject:@"mailNickname"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mailNickname"];
            }
    }
	{id curVal = self.mobile;
    if([self.updatedValues containsObject:@"mobile"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mobile"];
            }
    }
	{id curVal = self.onPremisesSecurityIdentifier;
    if([self.updatedValues containsObject:@"onPremisesSecurityIdentifier"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"onPremisesSecurityIdentifier"];
            }
    }
	{id curVal = self.otherMails;
    if([self.updatedValues containsObject:@"otherMails"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"otherMails"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.otherMails) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"otherMails"];
        }
        
            }}
	{id curVal = self.passwordPolicies;
    if([self.updatedValues containsObject:@"passwordPolicies"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"passwordPolicies"];
            }
    }
	{id curVal = self.passwordProfile;
    if([self.updatedValues containsObject:@"passwordProfile"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"passwordProfile"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"passwordProfile"];
            }
        
            }}
	{id curVal = self.physicalDeliveryOfficeName;
    if([self.updatedValues containsObject:@"physicalDeliveryOfficeName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"physicalDeliveryOfficeName"];
            }
    }
	{id curVal = self.postalCode;
    if([self.updatedValues containsObject:@"postalCode"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"postalCode"];
            }
    }
	{id curVal = self.preferredLanguage;
    if([self.updatedValues containsObject:@"preferredLanguage"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredLanguage"];
            }
    }
	{id curVal = self.provisionedPlans;
    if([self.updatedValues containsObject:@"provisionedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"provisionedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"provisionedPlans"];
        }
        
            }}
	{id curVal = self.provisioningErrors;
    if([self.updatedValues containsObject:@"provisioningErrors"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"provisioningErrors"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisioningErrors) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"provisioningErrors"];
        }
        
            }}
	{id curVal = self.proxyAddresses;
    if([self.updatedValues containsObject:@"proxyAddresses"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"proxyAddresses"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"proxyAddresses"];
        }
        
            }}
	{id curVal = self.sipProxyAddress;
    if([self.updatedValues containsObject:@"sipProxyAddress"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"sipProxyAddress"];
            }
    }
	{id curVal = self.state;
    if([self.updatedValues containsObject:@"state"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"state"];
            }
    }
	{id curVal = self.streetAddress;
    if([self.updatedValues containsObject:@"streetAddress"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"streetAddress"];
            }
    }
	{id curVal = self.surname;
    if([self.updatedValues containsObject:@"surname"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"surname"];
            }
    }
	{id curVal = self.telephoneNumber;
    if([self.updatedValues containsObject:@"telephoneNumber"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"telephoneNumber"];
            }
    }
	{id curVal = self.thumbnailPhoto;
    if([self.updatedValues containsObject:@"thumbnailPhoto"])
    {
                [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"thumbnailPhoto"];
            }
    }
	{id curVal = self.usageLocation;
    if([self.updatedValues containsObject:@"usageLocation"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"usageLocation"];
            }
    }
	{id curVal = self.userPrincipalName;
    if([self.updatedValues containsObject:@"userPrincipalName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userPrincipalName"];
            }
    }
	{id curVal = self.userType;
    if([self.updatedValues containsObject:@"userType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userType"];
            }
    }
	{id curVal = self.mailboxGuid;
    if([self.updatedValues containsObject:@"MailboxGuid"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"MailboxGuid"];
            }
    }
	{id curVal = self.aboutMe;
    if([self.updatedValues containsObject:@"aboutMe"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"aboutMe"];
            }
    }
	{id curVal = self.alias;
    if([self.updatedValues containsObject:@"alias"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"alias"];
            }
    }
	{id curVal = self.birthday;
    if([self.updatedValues containsObject:@"birthday"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"birthday"];
            }
    }
	{id curVal = self.hireDate;
    if([self.updatedValues containsObject:@"hireDate"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"hireDate"];
            }
    }
	{id curVal = self.interests;
    if([self.updatedValues containsObject:@"interests"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"interests"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.interests) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"interests"];
        }
        
            }}
	{id curVal = self.mySite;
    if([self.updatedValues containsObject:@"mySite"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mySite"];
            }
    }
	{id curVal = self.pastProjects;
    if([self.updatedValues containsObject:@"pastProjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"pastProjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.pastProjects) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"pastProjects"];
        }
        
            }}
	{id curVal = self.preferredName;
    if([self.updatedValues containsObject:@"preferredName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredName"];
            }
    }
	{id curVal = self.principalName;
    if([self.updatedValues containsObject:@"principalName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"principalName"];
            }
    }
	{id curVal = self.responsibilities;
    if([self.updatedValues containsObject:@"responsibilities"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"responsibilities"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.responsibilities) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"responsibilities"];
        }
        
            }}
	{id curVal = self.schools;
    if([self.updatedValues containsObject:@"schools"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"schools"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.schools) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"schools"];
        }
        
            }}
	{id curVal = self.skills;
    if([self.updatedValues containsObject:@"skills"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"skills"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.skills) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"skills"];
        }
        
            }}
	{id curVal = self.tags;
    if([self.updatedValues containsObject:@"tags"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"tags"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.tags) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"tags"];
        }
        
            }}
	{id curVal = self.appRoleAssignments;
    if([self.updatedValues containsObject:@"appRoleAssignments"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"appRoleAssignments"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoleAssignments) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"appRoleAssignments"];
        }
        
            }}
	{id curVal = self.oauth2PermissionGrants;
    if([self.updatedValues containsObject:@"oauth2PermissionGrants"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"oauth2PermissionGrants"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2PermissionGrants) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"oauth2PermissionGrants"];
        }
        
            }}
	{id curVal = self.ownedDevices;
    if([self.updatedValues containsObject:@"ownedDevices"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ownedDevices"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedDevices) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ownedDevices"];
        }
        
            }}
	{id curVal = self.registeredDevices;
    if([self.updatedValues containsObject:@"registeredDevices"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredDevices"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredDevices) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredDevices"];
        }
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"directReports"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"directReports"];
        }
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"memberOf"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"memberOf"];
        }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"createdObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"createdObjects"];
        }
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ownedObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ownedObjects"];
        }
        
            }}
	{id curVal = self.messages;
    if([self.updatedValues containsObject:@"Messages"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Messages"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Messages"];
        }
        
            }}
	{id curVal = self.joinedGroups;
    if([self.updatedValues containsObject:@"JoinedGroups"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"JoinedGroups"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.joinedGroups) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"JoinedGroups"];
        }
        
            }}
	{id curVal = self.mailFolders;
    if([self.updatedValues containsObject:@"MailFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"MailFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"MailFolders"];
        }
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.calendars;
    if([self.updatedValues containsObject:@"Calendars"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Calendars"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Calendars"];
        }
        
            }}
	{id curVal = self.calendarGroups;
    if([self.updatedValues containsObject:@"CalendarGroups"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarGroups"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarGroups"];
        }
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"CalendarView"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarView"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarView"];
        }
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"Events"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Events"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Events"];
        }
        
            }}
	{id curVal = self.contacts;
    if([self.updatedValues containsObject:@"Contacts"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Contacts"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Contacts"];
        }
        
            }}
	{id curVal = self.contactFolders;
    if([self.updatedValues containsObject:@"ContactFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ContactFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ContactFolders"];
        }
        
            }}
	{id curVal = self.inferenceClassification;
    if([self.updatedValues containsObject:@"InferenceClassification"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"InferenceClassification"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"InferenceClassification"];
            }
        
            }}
	{id curVal = self.rootFolder;
    if([self.updatedValues containsObject:@"RootFolder"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"RootFolder"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"RootFolder"];
            }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"Photo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Photo"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Photo"];
            }
        
            }}
	{id curVal = self.photos;
    if([self.updatedValues containsObject:@"Photos"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Photos"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.photos) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Photos"];
        }
        
            }}
	{id curVal = self.drive;
    if([self.updatedValues containsObject:@"drive"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"drive"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"drive"];
            }
        
            }}
	{id curVal = self.trendingAround;
    if([self.updatedValues containsObject:@"TrendingAround"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"TrendingAround"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.trendingAround) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"TrendingAround"];
        }
        
            }}
	{id curVal = self.workingWith;
    if([self.updatedValues containsObject:@"WorkingWith"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"WorkingWith"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.workingWith) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"WorkingWith"];
        }
        
            }}
	{id curVal = self.tasks;
    if([self.updatedValues containsObject:@"tasks"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"tasks"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.tasks) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"tasks"];
        }
        
            }}
	{id curVal = self.plans;
    if([self.updatedValues containsObject:@"plans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"plans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.plans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"plans"];
        }
        
            }}
	{id curVal = self.notes;
    if([self.updatedValues containsObject:@"notes"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"notes"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"notes"];
            }
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
            }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
            }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
            }
    }
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property assignedLicenses
 *
 */
- (void) setAssignedLicenses: (NSMutableArray *) value {
    _assignedLicenses = value;
    [self valueChangedFor:@"assignedLicenses"];
}
       
/** Setter implementation for property assignedPlans
 *
 */
- (void) setAssignedPlans: (NSMutableArray *) value {
    _assignedPlans = value;
    [self valueChangedFor:@"assignedPlans"];
}
       
/** Setter implementation for property city
 *
 */
- (void) setCity: (NSString *) value {
    _city = value;
    [self valueChangedFor:@"city"];
}
       
/** Setter implementation for property country
 *
 */
- (void) setCountry: (NSString *) value {
    _country = value;
    [self valueChangedFor:@"country"];
}
       
/** Setter implementation for property department
 *
 */
- (void) setDepartment: (NSString *) value {
    _department = value;
    [self valueChangedFor:@"department"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property facsimileTelephoneNumber
 *
 */
- (void) setFacsimileTelephoneNumber: (NSString *) value {
    _facsimileTelephoneNumber = value;
    [self valueChangedFor:@"facsimileTelephoneNumber"];
}
       
/** Setter implementation for property givenName
 *
 */
- (void) setGivenName: (NSString *) value {
    _givenName = value;
    [self valueChangedFor:@"givenName"];
}
       
/** Setter implementation for property immutableId
 *
 */
- (void) setImmutableId: (NSString *) value {
    _immutableId = value;
    [self valueChangedFor:@"immutableId"];
}
       
/** Setter implementation for property jobTitle
 *
 */
- (void) setJobTitle: (NSString *) value {
    _jobTitle = value;
    [self valueChangedFor:@"jobTitle"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property mail
 *
 */
- (void) setMail: (NSString *) value {
    _mail = value;
    [self valueChangedFor:@"mail"];
}
       
/** Setter implementation for property mailNickname
 *
 */
- (void) setMailNickname: (NSString *) value {
    _mailNickname = value;
    [self valueChangedFor:@"mailNickname"];
}
       
/** Setter implementation for property mobile
 *
 */
- (void) setMobile: (NSString *) value {
    _mobile = value;
    [self valueChangedFor:@"mobile"];
}
       
/** Setter implementation for property onPremisesSecurityIdentifier
 *
 */
- (void) setOnPremisesSecurityIdentifier: (NSString *) value {
    _onPremisesSecurityIdentifier = value;
    [self valueChangedFor:@"onPremisesSecurityIdentifier"];
}
       
/** Setter implementation for property otherMails
 *
 */
- (void) setOtherMails: (NSMutableArray *) value {
    _otherMails = value;
    [self valueChangedFor:@"otherMails"];
}
       
/** Setter implementation for property passwordPolicies
 *
 */
- (void) setPasswordPolicies: (NSString *) value {
    _passwordPolicies = value;
    [self valueChangedFor:@"passwordPolicies"];
}
       
/** Setter implementation for property passwordProfile
 *
 */
- (void) setPasswordProfile: (MSGraphPasswordProfile *) value {
    _passwordProfile = value;
    [self valueChangedFor:@"passwordProfile"];
}
       
/** Setter implementation for property physicalDeliveryOfficeName
 *
 */
- (void) setPhysicalDeliveryOfficeName: (NSString *) value {
    _physicalDeliveryOfficeName = value;
    [self valueChangedFor:@"physicalDeliveryOfficeName"];
}
       
/** Setter implementation for property postalCode
 *
 */
- (void) setPostalCode: (NSString *) value {
    _postalCode = value;
    [self valueChangedFor:@"postalCode"];
}
       
/** Setter implementation for property preferredLanguage
 *
 */
- (void) setPreferredLanguage: (NSString *) value {
    _preferredLanguage = value;
    [self valueChangedFor:@"preferredLanguage"];
}
       
/** Setter implementation for property provisionedPlans
 *
 */
- (void) setProvisionedPlans: (NSMutableArray *) value {
    _provisionedPlans = value;
    [self valueChangedFor:@"provisionedPlans"];
}
       
/** Setter implementation for property provisioningErrors
 *
 */
- (void) setProvisioningErrors: (NSMutableArray *) value {
    _provisioningErrors = value;
    [self valueChangedFor:@"provisioningErrors"];
}
       
/** Setter implementation for property proxyAddresses
 *
 */
- (void) setProxyAddresses: (NSMutableArray *) value {
    _proxyAddresses = value;
    [self valueChangedFor:@"proxyAddresses"];
}
       
/** Setter implementation for property sipProxyAddress
 *
 */
- (void) setSipProxyAddress: (NSString *) value {
    _sipProxyAddress = value;
    [self valueChangedFor:@"sipProxyAddress"];
}
       
/** Setter implementation for property state
 *
 */
- (void) setState: (NSString *) value {
    _state = value;
    [self valueChangedFor:@"state"];
}
       
/** Setter implementation for property streetAddress
 *
 */
- (void) setStreetAddress: (NSString *) value {
    _streetAddress = value;
    [self valueChangedFor:@"streetAddress"];
}
       
/** Setter implementation for property surname
 *
 */
- (void) setSurname: (NSString *) value {
    _surname = value;
    [self valueChangedFor:@"surname"];
}
       
/** Setter implementation for property telephoneNumber
 *
 */
- (void) setTelephoneNumber: (NSString *) value {
    _telephoneNumber = value;
    [self valueChangedFor:@"telephoneNumber"];
}
       
/** Setter implementation for property thumbnailPhoto
 *
 */
- (void) setThumbnailPhoto: (NSStream *) value {
    _thumbnailPhoto = value;
    [self valueChangedFor:@"thumbnailPhoto"];
}
       
/** Setter implementation for property usageLocation
 *
 */
- (void) setUsageLocation: (NSString *) value {
    _usageLocation = value;
    [self valueChangedFor:@"usageLocation"];
}
       
/** Setter implementation for property userPrincipalName
 *
 */
- (void) setUserPrincipalName: (NSString *) value {
    _userPrincipalName = value;
    [self valueChangedFor:@"userPrincipalName"];
}
       
/** Setter implementation for property userType
 *
 */
- (void) setUserType: (NSString *) value {
    _userType = value;
    [self valueChangedFor:@"userType"];
}
       
/** Setter implementation for property mailboxGuid
 *
 */
- (void) setMailboxGuid: (NSString *) value {
    _mailboxGuid = value;
    [self valueChangedFor:@"MailboxGuid"];
}
       
/** Setter implementation for property aboutMe
 *
 */
- (void) setAboutMe: (NSString *) value {
    _aboutMe = value;
    [self valueChangedFor:@"aboutMe"];
}
       
/** Setter implementation for property alias
 *
 */
- (void) setAlias: (NSString *) value {
    _alias = value;
    [self valueChangedFor:@"alias"];
}
       
/** Setter implementation for property birthday
 *
 */
- (void) setBirthday: (NSDate *) value {
    _birthday = value;
    [self valueChangedFor:@"birthday"];
}
       
/** Setter implementation for property hireDate
 *
 */
- (void) setHireDate: (NSDate *) value {
    _hireDate = value;
    [self valueChangedFor:@"hireDate"];
}
       
/** Setter implementation for property interests
 *
 */
- (void) setInterests: (NSMutableArray *) value {
    _interests = value;
    [self valueChangedFor:@"interests"];
}
       
/** Setter implementation for property mySite
 *
 */
- (void) setMySite: (NSString *) value {
    _mySite = value;
    [self valueChangedFor:@"mySite"];
}
       
/** Setter implementation for property pastProjects
 *
 */
- (void) setPastProjects: (NSMutableArray *) value {
    _pastProjects = value;
    [self valueChangedFor:@"pastProjects"];
}
       
/** Setter implementation for property preferredName
 *
 */
- (void) setPreferredName: (NSString *) value {
    _preferredName = value;
    [self valueChangedFor:@"preferredName"];
}
       
/** Setter implementation for property principalName
 *
 */
- (void) setPrincipalName: (NSString *) value {
    _principalName = value;
    [self valueChangedFor:@"principalName"];
}
       
/** Setter implementation for property responsibilities
 *
 */
- (void) setResponsibilities: (NSMutableArray *) value {
    _responsibilities = value;
    [self valueChangedFor:@"responsibilities"];
}
       
/** Setter implementation for property schools
 *
 */
- (void) setSchools: (NSMutableArray *) value {
    _schools = value;
    [self valueChangedFor:@"schools"];
}
       
/** Setter implementation for property skills
 *
 */
- (void) setSkills: (NSMutableArray *) value {
    _skills = value;
    [self valueChangedFor:@"skills"];
}
       
/** Setter implementation for property tags
 *
 */
- (void) setTags: (NSMutableArray *) value {
    _tags = value;
    [self valueChangedFor:@"tags"];
}
       
/** Setter implementation for property appRoleAssignments
 *
 */
- (void) setAppRoleAssignments: (NSMutableArray *) value {
    _appRoleAssignments = value;
    [self valueChangedFor:@"appRoleAssignments"];
}
       
/** Setter implementation for property oauth2PermissionGrants
 *
 */
- (void) setOauth2PermissionGrants: (NSMutableArray *) value {
    _oauth2PermissionGrants = value;
    [self valueChangedFor:@"oauth2PermissionGrants"];
}
       
/** Setter implementation for property ownedDevices
 *
 */
- (void) setOwnedDevices: (NSMutableArray *) value {
    _ownedDevices = value;
    [self valueChangedFor:@"ownedDevices"];
}
       
/** Setter implementation for property registeredDevices
 *
 */
- (void) setRegisteredDevices: (NSMutableArray *) value {
    _registeredDevices = value;
    [self valueChangedFor:@"registeredDevices"];
}
       
/** Setter implementation for property manager
 *
 */
- (void) setManager: (MSGraphDirectoryObject *) value {
    _manager = value;
    [self valueChangedFor:@"manager"];
}
       
/** Setter implementation for property directReports
 *
 */
- (void) setDirectReports: (NSMutableArray *) value {
    _directReports = value;
    [self valueChangedFor:@"directReports"];
}
       
/** Setter implementation for property memberOf
 *
 */
- (void) setMemberOf: (NSMutableArray *) value {
    _memberOf = value;
    [self valueChangedFor:@"memberOf"];
}
       
/** Setter implementation for property createdObjects
 *
 */
- (void) setCreatedObjects: (NSMutableArray *) value {
    _createdObjects = value;
    [self valueChangedFor:@"createdObjects"];
}
       
/** Setter implementation for property ownedObjects
 *
 */
- (void) setOwnedObjects: (NSMutableArray *) value {
    _ownedObjects = value;
    [self valueChangedFor:@"ownedObjects"];
}
       
/** Setter implementation for property messages
 *
 */
- (void) setMessages: (NSMutableArray *) value {
    _messages = value;
    [self valueChangedFor:@"Messages"];
}
       
/** Setter implementation for property joinedGroups
 *
 */
- (void) setJoinedGroups: (NSMutableArray *) value {
    _joinedGroups = value;
    [self valueChangedFor:@"JoinedGroups"];
}
       
/** Setter implementation for property mailFolders
 *
 */
- (void) setMailFolders: (NSMutableArray *) value {
    _mailFolders = value;
    [self valueChangedFor:@"MailFolders"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSGraphCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendars
 *
 */
- (void) setCalendars: (NSMutableArray *) value {
    _calendars = value;
    [self valueChangedFor:@"Calendars"];
}
       
/** Setter implementation for property calendarGroups
 *
 */
- (void) setCalendarGroups: (NSMutableArray *) value {
    _calendarGroups = value;
    [self valueChangedFor:@"CalendarGroups"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property contacts
 *
 */
- (void) setContacts: (NSMutableArray *) value {
    _contacts = value;
    [self valueChangedFor:@"Contacts"];
}
       
/** Setter implementation for property contactFolders
 *
 */
- (void) setContactFolders: (NSMutableArray *) value {
    _contactFolders = value;
    [self valueChangedFor:@"ContactFolders"];
}
       
/** Setter implementation for property inferenceClassification
 *
 */
- (void) setInferenceClassification: (MSGraphInferenceClassification *) value {
    _inferenceClassification = value;
    [self valueChangedFor:@"InferenceClassification"];
}
       
/** Setter implementation for property rootFolder
 *
 */
- (void) setRootFolder: (MSGraphMailFolder *) value {
    _rootFolder = value;
    [self valueChangedFor:@"RootFolder"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSGraphProfilePhoto *) value {
    _photo = value;
    [self valueChangedFor:@"Photo"];
}
       
/** Setter implementation for property photos
 *
 */
- (void) setPhotos: (NSMutableArray *) value {
    _photos = value;
    [self valueChangedFor:@"Photos"];
}
       
/** Setter implementation for property drive
 *
 */
- (void) setDrive: (MSGraphDrive *) value {
    _drive = value;
    [self valueChangedFor:@"drive"];
}
       
/** Setter implementation for property trendingAround
 *
 */
- (void) setTrendingAround: (NSMutableArray *) value {
    _trendingAround = value;
    [self valueChangedFor:@"TrendingAround"];
}
       
/** Setter implementation for property workingWith
 *
 */
- (void) setWorkingWith: (NSMutableArray *) value {
    _workingWith = value;
    [self valueChangedFor:@"WorkingWith"];
}
       
/** Setter implementation for property tasks
 *
 */
- (void) setTasks: (NSMutableArray *) value {
    _tasks = value;
    [self valueChangedFor:@"tasks"];
}
       
/** Setter implementation for property plans
 *
 */
- (void) setPlans: (NSMutableArray *) value {
    _plans = value;
    [self valueChangedFor:@"plans"];
}
       
/** Setter implementation for property notes
 *
 */
- (void) setNotes: (MSGraphNotes *) value {
    _notes = value;
    [self valueChangedFor:@"notes"];
}
       

@end
