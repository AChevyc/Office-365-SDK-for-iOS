/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphApplication
 *
 */
@implementation MSGraphApplication


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"appId", @"appId", @"appRoles", @"appRoles", @"availableToOtherTenants", @"availableToOtherTenants", @"displayName", @"displayName", @"errorUrl", @"errorUrl", @"groupMembershipClaims", @"groupMembershipClaims", @"homepage", @"homepage", @"identifierUris", @"identifierUris", @"keyCredentials", @"keyCredentials", @"knownClientApplications", @"knownClientApplications", @"mainLogo", @"mainLogo", @"logoutUrl", @"logoutUrl", @"oauth2AllowImplicitFlow", @"oauth2AllowImplicitFlow", @"oauth2AllowUrlPathMatching", @"oauth2AllowUrlPathMatching", @"oauth2Permissions", @"oauth2Permissions", @"oauth2RequirePostResponse", @"oauth2RequirePostResponse", @"passwordCredentials", @"passwordCredentials", @"publicClient", @"publicClient", @"replyUrls", @"replyUrls", @"requiredResourceAccess", @"requiredResourceAccess", @"samlMetadataUrl", @"samlMetadataUrl", @"extensionProperties", @"extensionProperties", @"createdOnBehalfOf", @"createdOnBehalfOf", @"owners", @"owners", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.Application";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_appId = [dic objectForKey: @"appId"] != nil ? [[dic objectForKey: @"appId"] copy] : _appId;

        if([dic objectForKey: @"appRoles"] != [NSNull null]){
            _appRoles = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"appRoles"]) {
                [_appRoles addObject:[[MSGraphAppRole alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_appRoles resetChangedFlag];
        }
        
		_availableToOtherTenants = [dic objectForKey: @"availableToOtherTenants"] != nil ? [[dic objectForKey: @"availableToOtherTenants"] boolValue] : _availableToOtherTenants;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_errorUrl = [dic objectForKey: @"errorUrl"] != nil ? [[dic objectForKey: @"errorUrl"] copy] : _errorUrl;
		_groupMembershipClaims = [dic objectForKey: @"groupMembershipClaims"] != nil ? [[dic objectForKey: @"groupMembershipClaims"] copy] : _groupMembershipClaims;
		_homepage = [dic objectForKey: @"homepage"] != nil ? [[dic objectForKey: @"homepage"] copy] : _homepage;

        if([dic objectForKey: @"identifierUris"] != [NSNull null]){
            _identifierUris = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"identifierUris"]) {
                [_identifierUris addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_identifierUris resetChangedFlag];
        }
        

        if([dic objectForKey: @"keyCredentials"] != [NSNull null]){
            _keyCredentials = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"keyCredentials"]) {
                [_keyCredentials addObject:[[MSGraphKeyCredential alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_keyCredentials resetChangedFlag];
        }
        

        if([dic objectForKey: @"knownClientApplications"] != [NSNull null]){
            _knownClientApplications = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"knownClientApplications"]) {
                [_knownClientApplications addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_knownClientApplications resetChangedFlag];
        }
        
		_mainLogo = [dic objectForKey: @"mainLogo"] != nil ? nil/*NSStream*/ : _mainLogo;
		_logoutUrl = [dic objectForKey: @"logoutUrl"] != nil ? [[dic objectForKey: @"logoutUrl"] copy] : _logoutUrl;
		_oauth2AllowImplicitFlow = [dic objectForKey: @"oauth2AllowImplicitFlow"] != nil ? [[dic objectForKey: @"oauth2AllowImplicitFlow"] boolValue] : _oauth2AllowImplicitFlow;
		_oauth2AllowUrlPathMatching = [dic objectForKey: @"oauth2AllowUrlPathMatching"] != nil ? [[dic objectForKey: @"oauth2AllowUrlPathMatching"] boolValue] : _oauth2AllowUrlPathMatching;

        if([dic objectForKey: @"oauth2Permissions"] != [NSNull null]){
            _oauth2Permissions = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"oauth2Permissions"]) {
                [_oauth2Permissions addObject:[[MSGraphOAuth2Permission alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_oauth2Permissions resetChangedFlag];
        }
        
		_oauth2RequirePostResponse = [dic objectForKey: @"oauth2RequirePostResponse"] != nil ? [[dic objectForKey: @"oauth2RequirePostResponse"] boolValue] : _oauth2RequirePostResponse;

        if([dic objectForKey: @"passwordCredentials"] != [NSNull null]){
            _passwordCredentials = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"passwordCredentials"]) {
                [_passwordCredentials addObject:[[MSGraphPasswordCredential alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_passwordCredentials resetChangedFlag];
        }
        
		_publicClient = [dic objectForKey: @"publicClient"] != nil ? [[dic objectForKey: @"publicClient"] boolValue] : _publicClient;

        if([dic objectForKey: @"replyUrls"] != [NSNull null]){
            _replyUrls = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"replyUrls"]) {
                [_replyUrls addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_replyUrls resetChangedFlag];
        }
        

        if([dic objectForKey: @"requiredResourceAccess"] != [NSNull null]){
            _requiredResourceAccess = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"requiredResourceAccess"]) {
                [_requiredResourceAccess addObject:[[MSGraphRequiredResourceAccess alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_requiredResourceAccess resetChangedFlag];
        }
        
		_samlMetadataUrl = [dic objectForKey: @"samlMetadataUrl"] != nil ? [[dic objectForKey: @"samlMetadataUrl"] copy] : _samlMetadataUrl;

        if([dic objectForKey: @"extensionProperties"] != [NSNull null]){
            _extensionProperties = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"extensionProperties"]) {
                [_extensionProperties addObject:[[MSGraphExtensionProperty alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_extensionProperties resetChangedFlag];
        }
        
		_createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSGraphDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : _createdOnBehalfOf;

        if([dic objectForKey: @"owners"] != [NSNull null]){
            _owners = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [_owners addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_owners resetChangedFlag];
        }
        
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.appId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"appId"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoles) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{[dic setValue: (self.availableToOtherTenants?@"true":@"false") forKey: @"availableToOtherTenants"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.errorUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"errorUrl"];}
	{id curVal = [self.groupMembershipClaims copy];if (curVal!=nil) [dic setValue: curVal forKey: @"groupMembershipClaims"];}
	{id curVal = [self.homepage copy];if (curVal!=nil) [dic setValue: curVal forKey: @"homepage"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.identifierUris) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.keyCredentials) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.knownClientApplications) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = nil/*NSStream*/;if (curVal!=nil) [dic setValue: curVal forKey: @"mainLogo"];}
	{id curVal = [self.logoutUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"logoutUrl"];}
	{[dic setValue: (self.oauth2AllowImplicitFlow?@"true":@"false") forKey: @"oauth2AllowImplicitFlow"];}
	{[dic setValue: (self.oauth2AllowUrlPathMatching?@"true":@"false") forKey: @"oauth2AllowUrlPathMatching"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2Permissions) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{[dic setValue: (self.oauth2RequirePostResponse?@"true":@"false") forKey: @"oauth2RequirePostResponse"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.passwordCredentials) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{[dic setValue: (self.publicClient?@"true":@"false") forKey: @"publicClient"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyUrls) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.requiredResourceAccess) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [self.samlMetadataUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"samlMetadataUrl"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.extensionProperties) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [self.createdOnBehalfOf toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
	{id curVal = [self.objectType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp];if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
    [dic setValue: @"#microsoft.graph.Application" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.appId;
    if([self.updatedValues containsObject:@"appId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"appId"];
            }
    }
	{id curVal = self.appRoles;
    if([self.updatedValues containsObject:@"appRoles"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"appRoles"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoles) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"appRoles"];
        }
        
            }}
	{id curVal = self.availableToOtherTenants;
    if([self.updatedValues containsObject:@"availableToOtherTenants"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"availableToOtherTenants"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.errorUrl;
    if([self.updatedValues containsObject:@"errorUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"errorUrl"];
            }
    }
	{id curVal = self.groupMembershipClaims;
    if([self.updatedValues containsObject:@"groupMembershipClaims"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"groupMembershipClaims"];
            }
    }
	{id curVal = self.homepage;
    if([self.updatedValues containsObject:@"homepage"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"homepage"];
            }
    }
	{id curVal = self.identifierUris;
    if([self.updatedValues containsObject:@"identifierUris"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"identifierUris"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.identifierUris) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"identifierUris"];
        }
        
            }}
	{id curVal = self.keyCredentials;
    if([self.updatedValues containsObject:@"keyCredentials"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"keyCredentials"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.keyCredentials) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"keyCredentials"];
        }
        
            }}
	{id curVal = self.knownClientApplications;
    if([self.updatedValues containsObject:@"knownClientApplications"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"knownClientApplications"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.knownClientApplications) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"knownClientApplications"];
        }
        
            }}
	{id curVal = self.mainLogo;
    if([self.updatedValues containsObject:@"mainLogo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"mainLogo"];
            }
    }
	{id curVal = self.logoutUrl;
    if([self.updatedValues containsObject:@"logoutUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"logoutUrl"];
            }
    }
	{id curVal = self.oauth2AllowImplicitFlow;
    if([self.updatedValues containsObject:@"oauth2AllowImplicitFlow"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"oauth2AllowImplicitFlow"];
            }
    }
	{id curVal = self.oauth2AllowUrlPathMatching;
    if([self.updatedValues containsObject:@"oauth2AllowUrlPathMatching"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"oauth2AllowUrlPathMatching"];
            }
    }
	{id curVal = self.oauth2Permissions;
    if([self.updatedValues containsObject:@"oauth2Permissions"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"oauth2Permissions"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2Permissions) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"oauth2Permissions"];
        }
        
            }}
	{id curVal = self.oauth2RequirePostResponse;
    if([self.updatedValues containsObject:@"oauth2RequirePostResponse"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"oauth2RequirePostResponse"];
            }
    }
	{id curVal = self.passwordCredentials;
    if([self.updatedValues containsObject:@"passwordCredentials"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"passwordCredentials"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.passwordCredentials) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"passwordCredentials"];
        }
        
            }}
	{id curVal = self.publicClient;
    if([self.updatedValues containsObject:@"publicClient"])
    {
                [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"publicClient"];
            }
    }
	{id curVal = self.replyUrls;
    if([self.updatedValues containsObject:@"replyUrls"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"replyUrls"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyUrls) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"replyUrls"];
        }
        
            }}
	{id curVal = self.requiredResourceAccess;
    if([self.updatedValues containsObject:@"requiredResourceAccess"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"requiredResourceAccess"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.requiredResourceAccess) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"requiredResourceAccess"];
        }
        
            }}
	{id curVal = self.samlMetadataUrl;
    if([self.updatedValues containsObject:@"samlMetadataUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"samlMetadataUrl"];
            }
    }
	{id curVal = self.extensionProperties;
    if([self.updatedValues containsObject:@"extensionProperties"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"extensionProperties"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.extensionProperties) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"extensionProperties"];
        }
        
            }}
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"owners"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"owners"];
        }
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
            }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
            }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
            }
    }
    return dic;
}


/** Setter implementation for property appId
 *
 */
- (void) setAppId: (NSString *) value {
    _appId = value;
    [self valueChangedFor:@"appId"];
}
       
/** Setter implementation for property appRoles
 *
 */
- (void) setAppRoles: (NSMutableArray *) value {
    _appRoles = value;
    [self valueChangedFor:@"appRoles"];
}
       
/** Setter implementation for property availableToOtherTenants
 *
 */
- (void) setAvailableToOtherTenants: (bool) value {
    _availableToOtherTenants = value;
    [self valueChangedFor:@"availableToOtherTenants"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property errorUrl
 *
 */
- (void) setErrorUrl: (NSString *) value {
    _errorUrl = value;
    [self valueChangedFor:@"errorUrl"];
}
       
/** Setter implementation for property groupMembershipClaims
 *
 */
- (void) setGroupMembershipClaims: (NSString *) value {
    _groupMembershipClaims = value;
    [self valueChangedFor:@"groupMembershipClaims"];
}
       
/** Setter implementation for property homepage
 *
 */
- (void) setHomepage: (NSString *) value {
    _homepage = value;
    [self valueChangedFor:@"homepage"];
}
       
/** Setter implementation for property identifierUris
 *
 */
- (void) setIdentifierUris: (NSMutableArray *) value {
    _identifierUris = value;
    [self valueChangedFor:@"identifierUris"];
}
       
/** Setter implementation for property keyCredentials
 *
 */
- (void) setKeyCredentials: (NSMutableArray *) value {
    _keyCredentials = value;
    [self valueChangedFor:@"keyCredentials"];
}
       
/** Setter implementation for property knownClientApplications
 *
 */
- (void) setKnownClientApplications: (NSMutableArray *) value {
    _knownClientApplications = value;
    [self valueChangedFor:@"knownClientApplications"];
}
       
/** Setter implementation for property mainLogo
 *
 */
- (void) setMainLogo: (NSStream *) value {
    _mainLogo = value;
    [self valueChangedFor:@"mainLogo"];
}
       
/** Setter implementation for property logoutUrl
 *
 */
- (void) setLogoutUrl: (NSString *) value {
    _logoutUrl = value;
    [self valueChangedFor:@"logoutUrl"];
}
       
/** Setter implementation for property oauth2AllowImplicitFlow
 *
 */
- (void) setOauth2AllowImplicitFlow: (bool) value {
    _oauth2AllowImplicitFlow = value;
    [self valueChangedFor:@"oauth2AllowImplicitFlow"];
}
       
/** Setter implementation for property oauth2AllowUrlPathMatching
 *
 */
- (void) setOauth2AllowUrlPathMatching: (bool) value {
    _oauth2AllowUrlPathMatching = value;
    [self valueChangedFor:@"oauth2AllowUrlPathMatching"];
}
       
/** Setter implementation for property oauth2Permissions
 *
 */
- (void) setOauth2Permissions: (NSMutableArray *) value {
    _oauth2Permissions = value;
    [self valueChangedFor:@"oauth2Permissions"];
}
       
/** Setter implementation for property oauth2RequirePostResponse
 *
 */
- (void) setOauth2RequirePostResponse: (bool) value {
    _oauth2RequirePostResponse = value;
    [self valueChangedFor:@"oauth2RequirePostResponse"];
}
       
/** Setter implementation for property passwordCredentials
 *
 */
- (void) setPasswordCredentials: (NSMutableArray *) value {
    _passwordCredentials = value;
    [self valueChangedFor:@"passwordCredentials"];
}
       
/** Setter implementation for property publicClient
 *
 */
- (void) setPublicClient: (bool) value {
    _publicClient = value;
    [self valueChangedFor:@"publicClient"];
}
       
/** Setter implementation for property replyUrls
 *
 */
- (void) setReplyUrls: (NSMutableArray *) value {
    _replyUrls = value;
    [self valueChangedFor:@"replyUrls"];
}
       
/** Setter implementation for property requiredResourceAccess
 *
 */
- (void) setRequiredResourceAccess: (NSMutableArray *) value {
    _requiredResourceAccess = value;
    [self valueChangedFor:@"requiredResourceAccess"];
}
       
/** Setter implementation for property samlMetadataUrl
 *
 */
- (void) setSamlMetadataUrl: (NSString *) value {
    _samlMetadataUrl = value;
    [self valueChangedFor:@"samlMetadataUrl"];
}
       
/** Setter implementation for property extensionProperties
 *
 */
- (void) setExtensionProperties: (NSMutableArray *) value {
    _extensionProperties = value;
    [self valueChangedFor:@"extensionProperties"];
}
       
/** Setter implementation for property createdOnBehalfOf
 *
 */
- (void) setCreatedOnBehalfOf: (MSGraphDirectoryObject *) value {
    _createdOnBehalfOf = value;
    [self valueChangedFor:@"createdOnBehalfOf"];
}
       
/** Setter implementation for property owners
 *
 */
- (void) setOwners: (NSMutableArray *) value {
    _owners = value;
    [self valueChangedFor:@"owners"];
}
       

@end
