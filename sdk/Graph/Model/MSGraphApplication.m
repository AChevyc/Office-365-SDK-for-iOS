/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphApplication
 *
 */
@implementation MSGraphApplication


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"appId", @"appId", @"appRoles", @"appRoles", @"availableToOtherTenants", @"availableToOtherTenants", @"displayName", @"displayName", @"errorUrl", @"errorUrl", @"groupMembershipClaims", @"groupMembershipClaims", @"homepage", @"homepage", @"identifierUris", @"identifierUris", @"keyCredentials", @"keyCredentials", @"knownClientApplications", @"knownClientApplications", @"mainLogo", @"mainLogo", @"logoutUrl", @"logoutUrl", @"oauth2AllowImplicitFlow", @"oauth2AllowImplicitFlow", @"oauth2AllowUrlPathMatching", @"oauth2AllowUrlPathMatching", @"oauth2Permissions", @"oauth2Permissions", @"oauth2RequirePostResponse", @"oauth2RequirePostResponse", @"passwordCredentials", @"passwordCredentials", @"publicClient", @"publicClient", @"replyUrls", @"replyUrls", @"requiredResourceAccess", @"requiredResourceAccess", @"samlMetadataUrl", @"samlMetadataUrl", @"extensionProperties", @"extensionProperties", @"createdOnBehalfOf", @"createdOnBehalfOf", @"owners", @"owners", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.Graph.Application";
        
        
		_appRoles = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_identifierUris = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_keyCredentials = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_knownClientApplications = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_oauth2Permissions = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_passwordCredentials = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_replyUrls = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_requiredResourceAccess = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_extensionProperties = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_owners = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_appId = [dic objectForKey: @"appId"] != nil ? [[dic objectForKey: @"appId"] copy] : _appId;

        if([dic objectForKey: @"appRoles"] != [NSNull null]){
            _appRoles = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoles"] count]];
            
            for (id object in [dic objectForKey: @"appRoles"]) {
                [_appRoles addObject:[[MSGraphAppRole alloc] initWithDictionary: object]];
            }
        }
        
		_availableToOtherTenants = [dic objectForKey: @"availableToOtherTenants"] != nil ? [[dic objectForKey: @"availableToOtherTenants"] boolValue] : _availableToOtherTenants;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_errorUrl = [dic objectForKey: @"errorUrl"] != nil ? [[dic objectForKey: @"errorUrl"] copy] : _errorUrl;
		_groupMembershipClaims = [dic objectForKey: @"groupMembershipClaims"] != nil ? [[dic objectForKey: @"groupMembershipClaims"] copy] : _groupMembershipClaims;
		_homepage = [dic objectForKey: @"homepage"] != nil ? [[dic objectForKey: @"homepage"] copy] : _homepage;

        if([dic objectForKey: @"identifierUris"] != [NSNull null]){
            _identifierUris = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"identifierUris"] count]];
            
            for (id object in [dic objectForKey: @"identifierUris"]) {
                [_identifierUris addObject:[object copy]];
            }
        }
        

        if([dic objectForKey: @"keyCredentials"] != [NSNull null]){
            _keyCredentials = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"keyCredentials"] count]];
            
            for (id object in [dic objectForKey: @"keyCredentials"]) {
                [_keyCredentials addObject:[[MSGraphKeyCredential alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"knownClientApplications"] != [NSNull null]){
            _knownClientApplications = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"knownClientApplications"] count]];
            
            for (id object in [dic objectForKey: @"knownClientApplications"]) {
                [_knownClientApplications addObject:[object copy]];
            }
        }
        
		_mainLogo = [dic objectForKey: @"mainLogo"] != nil ? nil/*NSStream*/ : _mainLogo;
		_logoutUrl = [dic objectForKey: @"logoutUrl"] != nil ? [[dic objectForKey: @"logoutUrl"] copy] : _logoutUrl;
		_oauth2AllowImplicitFlow = [dic objectForKey: @"oauth2AllowImplicitFlow"] != nil ? [[dic objectForKey: @"oauth2AllowImplicitFlow"] boolValue] : _oauth2AllowImplicitFlow;
		_oauth2AllowUrlPathMatching = [dic objectForKey: @"oauth2AllowUrlPathMatching"] != nil ? [[dic objectForKey: @"oauth2AllowUrlPathMatching"] boolValue] : _oauth2AllowUrlPathMatching;

        if([dic objectForKey: @"oauth2Permissions"] != [NSNull null]){
            _oauth2Permissions = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"oauth2Permissions"] count]];
            
            for (id object in [dic objectForKey: @"oauth2Permissions"]) {
                [_oauth2Permissions addObject:[[MSGraphOAuth2Permission alloc] initWithDictionary: object]];
            }
        }
        
		_oauth2RequirePostResponse = [dic objectForKey: @"oauth2RequirePostResponse"] != nil ? [[dic objectForKey: @"oauth2RequirePostResponse"] boolValue] : _oauth2RequirePostResponse;

        if([dic objectForKey: @"passwordCredentials"] != [NSNull null]){
            _passwordCredentials = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"passwordCredentials"] count]];
            
            for (id object in [dic objectForKey: @"passwordCredentials"]) {
                [_passwordCredentials addObject:[[MSGraphPasswordCredential alloc] initWithDictionary: object]];
            }
        }
        
		_publicClient = [dic objectForKey: @"publicClient"] != nil ? [[dic objectForKey: @"publicClient"] boolValue] : _publicClient;

        if([dic objectForKey: @"replyUrls"] != [NSNull null]){
            _replyUrls = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"replyUrls"] count]];
            
            for (id object in [dic objectForKey: @"replyUrls"]) {
                [_replyUrls addObject:[object copy]];
            }
        }
        

        if([dic objectForKey: @"requiredResourceAccess"] != [NSNull null]){
            _requiredResourceAccess = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"requiredResourceAccess"] count]];
            
            for (id object in [dic objectForKey: @"requiredResourceAccess"]) {
                [_requiredResourceAccess addObject:[[MSGraphRequiredResourceAccess alloc] initWithDictionary: object]];
            }
        }
        
		_samlMetadataUrl = [dic objectForKey: @"samlMetadataUrl"] != nil ? [[dic objectForKey: @"samlMetadataUrl"] copy] : _samlMetadataUrl;

        if([dic objectForKey: @"extensionProperties"] != [NSNull null]){
            _extensionProperties = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"extensionProperties"] count]];
            
            for (id object in [dic objectForKey: @"extensionProperties"]) {
                [_extensionProperties addObject:[[MSGraphExtensionProperty alloc] initWithDictionary: object]];
            }
        }
        
		_createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSGraphDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : _createdOnBehalfOf;

        if([dic objectForKey: @"owners"] != [NSNull null]){
            _owners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"owners"] count]];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [_owners addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    return [[NSDictionary alloc] initWithObjectsAndKeys: 
    		 [_appId copy], @"appId",
		 [[NSMutableArray alloc] init], @"appRoles",
		 (_availableToOtherTenants?@"true":@"false"), @"availableToOtherTenants",
		 [_displayName copy], @"displayName",
		 [_errorUrl copy], @"errorUrl",
		 [_groupMembershipClaims copy], @"groupMembershipClaims",
		 [_homepage copy], @"homepage",
		 [[NSMutableArray alloc] init], @"identifierUris",
		 [[NSMutableArray alloc] init], @"keyCredentials",
		 [[NSMutableArray alloc] init], @"knownClientApplications",
		 nil/*NSStream*/, @"mainLogo",
		 [_logoutUrl copy], @"logoutUrl",
		 (_oauth2AllowImplicitFlow?@"true":@"false"), @"oauth2AllowImplicitFlow",
		 (_oauth2AllowUrlPathMatching?@"true":@"false"), @"oauth2AllowUrlPathMatching",
		 [[NSMutableArray alloc] init], @"oauth2Permissions",
		 (_oauth2RequirePostResponse?@"true":@"false"), @"oauth2RequirePostResponse",
		 [[NSMutableArray alloc] init], @"passwordCredentials",
		 (_publicClient?@"true":@"false"), @"publicClient",
		 [[NSMutableArray alloc] init], @"replyUrls",
		 [[NSMutableArray alloc] init], @"requiredResourceAccess",
		 [_samlMetadataUrl copy], @"samlMetadataUrl",
		 [[NSMutableArray alloc] init], @"extensionProperties",
		 [_createdOnBehalfOf toDictionary], @"createdOnBehalfOf",
		 [[NSMutableArray alloc] init], @"owners",
            nil];
}


/** Setter implementation for property appId
 *
 */
- (void) setAppId: (NSString *) value {
    _appId = value;
    [self valueChangedFor:@"appId"];
}
       
/** Setter implementation for property appRoles
 *
 */
- (void) setAppRoles: (NSMutableArray *) value {
    _appRoles = value;
    [self valueChangedFor:@"appRoles"];
}
       
/** Setter implementation for property availableToOtherTenants
 *
 */
- (void) setAvailableToOtherTenants: (bool) value {
    _availableToOtherTenants = value;
    [self valueChangedFor:@"availableToOtherTenants"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property errorUrl
 *
 */
- (void) setErrorUrl: (NSString *) value {
    _errorUrl = value;
    [self valueChangedFor:@"errorUrl"];
}
       
/** Setter implementation for property groupMembershipClaims
 *
 */
- (void) setGroupMembershipClaims: (NSString *) value {
    _groupMembershipClaims = value;
    [self valueChangedFor:@"groupMembershipClaims"];
}
       
/** Setter implementation for property homepage
 *
 */
- (void) setHomepage: (NSString *) value {
    _homepage = value;
    [self valueChangedFor:@"homepage"];
}
       
/** Setter implementation for property identifierUris
 *
 */
- (void) setIdentifierUris: (NSMutableArray *) value {
    _identifierUris = value;
    [self valueChangedFor:@"identifierUris"];
}
       
/** Setter implementation for property keyCredentials
 *
 */
- (void) setKeyCredentials: (NSMutableArray *) value {
    _keyCredentials = value;
    [self valueChangedFor:@"keyCredentials"];
}
       
/** Setter implementation for property knownClientApplications
 *
 */
- (void) setKnownClientApplications: (NSMutableArray *) value {
    _knownClientApplications = value;
    [self valueChangedFor:@"knownClientApplications"];
}
       
/** Setter implementation for property mainLogo
 *
 */
- (void) setMainLogo: (NSStream *) value {
    _mainLogo = value;
    [self valueChangedFor:@"mainLogo"];
}
       
/** Setter implementation for property logoutUrl
 *
 */
- (void) setLogoutUrl: (NSString *) value {
    _logoutUrl = value;
    [self valueChangedFor:@"logoutUrl"];
}
       
/** Setter implementation for property oauth2AllowImplicitFlow
 *
 */
- (void) setOauth2AllowImplicitFlow: (bool) value {
    _oauth2AllowImplicitFlow = value;
    [self valueChangedFor:@"oauth2AllowImplicitFlow"];
}
       
/** Setter implementation for property oauth2AllowUrlPathMatching
 *
 */
- (void) setOauth2AllowUrlPathMatching: (bool) value {
    _oauth2AllowUrlPathMatching = value;
    [self valueChangedFor:@"oauth2AllowUrlPathMatching"];
}
       
/** Setter implementation for property oauth2Permissions
 *
 */
- (void) setOauth2Permissions: (NSMutableArray *) value {
    _oauth2Permissions = value;
    [self valueChangedFor:@"oauth2Permissions"];
}
       
/** Setter implementation for property oauth2RequirePostResponse
 *
 */
- (void) setOauth2RequirePostResponse: (bool) value {
    _oauth2RequirePostResponse = value;
    [self valueChangedFor:@"oauth2RequirePostResponse"];
}
       
/** Setter implementation for property passwordCredentials
 *
 */
- (void) setPasswordCredentials: (NSMutableArray *) value {
    _passwordCredentials = value;
    [self valueChangedFor:@"passwordCredentials"];
}
       
/** Setter implementation for property publicClient
 *
 */
- (void) setPublicClient: (bool) value {
    _publicClient = value;
    [self valueChangedFor:@"publicClient"];
}
       
/** Setter implementation for property replyUrls
 *
 */
- (void) setReplyUrls: (NSMutableArray *) value {
    _replyUrls = value;
    [self valueChangedFor:@"replyUrls"];
}
       
/** Setter implementation for property requiredResourceAccess
 *
 */
- (void) setRequiredResourceAccess: (NSMutableArray *) value {
    _requiredResourceAccess = value;
    [self valueChangedFor:@"requiredResourceAccess"];
}
       
/** Setter implementation for property samlMetadataUrl
 *
 */
- (void) setSamlMetadataUrl: (NSString *) value {
    _samlMetadataUrl = value;
    [self valueChangedFor:@"samlMetadataUrl"];
}
       
/** Setter implementation for property extensionProperties
 *
 */
- (void) setExtensionProperties: (NSMutableArray *) value {
    _extensionProperties = value;
    [self valueChangedFor:@"extensionProperties"];
}
       
/** Setter implementation for property createdOnBehalfOf
 *
 */
- (void) setCreatedOnBehalfOf: (MSGraphDirectoryObject *) value {
    _createdOnBehalfOf = value;
    [self valueChangedFor:@"createdOnBehalfOf"];
}
       
/** Setter implementation for property owners
 *
 */
- (void) setOwners: (NSMutableArray *) value {
    _owners = value;
    [self valueChangedFor:@"owners"];
}
       

@end
