/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphItem
 *
 */
@implementation MSGraphItem


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"content", @"content", @"createdBy", @"createdBy", @"createdDateTime", @"createdDateTime", @"cTag", @"cTag", @"description", @"_description", @"eTag", @"eTag", @"id", @"_id", @"lastModifiedBy", @"lastModifiedBy", @"lastModifiedDateTime", @"lastModifiedDateTime", @"name", @"name", @"parentReference", @"parentReference", @"size", @"size", @"webDavUrl", @"webDavUrl", @"webUrl", @"webUrl", @"audio", @"audio", @"deleted", @"deleted", @"file", @"file", @"fileSystemInfo", @"fileSystemInfo", @"folder", @"folder", @"image", @"image", @"location", @"location", @"openWith", @"openWith", @"photo", @"photo", @"searchResult", @"searchResult", @"shared", @"shared", @"specialFolder", @"specialFolder", @"video", @"video", @"createdByUser", @"createdByUser", @"lastModifiedByUser", @"lastModifiedByUser", @"permissions", @"permissions", @"versions", @"versions", @"children", @"children", @"thumbnails", @"thumbnails", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.Graph.item";
        
        
		_permissions = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_versions = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_children = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_thumbnails = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_content = [dic objectForKey: @"content"] != nil ? nil/*NSStream*/ : _content;
		_createdBy = [dic objectForKey: @"createdBy"] != nil ? [[MSGraphIdentitySet alloc] initWithDictionary: [dic objectForKey: @"createdBy"]] : _createdBy;
		_createdDateTime = [dic objectForKey: @"createdDateTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"createdDateTime"]] : _createdDateTime;
		_cTag = [dic objectForKey: @"cTag"] != nil ? [[dic objectForKey: @"cTag"] copy] : _cTag;
		__description = [dic objectForKey: @"description"] != nil ? [[dic objectForKey: @"description"] copy] : __description;
		_eTag = [dic objectForKey: @"eTag"] != nil ? [[dic objectForKey: @"eTag"] copy] : _eTag;
		__id = [dic objectForKey: @"id"] != nil ? [[dic objectForKey: @"id"] copy] : __id;
		_lastModifiedBy = [dic objectForKey: @"lastModifiedBy"] != nil ? [[MSGraphIdentitySet alloc] initWithDictionary: [dic objectForKey: @"lastModifiedBy"]] : _lastModifiedBy;
		_lastModifiedDateTime = [dic objectForKey: @"lastModifiedDateTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastModifiedDateTime"]] : _lastModifiedDateTime;
		_name = [dic objectForKey: @"name"] != nil ? [[dic objectForKey: @"name"] copy] : _name;
		_parentReference = [dic objectForKey: @"parentReference"] != nil ? [[MSGraphItemReference alloc] initWithDictionary: [dic objectForKey: @"parentReference"]] : _parentReference;
		_size = [dic objectForKey: @"size"] != nil ? [[dic objectForKey: @"size"] longLongValue] : _size;
		_webDavUrl = [dic objectForKey: @"webDavUrl"] != nil ? [[dic objectForKey: @"webDavUrl"] copy] : _webDavUrl;
		_webUrl = [dic objectForKey: @"webUrl"] != nil ? [[dic objectForKey: @"webUrl"] copy] : _webUrl;
		_audio = [dic objectForKey: @"audio"] != nil ? [[MSGraphAudio alloc] initWithDictionary: [dic objectForKey: @"audio"]] : _audio;
		_deleted = [dic objectForKey: @"deleted"] != nil ? [[MSGraphDeleted alloc] initWithDictionary: [dic objectForKey: @"deleted"]] : _deleted;
		_file = [dic objectForKey: @"file"] != nil ? [[MSGraphFile alloc] initWithDictionary: [dic objectForKey: @"file"]] : _file;
		_fileSystemInfo = [dic objectForKey: @"fileSystemInfo"] != nil ? [[MSGraphFileSystemInfo alloc] initWithDictionary: [dic objectForKey: @"fileSystemInfo"]] : _fileSystemInfo;
		_folder = [dic objectForKey: @"folder"] != nil ? [[MSGraphFolder alloc] initWithDictionary: [dic objectForKey: @"folder"]] : _folder;
		_image = [dic objectForKey: @"image"] != nil ? [[MSGraphImage alloc] initWithDictionary: [dic objectForKey: @"image"]] : _image;
		_location = [dic objectForKey: @"location"] != nil ? [[MSGraphGeoCoordinates alloc] initWithDictionary: [dic objectForKey: @"location"]] : _location;
		_openWith = [dic objectForKey: @"openWith"] != nil ? [[MSGraphOpenWithSet alloc] initWithDictionary: [dic objectForKey: @"openWith"]] : _openWith;
		_photo = [dic objectForKey: @"photo"] != nil ? [[MSGraphPhoto alloc] initWithDictionary: [dic objectForKey: @"photo"]] : _photo;
		_searchResult = [dic objectForKey: @"searchResult"] != nil ? [[MSGraphSearchResult alloc] initWithDictionary: [dic objectForKey: @"searchResult"]] : _searchResult;
		_shared = [dic objectForKey: @"shared"] != nil ? [[MSGraphShared alloc] initWithDictionary: [dic objectForKey: @"shared"]] : _shared;
		_specialFolder = [dic objectForKey: @"specialFolder"] != nil ? [[MSGraphSpecialFolder alloc] initWithDictionary: [dic objectForKey: @"specialFolder"]] : _specialFolder;
		_video = [dic objectForKey: @"video"] != nil ? [[MSGraphVideo alloc] initWithDictionary: [dic objectForKey: @"video"]] : _video;
		_createdByUser = [dic objectForKey: @"createdByUser"] != nil ? [[MSGraphUser alloc] initWithDictionary: [dic objectForKey: @"createdByUser"]] : _createdByUser;
		_lastModifiedByUser = [dic objectForKey: @"lastModifiedByUser"] != nil ? [[MSGraphUser alloc] initWithDictionary: [dic objectForKey: @"lastModifiedByUser"]] : _lastModifiedByUser;

        if([dic objectForKey: @"permissions"] != [NSNull null]){
            _permissions = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"permissions"] count]];
            
            for (id object in [dic objectForKey: @"permissions"]) {
                [_permissions addObject:[[MSGraphPermission alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"versions"] != [NSNull null]){
            _versions = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"versions"] count]];
            
            for (id object in [dic objectForKey: @"versions"]) {
                [_versions addObject:[[MSGraphItem alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"children"] != [NSNull null]){
            _children = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"children"] count]];
            
            for (id object in [dic objectForKey: @"children"]) {
                [_children addObject:[[MSGraphItem alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"thumbnails"] != [NSNull null]){
            _thumbnails = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"thumbnails"] count]];
            
            for (id object in [dic objectForKey: @"thumbnails"]) {
                [_thumbnails addObject:[[MSGraphThumbnailSet alloc] initWithDictionary: object]];
            }
        }
        

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = nil/*NSStream*/; if (curVal!=nil) [dic setValue: curVal forKey: @"content"];}
	{id curVal = [self.createdBy toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdBy"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.createdDateTime]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdDateTime"];}
	{id curVal = [self.cTag copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"cTag"];}
	{id curVal = [self._description copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"description"];}
	{id curVal = [self.eTag copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"eTag"];}
	{id curVal = [self._id copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
	{id curVal = [self.lastModifiedBy toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"lastModifiedBy"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastModifiedDateTime]; if (curVal!=nil) [dic setValue: curVal forKey: @"lastModifiedDateTime"];}
	{id curVal = [self.name copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"name"];}
	{id curVal = [self.parentReference toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"parentReference"];}
	{id curVal = [NSNumber numberWithLongLong: self.size]; if (curVal!=nil) [dic setValue: curVal forKey: @"size"];}
	{id curVal = [self.webDavUrl copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"webDavUrl"];}
	{id curVal = [self.webUrl copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"webUrl"];}
	{id curVal = [self.audio toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"audio"];}
	{id curVal = [self.deleted toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"deleted"];}
	{id curVal = [self.file toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"file"];}
	{id curVal = [self.fileSystemInfo toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"fileSystemInfo"];}
	{id curVal = [self.folder toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"folder"];}
	{id curVal = [self.image toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"image"];}
	{id curVal = [self.location toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"location"];}
	{id curVal = [self.openWith toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"openWith"];}
	{id curVal = [self.photo toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"photo"];}
	{id curVal = [self.searchResult toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"searchResult"];}
	{id curVal = [self.shared toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"shared"];}
	{id curVal = [self.specialFolder toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"specialFolder"];}
	{id curVal = [self.video toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"video"];}
	{id curVal = [self.createdByUser toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdByUser"];}
	{id curVal = [self.lastModifiedByUser toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"lastModifiedByUser"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"permissions"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"versions"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"children"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"thumbnails"];}
    [dic setValue: @"#Microsoft.Graph.item" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.content;
    if([self.updatedValues containsObject:@"content"])
    {
        [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"content"];
    }
    }
	{id curVal = self.createdBy;
    if([self.updatedValues containsObject:@"createdBy"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdBy"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdBy"];
            }
        
            }}
	{id curVal = self.createdDateTime;
    if([self.updatedValues containsObject:@"createdDateTime"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"createdDateTime"];
    }
    }
	{id curVal = self.cTag;
    if([self.updatedValues containsObject:@"cTag"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"cTag"];
    }
    }
	{id curVal = self._description;
    if([self.updatedValues containsObject:@"description"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"description"];
    }
    }
	{id curVal = self.eTag;
    if([self.updatedValues containsObject:@"eTag"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"eTag"];
    }
    }
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
    }
    }
	{id curVal = self.lastModifiedBy;
    if([self.updatedValues containsObject:@"lastModifiedBy"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"lastModifiedBy"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"lastModifiedBy"];
            }
        
            }}
	{id curVal = self.lastModifiedDateTime;
    if([self.updatedValues containsObject:@"lastModifiedDateTime"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastModifiedDateTime"];
    }
    }
	{id curVal = self.name;
    if([self.updatedValues containsObject:@"name"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"name"];
    }
    }
	{id curVal = self.parentReference;
    if([self.updatedValues containsObject:@"parentReference"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"parentReference"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"parentReference"];
            }
        
            }}
	{id curVal = self.size;
    if([self.updatedValues containsObject:@"size"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithLongLong: curVal] forKey: @"size"];
    }
    }
	{id curVal = self.webDavUrl;
    if([self.updatedValues containsObject:@"webDavUrl"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"webDavUrl"];
    }
    }
	{id curVal = self.webUrl;
    if([self.updatedValues containsObject:@"webUrl"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"webUrl"];
    }
    }
	{id curVal = self.audio;
    if([self.updatedValues containsObject:@"audio"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"audio"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"audio"];
            }
        
            }}
	{id curVal = self.deleted;
    if([self.updatedValues containsObject:@"deleted"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"deleted"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"deleted"];
            }
        
            }}
	{id curVal = self.file;
    if([self.updatedValues containsObject:@"file"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"file"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"file"];
            }
        
            }}
	{id curVal = self.fileSystemInfo;
    if([self.updatedValues containsObject:@"fileSystemInfo"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"fileSystemInfo"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"fileSystemInfo"];
            }
        
            }}
	{id curVal = self.folder;
    if([self.updatedValues containsObject:@"folder"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"folder"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"folder"];
            }
        
            }}
	{id curVal = self.image;
    if([self.updatedValues containsObject:@"image"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"image"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"image"];
            }
        
            }}
	{id curVal = self.location;
    if([self.updatedValues containsObject:@"location"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"location"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"location"];
            }
        
            }}
	{id curVal = self.openWith;
    if([self.updatedValues containsObject:@"openWith"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"openWith"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"openWith"];
            }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"photo"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"photo"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"photo"];
            }
        
            }}
	{id curVal = self.searchResult;
    if([self.updatedValues containsObject:@"searchResult"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"searchResult"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"searchResult"];
            }
        
            }}
	{id curVal = self.shared;
    if([self.updatedValues containsObject:@"shared"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"shared"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"shared"];
            }
        
            }}
	{id curVal = self.specialFolder;
    if([self.updatedValues containsObject:@"specialFolder"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"specialFolder"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"specialFolder"];
            }
        
            }}
	{id curVal = self.video;
    if([self.updatedValues containsObject:@"video"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"video"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"video"];
            }
        
            }}
	{id curVal = self.createdByUser;
    if([self.updatedValues containsObject:@"createdByUser"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdByUser"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdByUser"];
            }
        
            }}
	{id curVal = self.lastModifiedByUser;
    if([self.updatedValues containsObject:@"lastModifiedByUser"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"lastModifiedByUser"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"lastModifiedByUser"];
            }
        
            }}
	{id curVal = self.permissions;
    if([self.updatedValues containsObject:@"permissions"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"permissions"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.versions;
    if([self.updatedValues containsObject:@"versions"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"versions"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.children;
    if([self.updatedValues containsObject:@"children"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"children"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.thumbnails;
    if([self.updatedValues containsObject:@"thumbnails"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"thumbnails"];
    }
        else
    {
                
        //Check collection change:
        
            }}
    return dic;
}


/** Setter implementation for property content
 *
 */
- (void) setContent: (NSStream *) value {
    _content = value;
    [self valueChangedFor:@"content"];
}
       
/** Setter implementation for property createdBy
 *
 */
- (void) setCreatedBy: (MSGraphIdentitySet *) value {
    _createdBy = value;
    [self valueChangedFor:@"createdBy"];
}
       
/** Setter implementation for property createdDateTime
 *
 */
- (void) setCreatedDateTime: (NSDate *) value {
    _createdDateTime = value;
    [self valueChangedFor:@"createdDateTime"];
}
       
/** Setter implementation for property cTag
 *
 */
- (void) setCTag: (NSString *) value {
    _cTag = value;
    [self valueChangedFor:@"cTag"];
}
       
/** Setter implementation for property _description
 *
 */
- (void) setDescription: (NSString *) value {
    __description = value;
    [self valueChangedFor:@"description"];
}
       
/** Setter implementation for property eTag
 *
 */
- (void) setETag: (NSString *) value {
    _eTag = value;
    [self valueChangedFor:@"eTag"];
}
       
/** Setter implementation for property _id
 *
 */
- (void) setId: (NSString *) value {
    __id = value;
    [self valueChangedFor:@"id"];
}
       
/** Setter implementation for property lastModifiedBy
 *
 */
- (void) setLastModifiedBy: (MSGraphIdentitySet *) value {
    _lastModifiedBy = value;
    [self valueChangedFor:@"lastModifiedBy"];
}
       
/** Setter implementation for property lastModifiedDateTime
 *
 */
- (void) setLastModifiedDateTime: (NSDate *) value {
    _lastModifiedDateTime = value;
    [self valueChangedFor:@"lastModifiedDateTime"];
}
       
/** Setter implementation for property name
 *
 */
- (void) setName: (NSString *) value {
    _name = value;
    [self valueChangedFor:@"name"];
}
       
/** Setter implementation for property parentReference
 *
 */
- (void) setParentReference: (MSGraphItemReference *) value {
    _parentReference = value;
    [self valueChangedFor:@"parentReference"];
}
       
/** Setter implementation for property size
 *
 */
- (void) setSize: (long long) value {
    _size = value;
    [self valueChangedFor:@"size"];
}
       
/** Setter implementation for property webDavUrl
 *
 */
- (void) setWebDavUrl: (NSString *) value {
    _webDavUrl = value;
    [self valueChangedFor:@"webDavUrl"];
}
       
/** Setter implementation for property webUrl
 *
 */
- (void) setWebUrl: (NSString *) value {
    _webUrl = value;
    [self valueChangedFor:@"webUrl"];
}
       
/** Setter implementation for property audio
 *
 */
- (void) setAudio: (MSGraphAudio *) value {
    _audio = value;
    [self valueChangedFor:@"audio"];
}
       
/** Setter implementation for property deleted
 *
 */
- (void) setDeleted: (MSGraphDeleted *) value {
    _deleted = value;
    [self valueChangedFor:@"deleted"];
}
       
/** Setter implementation for property file
 *
 */
- (void) setFile: (MSGraphFile *) value {
    _file = value;
    [self valueChangedFor:@"file"];
}
       
/** Setter implementation for property fileSystemInfo
 *
 */
- (void) setFileSystemInfo: (MSGraphFileSystemInfo *) value {
    _fileSystemInfo = value;
    [self valueChangedFor:@"fileSystemInfo"];
}
       
/** Setter implementation for property folder
 *
 */
- (void) setFolder: (MSGraphFolder *) value {
    _folder = value;
    [self valueChangedFor:@"folder"];
}
       
/** Setter implementation for property image
 *
 */
- (void) setImage: (MSGraphImage *) value {
    _image = value;
    [self valueChangedFor:@"image"];
}
       
/** Setter implementation for property location
 *
 */
- (void) setLocation: (MSGraphGeoCoordinates *) value {
    _location = value;
    [self valueChangedFor:@"location"];
}
       
/** Setter implementation for property openWith
 *
 */
- (void) setOpenWith: (MSGraphOpenWithSet *) value {
    _openWith = value;
    [self valueChangedFor:@"openWith"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSGraphPhoto *) value {
    _photo = value;
    [self valueChangedFor:@"photo"];
}
       
/** Setter implementation for property searchResult
 *
 */
- (void) setSearchResult: (MSGraphSearchResult *) value {
    _searchResult = value;
    [self valueChangedFor:@"searchResult"];
}
       
/** Setter implementation for property shared
 *
 */
- (void) setShared: (MSGraphShared *) value {
    _shared = value;
    [self valueChangedFor:@"shared"];
}
       
/** Setter implementation for property specialFolder
 *
 */
- (void) setSpecialFolder: (MSGraphSpecialFolder *) value {
    _specialFolder = value;
    [self valueChangedFor:@"specialFolder"];
}
       
/** Setter implementation for property video
 *
 */
- (void) setVideo: (MSGraphVideo *) value {
    _video = value;
    [self valueChangedFor:@"video"];
}
       
/** Setter implementation for property createdByUser
 *
 */
- (void) setCreatedByUser: (MSGraphUser *) value {
    _createdByUser = value;
    [self valueChangedFor:@"createdByUser"];
}
       
/** Setter implementation for property lastModifiedByUser
 *
 */
- (void) setLastModifiedByUser: (MSGraphUser *) value {
    _lastModifiedByUser = value;
    [self valueChangedFor:@"lastModifiedByUser"];
}
       
/** Setter implementation for property permissions
 *
 */
- (void) setPermissions: (NSMutableArray *) value {
    _permissions = value;
    [self valueChangedFor:@"permissions"];
}
       
/** Setter implementation for property versions
 *
 */
- (void) setVersions: (NSMutableArray *) value {
    _versions = value;
    [self valueChangedFor:@"versions"];
}
       
/** Setter implementation for property children
 *
 */
- (void) setChildren: (NSMutableArray *) value {
    _children = value;
    [self valueChangedFor:@"children"];
}
       
/** Setter implementation for property thumbnails
 *
 */
- (void) setThumbnails: (NSMutableArray *) value {
    _thumbnails = value;
    [self valueChangedFor:@"thumbnails"];
}
       

@end
