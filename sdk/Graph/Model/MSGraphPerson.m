/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphPerson
 *
 */
@implementation MSGraphPerson


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"Sources", @"sources", @"DisplayName", @"displayName", @"GivenName", @"givenName", @"Surname", @"surname", @"Title", @"title", @"EmailAddresses", @"emailAddresses", @"CompanyName", @"companyName", @"OfficeLocation", @"officeLocation", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.Graph.Person";
        
        
		_sources = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_emailAddresses = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    

        if([dic objectForKey: @"Sources"] != [NSNull null]){
            _sources = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Sources"] count]];
            
            for (id object in [dic objectForKey: @"Sources"]) {
                [_sources addObject:[[MSGraphPersonDataSource alloc] initWithDictionary: object]];
            }
        }
        
		_displayName = [dic objectForKey: @"DisplayName"] != nil ? [[dic objectForKey: @"DisplayName"] copy] : _displayName;
		_givenName = [dic objectForKey: @"GivenName"] != nil ? [[dic objectForKey: @"GivenName"] copy] : _givenName;
		_surname = [dic objectForKey: @"Surname"] != nil ? [[dic objectForKey: @"Surname"] copy] : _surname;
		_title = [dic objectForKey: @"Title"] != nil ? [[dic objectForKey: @"Title"] copy] : _title;

        if([dic objectForKey: @"EmailAddresses"] != [NSNull null]){
            _emailAddresses = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"EmailAddresses"] count]];
            
            for (id object in [dic objectForKey: @"EmailAddresses"]) {
                [_emailAddresses addObject:[[MSGraphEmail alloc] initWithDictionary: object]];
            }
        }
        
		_companyName = [dic objectForKey: @"CompanyName"] != nil ? [[dic objectForKey: @"CompanyName"] copy] : _companyName;
		_officeLocation = [dic objectForKey: @"OfficeLocation"] != nil ? [[dic objectForKey: @"OfficeLocation"] copy] : _officeLocation;

    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    return [[NSDictionary alloc] initWithObjectsAndKeys: 
    		 [[NSMutableArray alloc] init], @"Sources",
		 [_displayName copy], @"DisplayName",
		 [_givenName copy], @"GivenName",
		 [_surname copy], @"Surname",
		 [_title copy], @"Title",
		 [[NSMutableArray alloc] init], @"EmailAddresses",
		 [_companyName copy], @"CompanyName",
		 [_officeLocation copy], @"OfficeLocation",
            nil];
}


/** Setter implementation for property sources
 *
 */
- (void) setSources: (NSMutableArray *) value {
    _sources = value;
    [self valueChangedFor:@"Sources"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"DisplayName"];
}
       
/** Setter implementation for property givenName
 *
 */
- (void) setGivenName: (NSString *) value {
    _givenName = value;
    [self valueChangedFor:@"GivenName"];
}
       
/** Setter implementation for property surname
 *
 */
- (void) setSurname: (NSString *) value {
    _surname = value;
    [self valueChangedFor:@"Surname"];
}
       
/** Setter implementation for property title
 *
 */
- (void) setTitle: (NSString *) value {
    _title = value;
    [self valueChangedFor:@"Title"];
}
       
/** Setter implementation for property emailAddresses
 *
 */
- (void) setEmailAddresses: (NSMutableArray *) value {
    _emailAddresses = value;
    [self valueChangedFor:@"EmailAddresses"];
}
       
/** Setter implementation for property companyName
 *
 */
- (void) setCompanyName: (NSString *) value {
    _companyName = value;
    [self valueChangedFor:@"CompanyName"];
}
       
/** Setter implementation for property officeLocation
 *
 */
- (void) setOfficeLocation: (NSString *) value {
    _officeLocation = value;
    [self valueChangedFor:@"OfficeLocation"];
}
       

@end
