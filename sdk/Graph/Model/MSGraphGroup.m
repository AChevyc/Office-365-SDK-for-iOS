/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphModels.h"



/** Implementation for MSGraphGroup
 *
 */
@implementation MSGraphGroup


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"description", @"_description", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"creationOptions", @"creationOptions", @"groupTypes", @"groupTypes", @"isPublic", @"isPublic", @"lastDirSyncTime", @"lastDirSyncTime", @"mail", @"mail", @"mailNickname", @"mailNickname", @"mailEnabled", @"mailEnabled", @"onPremisesSecurityIdentifier", @"onPremisesSecurityIdentifier", @"provisioningErrors", @"provisioningErrors", @"proxyAddresses", @"proxyAddresses", @"securityEnabled", @"securityEnabled", @"AccessType", @"accessType", @"AllowExternalSenders", @"allowExternalSenders", @"AutoSubscribeNewMembers", @"autoSubscribeNewMembers", @"EmailAddress", @"emailAddress", @"IsFavorite", @"isFavorite", @"IsSubscribedByMail", @"isSubscribedByMail", @"UnseenCount", @"unseenCount", @"appRoleAssignments", @"appRoleAssignments", @"members", @"members", @"memberOf", @"memberOf", @"createdOnBehalfOf", @"createdOnBehalfOf", @"owners", @"owners", @"Threads", @"threads", @"Calendar", @"calendar", @"CalendarView", @"calendarView", @"Events", @"events", @"Conversations", @"conversations", @"Photo", @"photo", @"Photos", @"photos", @"AcceptedSenders", @"acceptedSenders", @"RejectedSenders", @"rejectedSenders", @"drive", @"drive", @"plans", @"plans", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.Graph.Group";
        
        
		_creationOptions = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_groupTypes = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_provisioningErrors = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_proxyAddresses = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_appRoleAssignments = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_members = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_memberOf = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_owners = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_threads = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_calendarView = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_events = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_conversations = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_photos = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_acceptedSenders = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_rejectedSenders = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_plans = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		__description = [dic objectForKey: @"description"] != nil ? [[dic objectForKey: @"description"] copy] : __description;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;

        if([dic objectForKey: @"creationOptions"] != [NSNull null]){
            _creationOptions = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"creationOptions"] count]];
            
            for (id object in [dic objectForKey: @"creationOptions"]) {
                [_creationOptions addObject:[object copy]];
            }
        }
        

        if([dic objectForKey: @"groupTypes"] != [NSNull null]){
            _groupTypes = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"groupTypes"] count]];
            
            for (id object in [dic objectForKey: @"groupTypes"]) {
                [_groupTypes addObject:[object copy]];
            }
        }
        
		_isPublic = [dic objectForKey: @"isPublic"] != nil ? [[dic objectForKey: @"isPublic"] boolValue] : _isPublic;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;
		_mail = [dic objectForKey: @"mail"] != nil ? [[dic objectForKey: @"mail"] copy] : _mail;
		_mailNickname = [dic objectForKey: @"mailNickname"] != nil ? [[dic objectForKey: @"mailNickname"] copy] : _mailNickname;
		_mailEnabled = [dic objectForKey: @"mailEnabled"] != nil ? [[dic objectForKey: @"mailEnabled"] boolValue] : _mailEnabled;
		_onPremisesSecurityIdentifier = [dic objectForKey: @"onPremisesSecurityIdentifier"] != nil ? [[dic objectForKey: @"onPremisesSecurityIdentifier"] copy] : _onPremisesSecurityIdentifier;

        if([dic objectForKey: @"provisioningErrors"] != [NSNull null]){
            _provisioningErrors = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"provisioningErrors"] count]];
            
            for (id object in [dic objectForKey: @"provisioningErrors"]) {
                [_provisioningErrors addObject:[[MSGraphProvisioningError alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"proxyAddresses"] != [NSNull null]){
            _proxyAddresses = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"proxyAddresses"] count]];
            
            for (id object in [dic objectForKey: @"proxyAddresses"]) {
                [_proxyAddresses addObject:[object copy]];
            }
        }
        
		_securityEnabled = [dic objectForKey: @"securityEnabled"] != nil ? [[dic objectForKey: @"securityEnabled"] boolValue] : _securityEnabled;
		_accessType = [dic objectForKey: @"AccessType"] != nil ? [MSGraphGroupAccessTypeSerializer fromString:[dic objectForKey: @"AccessType"]] : _accessType;
		_allowExternalSenders = [dic objectForKey: @"AllowExternalSenders"] != nil ? [[dic objectForKey: @"AllowExternalSenders"] boolValue] : _allowExternalSenders;
		_autoSubscribeNewMembers = [dic objectForKey: @"AutoSubscribeNewMembers"] != nil ? [[dic objectForKey: @"AutoSubscribeNewMembers"] boolValue] : _autoSubscribeNewMembers;
		_emailAddress = [dic objectForKey: @"EmailAddress"] != nil ? [[dic objectForKey: @"EmailAddress"] copy] : _emailAddress;
		_isFavorite = [dic objectForKey: @"IsFavorite"] != nil ? [[dic objectForKey: @"IsFavorite"] boolValue] : _isFavorite;
		_isSubscribedByMail = [dic objectForKey: @"IsSubscribedByMail"] != nil ? [[dic objectForKey: @"IsSubscribedByMail"] boolValue] : _isSubscribedByMail;
		_unseenCount = [dic objectForKey: @"UnseenCount"] != nil ? [[dic objectForKey: @"UnseenCount"] intValue] : _unseenCount;

        if([dic objectForKey: @"appRoleAssignments"] != [NSNull null]){
            _appRoleAssignments = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoleAssignments"] count]];
            
            for (id object in [dic objectForKey: @"appRoleAssignments"]) {
                [_appRoleAssignments addObject:[[MSGraphAppRoleAssignment alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"members"] != [NSNull null]){
            _members = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"members"] count]];
            
            for (id object in [dic objectForKey: @"members"]) {
                [_members addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            _memberOf = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"memberOf"] count]];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [_memberOf addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		_createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSGraphDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : _createdOnBehalfOf;

        if([dic objectForKey: @"owners"] != [NSNull null]){
            _owners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"owners"] count]];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [_owners addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Threads"] != [NSNull null]){
            _threads = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Threads"] count]];
            
            for (id object in [dic objectForKey: @"Threads"]) {
                [_threads addObject:[[MSGraphConversationThread alloc] initWithDictionary: object]];
            }
        }
        
		_calendar = [dic objectForKey: @"Calendar"] != nil ? [[MSGraphCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]] : _calendar;

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"CalendarView"] count]];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Events"] count]];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSGraphEvent alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Conversations"] != [NSNull null]){
            _conversations = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Conversations"] count]];
            
            for (id object in [dic objectForKey: @"Conversations"]) {
                [_conversations addObject:[[MSGraphConversation alloc] initWithDictionary: object]];
            }
        }
        
		_photo = [dic objectForKey: @"Photo"] != nil ? [[MSGraphPhoto alloc] initWithDictionary: [dic objectForKey: @"Photo"]] : _photo;

        if([dic objectForKey: @"Photos"] != [NSNull null]){
            _photos = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Photos"] count]];
            
            for (id object in [dic objectForKey: @"Photos"]) {
                [_photos addObject:[[MSGraphPhoto alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"AcceptedSenders"] != [NSNull null]){
            _acceptedSenders = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"AcceptedSenders"] count]];
            
            for (id object in [dic objectForKey: @"AcceptedSenders"]) {
                [_acceptedSenders addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"RejectedSenders"] != [NSNull null]){
            _rejectedSenders = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"RejectedSenders"] count]];
            
            for (id object in [dic objectForKey: @"RejectedSenders"]) {
                [_rejectedSenders addObject:[[MSGraphDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		_drive = [dic objectForKey: @"drive"] != nil ? [[MSGraphDrive alloc] initWithDictionary: [dic objectForKey: @"drive"]] : _drive;

        if([dic objectForKey: @"plans"] != [NSNull null]){
            _plans = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"plans"] count]];
            
            for (id object in [dic objectForKey: @"plans"]) {
                [_plans addObject:[[MSGraphPlan alloc] initWithDictionary: object]];
            }
        }
        

    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    return [[NSDictionary alloc] initWithObjectsAndKeys: 
    		 [__description copy], @"description",
		 (_dirSyncEnabled?@"true":@"false"), @"dirSyncEnabled",
		 [_displayName copy], @"displayName",
		 [[NSMutableArray alloc] init], @"creationOptions",
		 [[NSMutableArray alloc] init], @"groupTypes",
		 (_isPublic?@"true":@"false"), @"isPublic",
		 [MSOrcObjectizer stringFromDate:_lastDirSyncTime], @"lastDirSyncTime",
		 [_mail copy], @"mail",
		 [_mailNickname copy], @"mailNickname",
		 (_mailEnabled?@"true":@"false"), @"mailEnabled",
		 [_onPremisesSecurityIdentifier copy], @"onPremisesSecurityIdentifier",
		 [[NSMutableArray alloc] init], @"provisioningErrors",
		 [[NSMutableArray alloc] init], @"proxyAddresses",
		 (_securityEnabled?@"true":@"false"), @"securityEnabled",
		 [MSGraphGroupAccessTypeSerializer toString:_accessType], @"AccessType",
		 (_allowExternalSenders?@"true":@"false"), @"AllowExternalSenders",
		 (_autoSubscribeNewMembers?@"true":@"false"), @"AutoSubscribeNewMembers",
		 [_emailAddress copy], @"EmailAddress",
		 (_isFavorite?@"true":@"false"), @"IsFavorite",
		 (_isSubscribedByMail?@"true":@"false"), @"IsSubscribedByMail",
		 [NSNumber numberWithInt: _unseenCount], @"UnseenCount",
		 [[NSMutableArray alloc] init], @"appRoleAssignments",
		 [[NSMutableArray alloc] init], @"members",
		 [[NSMutableArray alloc] init], @"memberOf",
		 [_createdOnBehalfOf toDictionary], @"createdOnBehalfOf",
		 [[NSMutableArray alloc] init], @"owners",
		 [[NSMutableArray alloc] init], @"Threads",
		 [_calendar toDictionary], @"Calendar",
		 [[NSMutableArray alloc] init], @"CalendarView",
		 [[NSMutableArray alloc] init], @"Events",
		 [[NSMutableArray alloc] init], @"Conversations",
		 [_photo toDictionary], @"Photo",
		 [[NSMutableArray alloc] init], @"Photos",
		 [[NSMutableArray alloc] init], @"AcceptedSenders",
		 [[NSMutableArray alloc] init], @"RejectedSenders",
		 [_drive toDictionary], @"drive",
		 [[NSMutableArray alloc] init], @"plans",
            nil];
}


/** Setter implementation for property _description
 *
 */
- (void) setDescription: (NSString *) value {
    __description = value;
    [self valueChangedFor:@"description"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property creationOptions
 *
 */
- (void) setCreationOptions: (NSMutableArray *) value {
    _creationOptions = value;
    [self valueChangedFor:@"creationOptions"];
}
       
/** Setter implementation for property groupTypes
 *
 */
- (void) setGroupTypes: (NSMutableArray *) value {
    _groupTypes = value;
    [self valueChangedFor:@"groupTypes"];
}
       
/** Setter implementation for property isPublic
 *
 */
- (void) setIsPublic: (bool) value {
    _isPublic = value;
    [self valueChangedFor:@"isPublic"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property mail
 *
 */
- (void) setMail: (NSString *) value {
    _mail = value;
    [self valueChangedFor:@"mail"];
}
       
/** Setter implementation for property mailNickname
 *
 */
- (void) setMailNickname: (NSString *) value {
    _mailNickname = value;
    [self valueChangedFor:@"mailNickname"];
}
       
/** Setter implementation for property mailEnabled
 *
 */
- (void) setMailEnabled: (bool) value {
    _mailEnabled = value;
    [self valueChangedFor:@"mailEnabled"];
}
       
/** Setter implementation for property onPremisesSecurityIdentifier
 *
 */
- (void) setOnPremisesSecurityIdentifier: (NSString *) value {
    _onPremisesSecurityIdentifier = value;
    [self valueChangedFor:@"onPremisesSecurityIdentifier"];
}
       
/** Setter implementation for property provisioningErrors
 *
 */
- (void) setProvisioningErrors: (NSMutableArray *) value {
    _provisioningErrors = value;
    [self valueChangedFor:@"provisioningErrors"];
}
       
/** Setter implementation for property proxyAddresses
 *
 */
- (void) setProxyAddresses: (NSMutableArray *) value {
    _proxyAddresses = value;
    [self valueChangedFor:@"proxyAddresses"];
}
       
/** Setter implementation for property securityEnabled
 *
 */
- (void) setSecurityEnabled: (bool) value {
    _securityEnabled = value;
    [self valueChangedFor:@"securityEnabled"];
}
       
/** Setter implementation for property accessType
 *
 */
- (void) setAccessType: (MSGraphGroupAccessType) value {
    _accessType = value;
    [self valueChangedFor:@"AccessType"];
}
       

- (void)setAccessTypeString:(NSString *)string {
        
    _accessType = [MSGraphGroupAccessTypeSerializer fromString:string];
    [self valueChangedFor:@"AccessType"]; 
}

/** Setter implementation for property allowExternalSenders
 *
 */
- (void) setAllowExternalSenders: (bool) value {
    _allowExternalSenders = value;
    [self valueChangedFor:@"AllowExternalSenders"];
}
       
/** Setter implementation for property autoSubscribeNewMembers
 *
 */
- (void) setAutoSubscribeNewMembers: (bool) value {
    _autoSubscribeNewMembers = value;
    [self valueChangedFor:@"AutoSubscribeNewMembers"];
}
       
/** Setter implementation for property emailAddress
 *
 */
- (void) setEmailAddress: (NSString *) value {
    _emailAddress = value;
    [self valueChangedFor:@"EmailAddress"];
}
       
/** Setter implementation for property isFavorite
 *
 */
- (void) setIsFavorite: (bool) value {
    _isFavorite = value;
    [self valueChangedFor:@"IsFavorite"];
}
       
/** Setter implementation for property isSubscribedByMail
 *
 */
- (void) setIsSubscribedByMail: (bool) value {
    _isSubscribedByMail = value;
    [self valueChangedFor:@"IsSubscribedByMail"];
}
       
/** Setter implementation for property unseenCount
 *
 */
- (void) setUnseenCount: (int) value {
    _unseenCount = value;
    [self valueChangedFor:@"UnseenCount"];
}
       
/** Setter implementation for property appRoleAssignments
 *
 */
- (void) setAppRoleAssignments: (NSMutableArray *) value {
    _appRoleAssignments = value;
    [self valueChangedFor:@"appRoleAssignments"];
}
       
/** Setter implementation for property members
 *
 */
- (void) setMembers: (NSMutableArray *) value {
    _members = value;
    [self valueChangedFor:@"members"];
}
       
/** Setter implementation for property memberOf
 *
 */
- (void) setMemberOf: (NSMutableArray *) value {
    _memberOf = value;
    [self valueChangedFor:@"memberOf"];
}
       
/** Setter implementation for property createdOnBehalfOf
 *
 */
- (void) setCreatedOnBehalfOf: (MSGraphDirectoryObject *) value {
    _createdOnBehalfOf = value;
    [self valueChangedFor:@"createdOnBehalfOf"];
}
       
/** Setter implementation for property owners
 *
 */
- (void) setOwners: (NSMutableArray *) value {
    _owners = value;
    [self valueChangedFor:@"owners"];
}
       
/** Setter implementation for property threads
 *
 */
- (void) setThreads: (NSMutableArray *) value {
    _threads = value;
    [self valueChangedFor:@"Threads"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSGraphCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property conversations
 *
 */
- (void) setConversations: (NSMutableArray *) value {
    _conversations = value;
    [self valueChangedFor:@"Conversations"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSGraphPhoto *) value {
    _photo = value;
    [self valueChangedFor:@"Photo"];
}
       
/** Setter implementation for property photos
 *
 */
- (void) setPhotos: (NSMutableArray *) value {
    _photos = value;
    [self valueChangedFor:@"Photos"];
}
       
/** Setter implementation for property acceptedSenders
 *
 */
- (void) setAcceptedSenders: (NSMutableArray *) value {
    _acceptedSenders = value;
    [self valueChangedFor:@"AcceptedSenders"];
}
       
/** Setter implementation for property rejectedSenders
 *
 */
- (void) setRejectedSenders: (NSMutableArray *) value {
    _rejectedSenders = value;
    [self valueChangedFor:@"RejectedSenders"];
}
       
/** Setter implementation for property drive
 *
 */
- (void) setDrive: (MSGraphDrive *) value {
    _drive = value;
    [self valueChangedFor:@"drive"];
}
       
/** Setter implementation for property plans
 *
 */
- (void) setPlans: (NSMutableArray *) value {
    _plans = value;
    [self valueChangedFor:@"plans"];
}
       

@end
