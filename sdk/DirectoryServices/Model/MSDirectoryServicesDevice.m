/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSDirectoryServicesModels.h"



/** Implementation for MSDirectoryServicesDevice
 *
 */
@implementation MSDirectoryServicesDevice


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"alternativeSecurityIds", @"alternativeSecurityIds", @"approximateLastLogonTimestamp", @"approximateLastLogonTimestamp", @"deviceId", @"deviceId", @"deviceMetadata", @"deviceMetadata", @"deviceObjectVersion", @"deviceObjectVersion", @"deviceOSType", @"deviceOSType", @"deviceOSVersion", @"deviceOSVersion", @"devicePhysicalIds", @"devicePhysicalIds", @"deviceTrustType", @"deviceTrustType", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"lastDirSyncTime", @"lastDirSyncTime", @"registeredOwners", @"registeredOwners", @"registeredUsers", @"registeredUsers", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", @"createdOnBehalfOf", @"createdOnBehalfOf", @"createdObjects", @"createdObjects", @"manager", @"manager", @"directReports", @"directReports", @"members", @"members", @"memberOf", @"memberOf", @"owners", @"owners", @"ownedObjects", @"ownedObjects", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.DirectoryServices.Device";
        
        
		_alternativeSecurityIds = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_devicePhysicalIds = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_registeredOwners = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_registeredUsers = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;

        if([dic objectForKey: @"alternativeSecurityIds"] != [NSNull null]){
            _alternativeSecurityIds = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"alternativeSecurityIds"] count]];
            
            for (id object in [dic objectForKey: @"alternativeSecurityIds"]) {
                [_alternativeSecurityIds addObject:[[MSDirectoryServicesAlternativeSecurityId alloc] initWithDictionary: object]];
            }
        }
        
		_approximateLastLogonTimestamp = [dic objectForKey: @"approximateLastLogonTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"approximateLastLogonTimestamp"]] : _approximateLastLogonTimestamp;
		_deviceId = [dic objectForKey: @"deviceId"] != nil ? [[dic objectForKey: @"deviceId"] copy] : _deviceId;
		_deviceMetadata = [dic objectForKey: @"deviceMetadata"] != nil ? [[dic objectForKey: @"deviceMetadata"] copy] : _deviceMetadata;
		_deviceObjectVersion = [dic objectForKey: @"deviceObjectVersion"] != nil ? [[dic objectForKey: @"deviceObjectVersion"] intValue] : _deviceObjectVersion;
		_deviceOSType = [dic objectForKey: @"deviceOSType"] != nil ? [[dic objectForKey: @"deviceOSType"] copy] : _deviceOSType;
		_deviceOSVersion = [dic objectForKey: @"deviceOSVersion"] != nil ? [[dic objectForKey: @"deviceOSVersion"] copy] : _deviceOSVersion;

        if([dic objectForKey: @"devicePhysicalIds"] != [NSNull null]){
            _devicePhysicalIds = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"devicePhysicalIds"] count]];
            
            for (id object in [dic objectForKey: @"devicePhysicalIds"]) {
                [_devicePhysicalIds addObject:[object copy]];
            }
        }
        
		_deviceTrustType = [dic objectForKey: @"deviceTrustType"] != nil ? [[dic objectForKey: @"deviceTrustType"] copy] : _deviceTrustType;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;

        if([dic objectForKey: @"registeredOwners"] != [NSNull null]){
            _registeredOwners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"registeredOwners"] count]];
            
            for (id object in [dic objectForKey: @"registeredOwners"]) {
                [_registeredOwners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"registeredUsers"] != [NSNull null]){
            _registeredUsers = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"registeredUsers"] count]];
            
            for (id object in [dic objectForKey: @"registeredUsers"]) {
                [_registeredUsers addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;
		self.createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : self.createdOnBehalfOf;

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            self.createdObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"createdObjects"] count]];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [self.createdObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		self.manager = [dic objectForKey: @"manager"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]] : self.manager;

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            self.directReports = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"directReports"] count]];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [self.directReports addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"members"] != [NSNull null]){
            self.members = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"members"] count]];
            
            for (id object in [dic objectForKey: @"members"]) {
                [self.members addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            self.memberOf = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"memberOf"] count]];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [self.memberOf addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"owners"] != [NSNull null]){
            self.owners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"owners"] count]];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [self.owners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            self.ownedObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ownedObjects"] count]];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [self.ownedObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = (self.accountEnabled?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"accountEnabled"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"alternativeSecurityIds"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.approximateLastLogonTimestamp]; if (curVal!=nil) [dic setValue: curVal forKey: @"approximateLastLogonTimestamp"];}
	{id curVal = [self.deviceId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceId"];}
	{id curVal = [self.deviceMetadata copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceMetadata"];}
	{id curVal = [NSNumber numberWithInt: self.deviceObjectVersion]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceObjectVersion"];}
	{id curVal = [self.deviceOSType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceOSType"];}
	{id curVal = [self.deviceOSVersion copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceOSVersion"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"devicePhysicalIds"];}
	{id curVal = [self.deviceTrustType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"deviceTrustType"];}
	{id curVal = (self.dirSyncEnabled?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"dirSyncEnabled"];}
	{id curVal = [self.displayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastDirSyncTime]; if (curVal!=nil) [dic setValue: curVal forKey: @"lastDirSyncTime"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"registeredOwners"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"registeredUsers"];}
	{id curVal = [self.objectType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp]; if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
	{id curVal = [self.createdOnBehalfOf toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{id curVal = [self.manager toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"members"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"owners"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
    [dic setValue: @"#Microsoft.DirectoryServices.Device" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.accountEnabled;
    if([self.updatedValues containsObject:@"accountEnabled"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"accountEnabled"];
    }
    }
	{id curVal = self.alternativeSecurityIds;
    if([self.updatedValues containsObject:@"alternativeSecurityIds"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"alternativeSecurityIds"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.approximateLastLogonTimestamp;
    if([self.updatedValues containsObject:@"approximateLastLogonTimestamp"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"approximateLastLogonTimestamp"];
    }
    }
	{id curVal = self.deviceId;
    if([self.updatedValues containsObject:@"deviceId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceId"];
    }
    }
	{id curVal = self.deviceMetadata;
    if([self.updatedValues containsObject:@"deviceMetadata"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceMetadata"];
    }
    }
	{id curVal = self.deviceObjectVersion;
    if([self.updatedValues containsObject:@"deviceObjectVersion"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[NSNumber numberWithInt: curVal] forKey: @"deviceObjectVersion"];
    }
    }
	{id curVal = self.deviceOSType;
    if([self.updatedValues containsObject:@"deviceOSType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceOSType"];
    }
    }
	{id curVal = self.deviceOSVersion;
    if([self.updatedValues containsObject:@"deviceOSVersion"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceOSVersion"];
    }
    }
	{id curVal = self.devicePhysicalIds;
    if([self.updatedValues containsObject:@"devicePhysicalIds"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"devicePhysicalIds"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.deviceTrustType;
    if([self.updatedValues containsObject:@"deviceTrustType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceTrustType"];
    }
    }
	{id curVal = self.dirSyncEnabled;
    if([self.updatedValues containsObject:@"dirSyncEnabled"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"dirSyncEnabled"];
    }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
    }
    }
	{id curVal = self.lastDirSyncTime;
    if([self.updatedValues containsObject:@"lastDirSyncTime"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastDirSyncTime"];
    }
    }
	{id curVal = self.registeredOwners;
    if([self.updatedValues containsObject:@"registeredOwners"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"registeredOwners"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.registeredUsers;
    if([self.updatedValues containsObject:@"registeredUsers"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"registeredUsers"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
    }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
    }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
    }
    }
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"directReports"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.members;
    if([self.updatedValues containsObject:@"members"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"members"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"memberOf"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"owners"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ownedObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property alternativeSecurityIds
 *
 */
- (void) setAlternativeSecurityIds: (NSMutableArray *) value {
    _alternativeSecurityIds = value;
    [self valueChangedFor:@"alternativeSecurityIds"];
}
       
/** Setter implementation for property approximateLastLogonTimestamp
 *
 */
- (void) setApproximateLastLogonTimestamp: (NSDate *) value {
    _approximateLastLogonTimestamp = value;
    [self valueChangedFor:@"approximateLastLogonTimestamp"];
}
       
/** Setter implementation for property deviceId
 *
 */
- (void) setDeviceId: (NSString *) value {
    _deviceId = value;
    [self valueChangedFor:@"deviceId"];
}
       
/** Setter implementation for property deviceMetadata
 *
 */
- (void) setDeviceMetadata: (NSString *) value {
    _deviceMetadata = value;
    [self valueChangedFor:@"deviceMetadata"];
}
       
/** Setter implementation for property deviceObjectVersion
 *
 */
- (void) setDeviceObjectVersion: (int) value {
    _deviceObjectVersion = value;
    [self valueChangedFor:@"deviceObjectVersion"];
}
       
/** Setter implementation for property deviceOSType
 *
 */
- (void) setDeviceOSType: (NSString *) value {
    _deviceOSType = value;
    [self valueChangedFor:@"deviceOSType"];
}
       
/** Setter implementation for property deviceOSVersion
 *
 */
- (void) setDeviceOSVersion: (NSString *) value {
    _deviceOSVersion = value;
    [self valueChangedFor:@"deviceOSVersion"];
}
       
/** Setter implementation for property devicePhysicalIds
 *
 */
- (void) setDevicePhysicalIds: (NSMutableArray *) value {
    _devicePhysicalIds = value;
    [self valueChangedFor:@"devicePhysicalIds"];
}
       
/** Setter implementation for property deviceTrustType
 *
 */
- (void) setDeviceTrustType: (NSString *) value {
    _deviceTrustType = value;
    [self valueChangedFor:@"deviceTrustType"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property registeredOwners
 *
 */
- (void) setRegisteredOwners: (NSMutableArray *) value {
    _registeredOwners = value;
    [self valueChangedFor:@"registeredOwners"];
}
       
/** Setter implementation for property registeredUsers
 *
 */
- (void) setRegisteredUsers: (NSMutableArray *) value {
    _registeredUsers = value;
    [self valueChangedFor:@"registeredUsers"];
}
       

@end
