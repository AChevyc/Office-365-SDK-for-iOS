/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSDirectoryServicesModels.h"



/** Implementation for MSDirectoryServicesDevice
 *
 */
@implementation MSDirectoryServicesDevice


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"alternativeSecurityIds", @"alternativeSecurityIds", @"approximateLastLogonTimestamp", @"approximateLastLogonTimestamp", @"deviceId", @"deviceId", @"deviceMetadata", @"deviceMetadata", @"deviceObjectVersion", @"deviceObjectVersion", @"deviceOSType", @"deviceOSType", @"deviceOSVersion", @"deviceOSVersion", @"devicePhysicalIds", @"devicePhysicalIds", @"deviceTrustType", @"deviceTrustType", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"lastDirSyncTime", @"lastDirSyncTime", @"registeredOwners", @"registeredOwners", @"registeredUsers", @"registeredUsers", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", @"createdOnBehalfOf", @"createdOnBehalfOf", @"createdObjects", @"createdObjects", @"manager", @"manager", @"directReports", @"directReports", @"members", @"members", @"memberOf", @"memberOf", @"owners", @"owners", @"ownedObjects", @"ownedObjects", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.DirectoryServices.Device";
        
        
		_alternativeSecurityIds = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_devicePhysicalIds = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_registeredOwners = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_registeredUsers = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;

        if([dic objectForKey: @"alternativeSecurityIds"] != [NSNull null]){
            _alternativeSecurityIds = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"alternativeSecurityIds"] count]];
            
            for (id object in [dic objectForKey: @"alternativeSecurityIds"]) {
                [_alternativeSecurityIds addObject:[[MSDirectoryServicesAlternativeSecurityId alloc] initWithDictionary: object]];
            }
        }
        
		_approximateLastLogonTimestamp = [dic objectForKey: @"approximateLastLogonTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"approximateLastLogonTimestamp"]] : _approximateLastLogonTimestamp;
		_deviceId = [dic objectForKey: @"deviceId"] != nil ? [[dic objectForKey: @"deviceId"] copy] : _deviceId;
		_deviceMetadata = [dic objectForKey: @"deviceMetadata"] != nil ? [[dic objectForKey: @"deviceMetadata"] copy] : _deviceMetadata;
		_deviceObjectVersion = [dic objectForKey: @"deviceObjectVersion"] != nil ? [[dic objectForKey: @"deviceObjectVersion"] intValue] : _deviceObjectVersion;
		_deviceOSType = [dic objectForKey: @"deviceOSType"] != nil ? [[dic objectForKey: @"deviceOSType"] copy] : _deviceOSType;
		_deviceOSVersion = [dic objectForKey: @"deviceOSVersion"] != nil ? [[dic objectForKey: @"deviceOSVersion"] copy] : _deviceOSVersion;

        if([dic objectForKey: @"devicePhysicalIds"] != [NSNull null]){
            _devicePhysicalIds = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"devicePhysicalIds"] count]];
            
            for (id object in [dic objectForKey: @"devicePhysicalIds"]) {
                [_devicePhysicalIds addObject:[object copy]];
            }
        }
        
		_deviceTrustType = [dic objectForKey: @"deviceTrustType"] != nil ? [[dic objectForKey: @"deviceTrustType"] copy] : _deviceTrustType;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;

        if([dic objectForKey: @"registeredOwners"] != [NSNull null]){
            _registeredOwners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"registeredOwners"] count]];
            
            for (id object in [dic objectForKey: @"registeredOwners"]) {
                [_registeredOwners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"registeredUsers"] != [NSNull null]){
            _registeredUsers = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"registeredUsers"] count]];
            
            for (id object in [dic objectForKey: @"registeredUsers"]) {
                [_registeredUsers addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    return [[NSDictionary alloc] initWithObjectsAndKeys: 
    		 (_accountEnabled?@"true":@"false"), @"accountEnabled",
		 [[NSMutableArray alloc] init], @"alternativeSecurityIds",
		 [MSOrcObjectizer stringFromDate:_approximateLastLogonTimestamp], @"approximateLastLogonTimestamp",
		 [_deviceId copy], @"deviceId",
		 [_deviceMetadata copy], @"deviceMetadata",
		 [NSNumber numberWithInt: _deviceObjectVersion], @"deviceObjectVersion",
		 [_deviceOSType copy], @"deviceOSType",
		 [_deviceOSVersion copy], @"deviceOSVersion",
		 [[NSMutableArray alloc] init], @"devicePhysicalIds",
		 [_deviceTrustType copy], @"deviceTrustType",
		 (_dirSyncEnabled?@"true":@"false"), @"dirSyncEnabled",
		 [_displayName copy], @"displayName",
		 [MSOrcObjectizer stringFromDate:_lastDirSyncTime], @"lastDirSyncTime",
		 [[NSMutableArray alloc] init], @"registeredOwners",
		 [[NSMutableArray alloc] init], @"registeredUsers",
            nil];
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property alternativeSecurityIds
 *
 */
- (void) setAlternativeSecurityIds: (NSMutableArray *) value {
    _alternativeSecurityIds = value;
    [self valueChangedFor:@"alternativeSecurityIds"];
}
       
/** Setter implementation for property approximateLastLogonTimestamp
 *
 */
- (void) setApproximateLastLogonTimestamp: (NSDate *) value {
    _approximateLastLogonTimestamp = value;
    [self valueChangedFor:@"approximateLastLogonTimestamp"];
}
       
/** Setter implementation for property deviceId
 *
 */
- (void) setDeviceId: (NSString *) value {
    _deviceId = value;
    [self valueChangedFor:@"deviceId"];
}
       
/** Setter implementation for property deviceMetadata
 *
 */
- (void) setDeviceMetadata: (NSString *) value {
    _deviceMetadata = value;
    [self valueChangedFor:@"deviceMetadata"];
}
       
/** Setter implementation for property deviceObjectVersion
 *
 */
- (void) setDeviceObjectVersion: (int) value {
    _deviceObjectVersion = value;
    [self valueChangedFor:@"deviceObjectVersion"];
}
       
/** Setter implementation for property deviceOSType
 *
 */
- (void) setDeviceOSType: (NSString *) value {
    _deviceOSType = value;
    [self valueChangedFor:@"deviceOSType"];
}
       
/** Setter implementation for property deviceOSVersion
 *
 */
- (void) setDeviceOSVersion: (NSString *) value {
    _deviceOSVersion = value;
    [self valueChangedFor:@"deviceOSVersion"];
}
       
/** Setter implementation for property devicePhysicalIds
 *
 */
- (void) setDevicePhysicalIds: (NSMutableArray *) value {
    _devicePhysicalIds = value;
    [self valueChangedFor:@"devicePhysicalIds"];
}
       
/** Setter implementation for property deviceTrustType
 *
 */
- (void) setDeviceTrustType: (NSString *) value {
    _deviceTrustType = value;
    [self valueChangedFor:@"deviceTrustType"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property registeredOwners
 *
 */
- (void) setRegisteredOwners: (NSMutableArray *) value {
    _registeredOwners = value;
    [self valueChangedFor:@"registeredOwners"];
}
       
/** Setter implementation for property registeredUsers
 *
 */
- (void) setRegisteredUsers: (NSMutableArray *) value {
    _registeredUsers = value;
    [self valueChangedFor:@"registeredUsers"];
}
       

@end
