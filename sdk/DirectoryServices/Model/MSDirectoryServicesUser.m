/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSDirectoryServicesModels.h"



/** Implementation for MSDirectoryServicesUser
 *
 */
@implementation MSDirectoryServicesUser


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"assignedLicenses", @"assignedLicenses", @"assignedPlans", @"assignedPlans", @"city", @"city", @"country", @"country", @"department", @"department", @"dirSyncEnabled", @"dirSyncEnabled", @"displayName", @"displayName", @"facsimileTelephoneNumber", @"facsimileTelephoneNumber", @"givenName", @"givenName", @"immutableId", @"immutableId", @"jobTitle", @"jobTitle", @"lastDirSyncTime", @"lastDirSyncTime", @"mail", @"mail", @"mailNickname", @"mailNickname", @"mobile", @"mobile", @"onPremisesSecurityIdentifier", @"onPremisesSecurityIdentifier", @"otherMails", @"otherMails", @"passwordPolicies", @"passwordPolicies", @"passwordProfile", @"passwordProfile", @"physicalDeliveryOfficeName", @"physicalDeliveryOfficeName", @"postalCode", @"postalCode", @"preferredLanguage", @"preferredLanguage", @"provisionedPlans", @"provisionedPlans", @"provisioningErrors", @"provisioningErrors", @"proxyAddresses", @"proxyAddresses", @"sipProxyAddress", @"sipProxyAddress", @"state", @"state", @"streetAddress", @"streetAddress", @"surname", @"surname", @"telephoneNumber", @"telephoneNumber", @"thumbnailPhoto", @"thumbnailPhoto", @"usageLocation", @"usageLocation", @"userPrincipalName", @"userPrincipalName", @"userType", @"userType", @"appRoleAssignments", @"appRoleAssignments", @"oauth2PermissionGrants", @"oauth2PermissionGrants", @"ownedDevices", @"ownedDevices", @"registeredDevices", @"registeredDevices", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", @"createdOnBehalfOf", @"createdOnBehalfOf", @"createdObjects", @"createdObjects", @"manager", @"manager", @"directReports", @"directReports", @"members", @"members", @"memberOf", @"memberOf", @"owners", @"owners", @"ownedObjects", @"ownedObjects", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.DirectoryServices.User";
        
        
		_assignedLicenses = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_assignedPlans = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_otherMails = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_provisionedPlans = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_provisioningErrors = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_proxyAddresses = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_appRoleAssignments = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_oauth2PermissionGrants = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_ownedDevices = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_registeredDevices = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;

        if([dic objectForKey: @"assignedLicenses"] != [NSNull null]){
            _assignedLicenses = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"assignedLicenses"] count]];
            
            for (id object in [dic objectForKey: @"assignedLicenses"]) {
                [_assignedLicenses addObject:[[MSDirectoryServicesAssignedLicense alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"assignedPlans"] != [NSNull null]){
            _assignedPlans = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"assignedPlans"] count]];
            
            for (id object in [dic objectForKey: @"assignedPlans"]) {
                [_assignedPlans addObject:[[MSDirectoryServicesAssignedPlan alloc] initWithDictionary: object]];
            }
        }
        
		_city = [dic objectForKey: @"city"] != nil ? [[dic objectForKey: @"city"] copy] : _city;
		_country = [dic objectForKey: @"country"] != nil ? [[dic objectForKey: @"country"] copy] : _country;
		_department = [dic objectForKey: @"department"] != nil ? [[dic objectForKey: @"department"] copy] : _department;
		_dirSyncEnabled = [dic objectForKey: @"dirSyncEnabled"] != nil ? [[dic objectForKey: @"dirSyncEnabled"] boolValue] : _dirSyncEnabled;
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_facsimileTelephoneNumber = [dic objectForKey: @"facsimileTelephoneNumber"] != nil ? [[dic objectForKey: @"facsimileTelephoneNumber"] copy] : _facsimileTelephoneNumber;
		_givenName = [dic objectForKey: @"givenName"] != nil ? [[dic objectForKey: @"givenName"] copy] : _givenName;
		_immutableId = [dic objectForKey: @"immutableId"] != nil ? [[dic objectForKey: @"immutableId"] copy] : _immutableId;
		_jobTitle = [dic objectForKey: @"jobTitle"] != nil ? [[dic objectForKey: @"jobTitle"] copy] : _jobTitle;
		_lastDirSyncTime = [dic objectForKey: @"lastDirSyncTime"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"lastDirSyncTime"]] : _lastDirSyncTime;
		_mail = [dic objectForKey: @"mail"] != nil ? [[dic objectForKey: @"mail"] copy] : _mail;
		_mailNickname = [dic objectForKey: @"mailNickname"] != nil ? [[dic objectForKey: @"mailNickname"] copy] : _mailNickname;
		_mobile = [dic objectForKey: @"mobile"] != nil ? [[dic objectForKey: @"mobile"] copy] : _mobile;
		_onPremisesSecurityIdentifier = [dic objectForKey: @"onPremisesSecurityIdentifier"] != nil ? [[dic objectForKey: @"onPremisesSecurityIdentifier"] copy] : _onPremisesSecurityIdentifier;

        if([dic objectForKey: @"otherMails"] != [NSNull null]){
            _otherMails = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"otherMails"] count]];
            
            for (id object in [dic objectForKey: @"otherMails"]) {
                [_otherMails addObject:[object copy]];
            }
        }
        
		_passwordPolicies = [dic objectForKey: @"passwordPolicies"] != nil ? [[dic objectForKey: @"passwordPolicies"] copy] : _passwordPolicies;
		_passwordProfile = [dic objectForKey: @"passwordProfile"] != nil ? [[MSDirectoryServicesPasswordProfile alloc] initWithDictionary: [dic objectForKey: @"passwordProfile"]] : _passwordProfile;
		_physicalDeliveryOfficeName = [dic objectForKey: @"physicalDeliveryOfficeName"] != nil ? [[dic objectForKey: @"physicalDeliveryOfficeName"] copy] : _physicalDeliveryOfficeName;
		_postalCode = [dic objectForKey: @"postalCode"] != nil ? [[dic objectForKey: @"postalCode"] copy] : _postalCode;
		_preferredLanguage = [dic objectForKey: @"preferredLanguage"] != nil ? [[dic objectForKey: @"preferredLanguage"] copy] : _preferredLanguage;

        if([dic objectForKey: @"provisionedPlans"] != [NSNull null]){
            _provisionedPlans = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"provisionedPlans"] count]];
            
            for (id object in [dic objectForKey: @"provisionedPlans"]) {
                [_provisionedPlans addObject:[[MSDirectoryServicesProvisionedPlan alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"provisioningErrors"] != [NSNull null]){
            _provisioningErrors = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"provisioningErrors"] count]];
            
            for (id object in [dic objectForKey: @"provisioningErrors"]) {
                [_provisioningErrors addObject:[[MSDirectoryServicesProvisioningError alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"proxyAddresses"] != [NSNull null]){
            _proxyAddresses = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"proxyAddresses"] count]];
            
            for (id object in [dic objectForKey: @"proxyAddresses"]) {
                [_proxyAddresses addObject:[object copy]];
            }
        }
        
		_sipProxyAddress = [dic objectForKey: @"sipProxyAddress"] != nil ? [[dic objectForKey: @"sipProxyAddress"] copy] : _sipProxyAddress;
		_state = [dic objectForKey: @"state"] != nil ? [[dic objectForKey: @"state"] copy] : _state;
		_streetAddress = [dic objectForKey: @"streetAddress"] != nil ? [[dic objectForKey: @"streetAddress"] copy] : _streetAddress;
		_surname = [dic objectForKey: @"surname"] != nil ? [[dic objectForKey: @"surname"] copy] : _surname;
		_telephoneNumber = [dic objectForKey: @"telephoneNumber"] != nil ? [[dic objectForKey: @"telephoneNumber"] copy] : _telephoneNumber;
		_thumbnailPhoto = [dic objectForKey: @"thumbnailPhoto"] != nil ? nil/*NSStream*/ : _thumbnailPhoto;
		_usageLocation = [dic objectForKey: @"usageLocation"] != nil ? [[dic objectForKey: @"usageLocation"] copy] : _usageLocation;
		_userPrincipalName = [dic objectForKey: @"userPrincipalName"] != nil ? [[dic objectForKey: @"userPrincipalName"] copy] : _userPrincipalName;
		_userType = [dic objectForKey: @"userType"] != nil ? [[dic objectForKey: @"userType"] copy] : _userType;

        if([dic objectForKey: @"appRoleAssignments"] != [NSNull null]){
            _appRoleAssignments = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoleAssignments"] count]];
            
            for (id object in [dic objectForKey: @"appRoleAssignments"]) {
                [_appRoleAssignments addObject:[[MSDirectoryServicesAppRoleAssignment alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"oauth2PermissionGrants"] != [NSNull null]){
            _oauth2PermissionGrants = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"oauth2PermissionGrants"] count]];
            
            for (id object in [dic objectForKey: @"oauth2PermissionGrants"]) {
                [_oauth2PermissionGrants addObject:[[MSDirectoryServicesOAuth2PermissionGrant alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ownedDevices"] != [NSNull null]){
            _ownedDevices = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ownedDevices"] count]];
            
            for (id object in [dic objectForKey: @"ownedDevices"]) {
                [_ownedDevices addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"registeredDevices"] != [NSNull null]){
            _registeredDevices = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"registeredDevices"] count]];
            
            for (id object in [dic objectForKey: @"registeredDevices"]) {
                [_registeredDevices addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;
		self.createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : self.createdOnBehalfOf;

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            self.createdObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"createdObjects"] count]];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [self.createdObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		self.manager = [dic objectForKey: @"manager"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]] : self.manager;

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            self.directReports = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"directReports"] count]];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [self.directReports addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"members"] != [NSNull null]){
            self.members = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"members"] count]];
            
            for (id object in [dic objectForKey: @"members"]) {
                [self.members addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            self.memberOf = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"memberOf"] count]];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [self.memberOf addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"owners"] != [NSNull null]){
            self.owners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"owners"] count]];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [self.owners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            self.ownedObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ownedObjects"] count]];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [self.ownedObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = (self.accountEnabled?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"accountEnabled"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"assignedLicenses"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"assignedPlans"];}
	{id curVal = [self.city copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"city"];}
	{id curVal = [self.country copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"country"];}
	{id curVal = [self.department copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"department"];}
	{id curVal = (self.dirSyncEnabled?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"dirSyncEnabled"];}
	{id curVal = [self.displayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.facsimileTelephoneNumber copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"facsimileTelephoneNumber"];}
	{id curVal = [self.givenName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"givenName"];}
	{id curVal = [self.immutableId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"immutableId"];}
	{id curVal = [self.jobTitle copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"jobTitle"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastDirSyncTime]; if (curVal!=nil) [dic setValue: curVal forKey: @"lastDirSyncTime"];}
	{id curVal = [self.mail copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"mail"];}
	{id curVal = [self.mailNickname copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"mailNickname"];}
	{id curVal = [self.mobile copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"mobile"];}
	{id curVal = [self.onPremisesSecurityIdentifier copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesSecurityIdentifier"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"otherMails"];}
	{id curVal = [self.passwordPolicies copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"passwordPolicies"];}
	{id curVal = [self.passwordProfile toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"passwordProfile"];}
	{id curVal = [self.physicalDeliveryOfficeName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"physicalDeliveryOfficeName"];}
	{id curVal = [self.postalCode copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"postalCode"];}
	{id curVal = [self.preferredLanguage copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"preferredLanguage"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"provisionedPlans"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"provisioningErrors"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"proxyAddresses"];}
	{id curVal = [self.sipProxyAddress copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"sipProxyAddress"];}
	{id curVal = [self.state copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"state"];}
	{id curVal = [self.streetAddress copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"streetAddress"];}
	{id curVal = [self.surname copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"surname"];}
	{id curVal = [self.telephoneNumber copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"telephoneNumber"];}
	{id curVal = nil/*NSStream*/; if (curVal!=nil) [dic setValue: curVal forKey: @"thumbnailPhoto"];}
	{id curVal = [self.usageLocation copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"usageLocation"];}
	{id curVal = [self.userPrincipalName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"userPrincipalName"];}
	{id curVal = [self.userType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"userType"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"appRoleAssignments"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"oauth2PermissionGrants"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ownedDevices"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"registeredDevices"];}
	{id curVal = [self.objectType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp]; if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
	{id curVal = [self.createdOnBehalfOf toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{id curVal = [self.manager toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"members"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"owners"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
    [dic setValue: @"#Microsoft.DirectoryServices.User" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.accountEnabled;
    if([self.updatedValues containsObject:@"accountEnabled"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"accountEnabled"];
    }
    }
	{id curVal = self.assignedLicenses;
    if([self.updatedValues containsObject:@"assignedLicenses"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"assignedLicenses"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.assignedPlans;
    if([self.updatedValues containsObject:@"assignedPlans"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"assignedPlans"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.city;
    if([self.updatedValues containsObject:@"city"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"city"];
    }
    }
	{id curVal = self.country;
    if([self.updatedValues containsObject:@"country"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"country"];
    }
    }
	{id curVal = self.department;
    if([self.updatedValues containsObject:@"department"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"department"];
    }
    }
	{id curVal = self.dirSyncEnabled;
    if([self.updatedValues containsObject:@"dirSyncEnabled"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"dirSyncEnabled"];
    }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
    }
    }
	{id curVal = self.facsimileTelephoneNumber;
    if([self.updatedValues containsObject:@"facsimileTelephoneNumber"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"facsimileTelephoneNumber"];
    }
    }
	{id curVal = self.givenName;
    if([self.updatedValues containsObject:@"givenName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"givenName"];
    }
    }
	{id curVal = self.immutableId;
    if([self.updatedValues containsObject:@"immutableId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"immutableId"];
    }
    }
	{id curVal = self.jobTitle;
    if([self.updatedValues containsObject:@"jobTitle"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"jobTitle"];
    }
    }
	{id curVal = self.lastDirSyncTime;
    if([self.updatedValues containsObject:@"lastDirSyncTime"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastDirSyncTime"];
    }
    }
	{id curVal = self.mail;
    if([self.updatedValues containsObject:@"mail"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mail"];
    }
    }
	{id curVal = self.mailNickname;
    if([self.updatedValues containsObject:@"mailNickname"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mailNickname"];
    }
    }
	{id curVal = self.mobile;
    if([self.updatedValues containsObject:@"mobile"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mobile"];
    }
    }
	{id curVal = self.onPremisesSecurityIdentifier;
    if([self.updatedValues containsObject:@"onPremisesSecurityIdentifier"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"onPremisesSecurityIdentifier"];
    }
    }
	{id curVal = self.otherMails;
    if([self.updatedValues containsObject:@"otherMails"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"otherMails"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.passwordPolicies;
    if([self.updatedValues containsObject:@"passwordPolicies"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"passwordPolicies"];
    }
    }
	{id curVal = self.passwordProfile;
    if([self.updatedValues containsObject:@"passwordProfile"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"passwordProfile"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"passwordProfile"];
            }
        
            }}
	{id curVal = self.physicalDeliveryOfficeName;
    if([self.updatedValues containsObject:@"physicalDeliveryOfficeName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"physicalDeliveryOfficeName"];
    }
    }
	{id curVal = self.postalCode;
    if([self.updatedValues containsObject:@"postalCode"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"postalCode"];
    }
    }
	{id curVal = self.preferredLanguage;
    if([self.updatedValues containsObject:@"preferredLanguage"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredLanguage"];
    }
    }
	{id curVal = self.provisionedPlans;
    if([self.updatedValues containsObject:@"provisionedPlans"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"provisionedPlans"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.provisioningErrors;
    if([self.updatedValues containsObject:@"provisioningErrors"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"provisioningErrors"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.proxyAddresses;
    if([self.updatedValues containsObject:@"proxyAddresses"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"proxyAddresses"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.sipProxyAddress;
    if([self.updatedValues containsObject:@"sipProxyAddress"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"sipProxyAddress"];
    }
    }
	{id curVal = self.state;
    if([self.updatedValues containsObject:@"state"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"state"];
    }
    }
	{id curVal = self.streetAddress;
    if([self.updatedValues containsObject:@"streetAddress"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"streetAddress"];
    }
    }
	{id curVal = self.surname;
    if([self.updatedValues containsObject:@"surname"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"surname"];
    }
    }
	{id curVal = self.telephoneNumber;
    if([self.updatedValues containsObject:@"telephoneNumber"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"telephoneNumber"];
    }
    }
	{id curVal = self.thumbnailPhoto;
    if([self.updatedValues containsObject:@"thumbnailPhoto"])
    {
        [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"thumbnailPhoto"];
    }
    }
	{id curVal = self.usageLocation;
    if([self.updatedValues containsObject:@"usageLocation"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"usageLocation"];
    }
    }
	{id curVal = self.userPrincipalName;
    if([self.updatedValues containsObject:@"userPrincipalName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userPrincipalName"];
    }
    }
	{id curVal = self.userType;
    if([self.updatedValues containsObject:@"userType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userType"];
    }
    }
	{id curVal = self.appRoleAssignments;
    if([self.updatedValues containsObject:@"appRoleAssignments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"appRoleAssignments"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.oauth2PermissionGrants;
    if([self.updatedValues containsObject:@"oauth2PermissionGrants"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"oauth2PermissionGrants"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ownedDevices;
    if([self.updatedValues containsObject:@"ownedDevices"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ownedDevices"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.registeredDevices;
    if([self.updatedValues containsObject:@"registeredDevices"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"registeredDevices"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
    }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
    }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
    }
    }
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"directReports"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.members;
    if([self.updatedValues containsObject:@"members"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"members"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"memberOf"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"owners"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ownedObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property assignedLicenses
 *
 */
- (void) setAssignedLicenses: (NSMutableArray *) value {
    _assignedLicenses = value;
    [self valueChangedFor:@"assignedLicenses"];
}
       
/** Setter implementation for property assignedPlans
 *
 */
- (void) setAssignedPlans: (NSMutableArray *) value {
    _assignedPlans = value;
    [self valueChangedFor:@"assignedPlans"];
}
       
/** Setter implementation for property city
 *
 */
- (void) setCity: (NSString *) value {
    _city = value;
    [self valueChangedFor:@"city"];
}
       
/** Setter implementation for property country
 *
 */
- (void) setCountry: (NSString *) value {
    _country = value;
    [self valueChangedFor:@"country"];
}
       
/** Setter implementation for property department
 *
 */
- (void) setDepartment: (NSString *) value {
    _department = value;
    [self valueChangedFor:@"department"];
}
       
/** Setter implementation for property dirSyncEnabled
 *
 */
- (void) setDirSyncEnabled: (bool) value {
    _dirSyncEnabled = value;
    [self valueChangedFor:@"dirSyncEnabled"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property facsimileTelephoneNumber
 *
 */
- (void) setFacsimileTelephoneNumber: (NSString *) value {
    _facsimileTelephoneNumber = value;
    [self valueChangedFor:@"facsimileTelephoneNumber"];
}
       
/** Setter implementation for property givenName
 *
 */
- (void) setGivenName: (NSString *) value {
    _givenName = value;
    [self valueChangedFor:@"givenName"];
}
       
/** Setter implementation for property immutableId
 *
 */
- (void) setImmutableId: (NSString *) value {
    _immutableId = value;
    [self valueChangedFor:@"immutableId"];
}
       
/** Setter implementation for property jobTitle
 *
 */
- (void) setJobTitle: (NSString *) value {
    _jobTitle = value;
    [self valueChangedFor:@"jobTitle"];
}
       
/** Setter implementation for property lastDirSyncTime
 *
 */
- (void) setLastDirSyncTime: (NSDate *) value {
    _lastDirSyncTime = value;
    [self valueChangedFor:@"lastDirSyncTime"];
}
       
/** Setter implementation for property mail
 *
 */
- (void) setMail: (NSString *) value {
    _mail = value;
    [self valueChangedFor:@"mail"];
}
       
/** Setter implementation for property mailNickname
 *
 */
- (void) setMailNickname: (NSString *) value {
    _mailNickname = value;
    [self valueChangedFor:@"mailNickname"];
}
       
/** Setter implementation for property mobile
 *
 */
- (void) setMobile: (NSString *) value {
    _mobile = value;
    [self valueChangedFor:@"mobile"];
}
       
/** Setter implementation for property onPremisesSecurityIdentifier
 *
 */
- (void) setOnPremisesSecurityIdentifier: (NSString *) value {
    _onPremisesSecurityIdentifier = value;
    [self valueChangedFor:@"onPremisesSecurityIdentifier"];
}
       
/** Setter implementation for property otherMails
 *
 */
- (void) setOtherMails: (NSMutableArray *) value {
    _otherMails = value;
    [self valueChangedFor:@"otherMails"];
}
       
/** Setter implementation for property passwordPolicies
 *
 */
- (void) setPasswordPolicies: (NSString *) value {
    _passwordPolicies = value;
    [self valueChangedFor:@"passwordPolicies"];
}
       
/** Setter implementation for property passwordProfile
 *
 */
- (void) setPasswordProfile: (MSDirectoryServicesPasswordProfile *) value {
    _passwordProfile = value;
    [self valueChangedFor:@"passwordProfile"];
}
       
/** Setter implementation for property physicalDeliveryOfficeName
 *
 */
- (void) setPhysicalDeliveryOfficeName: (NSString *) value {
    _physicalDeliveryOfficeName = value;
    [self valueChangedFor:@"physicalDeliveryOfficeName"];
}
       
/** Setter implementation for property postalCode
 *
 */
- (void) setPostalCode: (NSString *) value {
    _postalCode = value;
    [self valueChangedFor:@"postalCode"];
}
       
/** Setter implementation for property preferredLanguage
 *
 */
- (void) setPreferredLanguage: (NSString *) value {
    _preferredLanguage = value;
    [self valueChangedFor:@"preferredLanguage"];
}
       
/** Setter implementation for property provisionedPlans
 *
 */
- (void) setProvisionedPlans: (NSMutableArray *) value {
    _provisionedPlans = value;
    [self valueChangedFor:@"provisionedPlans"];
}
       
/** Setter implementation for property provisioningErrors
 *
 */
- (void) setProvisioningErrors: (NSMutableArray *) value {
    _provisioningErrors = value;
    [self valueChangedFor:@"provisioningErrors"];
}
       
/** Setter implementation for property proxyAddresses
 *
 */
- (void) setProxyAddresses: (NSMutableArray *) value {
    _proxyAddresses = value;
    [self valueChangedFor:@"proxyAddresses"];
}
       
/** Setter implementation for property sipProxyAddress
 *
 */
- (void) setSipProxyAddress: (NSString *) value {
    _sipProxyAddress = value;
    [self valueChangedFor:@"sipProxyAddress"];
}
       
/** Setter implementation for property state
 *
 */
- (void) setState: (NSString *) value {
    _state = value;
    [self valueChangedFor:@"state"];
}
       
/** Setter implementation for property streetAddress
 *
 */
- (void) setStreetAddress: (NSString *) value {
    _streetAddress = value;
    [self valueChangedFor:@"streetAddress"];
}
       
/** Setter implementation for property surname
 *
 */
- (void) setSurname: (NSString *) value {
    _surname = value;
    [self valueChangedFor:@"surname"];
}
       
/** Setter implementation for property telephoneNumber
 *
 */
- (void) setTelephoneNumber: (NSString *) value {
    _telephoneNumber = value;
    [self valueChangedFor:@"telephoneNumber"];
}
       
/** Setter implementation for property thumbnailPhoto
 *
 */
- (void) setThumbnailPhoto: (NSStream *) value {
    _thumbnailPhoto = value;
    [self valueChangedFor:@"thumbnailPhoto"];
}
       
/** Setter implementation for property usageLocation
 *
 */
- (void) setUsageLocation: (NSString *) value {
    _usageLocation = value;
    [self valueChangedFor:@"usageLocation"];
}
       
/** Setter implementation for property userPrincipalName
 *
 */
- (void) setUserPrincipalName: (NSString *) value {
    _userPrincipalName = value;
    [self valueChangedFor:@"userPrincipalName"];
}
       
/** Setter implementation for property userType
 *
 */
- (void) setUserType: (NSString *) value {
    _userType = value;
    [self valueChangedFor:@"userType"];
}
       
/** Setter implementation for property appRoleAssignments
 *
 */
- (void) setAppRoleAssignments: (NSMutableArray *) value {
    _appRoleAssignments = value;
    [self valueChangedFor:@"appRoleAssignments"];
}
       
/** Setter implementation for property oauth2PermissionGrants
 *
 */
- (void) setOauth2PermissionGrants: (NSMutableArray *) value {
    _oauth2PermissionGrants = value;
    [self valueChangedFor:@"oauth2PermissionGrants"];
}
       
/** Setter implementation for property ownedDevices
 *
 */
- (void) setOwnedDevices: (NSMutableArray *) value {
    _ownedDevices = value;
    [self valueChangedFor:@"ownedDevices"];
}
       
/** Setter implementation for property registeredDevices
 *
 */
- (void) setRegisteredDevices: (NSMutableArray *) value {
    _registeredDevices = value;
    [self valueChangedFor:@"registeredDevices"];
}
       

@end
