/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSDirectoryServicesModels.h"



/** Implementation for MSDirectoryServicesServicePrincipal
 *
 */
@implementation MSDirectoryServicesServicePrincipal


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"appDisplayName", @"appDisplayName", @"appId", @"appId", @"appOwnerTenantId", @"appOwnerTenantId", @"appRoleAssignmentRequired", @"appRoleAssignmentRequired", @"appRoles", @"appRoles", @"displayName", @"displayName", @"errorUrl", @"errorUrl", @"homepage", @"homepage", @"keyCredentials", @"keyCredentials", @"logoutUrl", @"logoutUrl", @"oauth2Permissions", @"oauth2Permissions", @"passwordCredentials", @"passwordCredentials", @"preferredTokenSigningKeyThumbprint", @"preferredTokenSigningKeyThumbprint", @"publisherName", @"publisherName", @"replyUrls", @"replyUrls", @"samlMetadataUrl", @"samlMetadataUrl", @"servicePrincipalNames", @"servicePrincipalNames", @"tags", @"tags", @"appRoleAssignedTo", @"appRoleAssignedTo", @"appRoleAssignments", @"appRoleAssignments", @"oauth2PermissionGrants", @"oauth2PermissionGrants", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", @"createdOnBehalfOf", @"createdOnBehalfOf", @"createdObjects", @"createdObjects", @"manager", @"manager", @"directReports", @"directReports", @"members", @"members", @"memberOf", @"memberOf", @"owners", @"owners", @"ownedObjects", @"ownedObjects", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.DirectoryServices.ServicePrincipal";
        
        
		_appRoles = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_keyCredentials = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_oauth2Permissions = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_passwordCredentials = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_replyUrls = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_servicePrincipalNames = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_tags = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_appRoleAssignedTo = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_appRoleAssignments = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_oauth2PermissionGrants = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accountEnabled = [dic objectForKey: @"accountEnabled"] != nil ? [[dic objectForKey: @"accountEnabled"] boolValue] : _accountEnabled;
		_appDisplayName = [dic objectForKey: @"appDisplayName"] != nil ? [[dic objectForKey: @"appDisplayName"] copy] : _appDisplayName;
		_appId = [dic objectForKey: @"appId"] != nil ? [[dic objectForKey: @"appId"] copy] : _appId;
		_appOwnerTenantId = [dic objectForKey: @"appOwnerTenantId"] != nil ? [[dic objectForKey: @"appOwnerTenantId"] copy] : _appOwnerTenantId;
		_appRoleAssignmentRequired = [dic objectForKey: @"appRoleAssignmentRequired"] != nil ? [[dic objectForKey: @"appRoleAssignmentRequired"] boolValue] : _appRoleAssignmentRequired;

        if([dic objectForKey: @"appRoles"] != [NSNull null]){
            _appRoles = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoles"] count]];
            
            for (id object in [dic objectForKey: @"appRoles"]) {
                [_appRoles addObject:[[MSDirectoryServicesAppRole alloc] initWithDictionary: object]];
            }
        }
        
		_displayName = [dic objectForKey: @"displayName"] != nil ? [[dic objectForKey: @"displayName"] copy] : _displayName;
		_errorUrl = [dic objectForKey: @"errorUrl"] != nil ? [[dic objectForKey: @"errorUrl"] copy] : _errorUrl;
		_homepage = [dic objectForKey: @"homepage"] != nil ? [[dic objectForKey: @"homepage"] copy] : _homepage;

        if([dic objectForKey: @"keyCredentials"] != [NSNull null]){
            _keyCredentials = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"keyCredentials"] count]];
            
            for (id object in [dic objectForKey: @"keyCredentials"]) {
                [_keyCredentials addObject:[[MSDirectoryServicesKeyCredential alloc] initWithDictionary: object]];
            }
        }
        
		_logoutUrl = [dic objectForKey: @"logoutUrl"] != nil ? [[dic objectForKey: @"logoutUrl"] copy] : _logoutUrl;

        if([dic objectForKey: @"oauth2Permissions"] != [NSNull null]){
            _oauth2Permissions = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"oauth2Permissions"] count]];
            
            for (id object in [dic objectForKey: @"oauth2Permissions"]) {
                [_oauth2Permissions addObject:[[MSDirectoryServicesOAuth2Permission alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"passwordCredentials"] != [NSNull null]){
            _passwordCredentials = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"passwordCredentials"] count]];
            
            for (id object in [dic objectForKey: @"passwordCredentials"]) {
                [_passwordCredentials addObject:[[MSDirectoryServicesPasswordCredential alloc] initWithDictionary: object]];
            }
        }
        
		_preferredTokenSigningKeyThumbprint = [dic objectForKey: @"preferredTokenSigningKeyThumbprint"] != nil ? [[dic objectForKey: @"preferredTokenSigningKeyThumbprint"] copy] : _preferredTokenSigningKeyThumbprint;
		_publisherName = [dic objectForKey: @"publisherName"] != nil ? [[dic objectForKey: @"publisherName"] copy] : _publisherName;

        if([dic objectForKey: @"replyUrls"] != [NSNull null]){
            _replyUrls = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"replyUrls"] count]];
            
            for (id object in [dic objectForKey: @"replyUrls"]) {
                [_replyUrls addObject:[object copy]];
            }
        }
        
		_samlMetadataUrl = [dic objectForKey: @"samlMetadataUrl"] != nil ? [[dic objectForKey: @"samlMetadataUrl"] copy] : _samlMetadataUrl;

        if([dic objectForKey: @"servicePrincipalNames"] != [NSNull null]){
            _servicePrincipalNames = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"servicePrincipalNames"] count]];
            
            for (id object in [dic objectForKey: @"servicePrincipalNames"]) {
                [_servicePrincipalNames addObject:[object copy]];
            }
        }
        

        if([dic objectForKey: @"tags"] != [NSNull null]){
            _tags = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"tags"] count]];
            
            for (id object in [dic objectForKey: @"tags"]) {
                [_tags addObject:[object copy]];
            }
        }
        

        if([dic objectForKey: @"appRoleAssignedTo"] != [NSNull null]){
            _appRoleAssignedTo = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoleAssignedTo"] count]];
            
            for (id object in [dic objectForKey: @"appRoleAssignedTo"]) {
                [_appRoleAssignedTo addObject:[[MSDirectoryServicesAppRoleAssignment alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"appRoleAssignments"] != [NSNull null]){
            _appRoleAssignments = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"appRoleAssignments"] count]];
            
            for (id object in [dic objectForKey: @"appRoleAssignments"]) {
                [_appRoleAssignments addObject:[[MSDirectoryServicesAppRoleAssignment alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"oauth2PermissionGrants"] != [NSNull null]){
            _oauth2PermissionGrants = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"oauth2PermissionGrants"] count]];
            
            for (id object in [dic objectForKey: @"oauth2PermissionGrants"]) {
                [_oauth2PermissionGrants addObject:[[MSDirectoryServicesOAuth2PermissionGrant alloc] initWithDictionary: object]];
            }
        }
        
		self.objectType = [dic objectForKey: @"objectType"] != nil ? [[dic objectForKey: @"objectType"] copy] : self.objectType;
		self.objectId = [dic objectForKey: @"objectId"] != nil ? [[dic objectForKey: @"objectId"] copy] : self.objectId;
		self.deletionTimestamp = [dic objectForKey: @"deletionTimestamp"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]] : self.deletionTimestamp;
		self.createdOnBehalfOf = [dic objectForKey: @"createdOnBehalfOf"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]] : self.createdOnBehalfOf;

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            self.createdObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"createdObjects"] count]];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [self.createdObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        
		self.manager = [dic objectForKey: @"manager"] != nil ? [[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]] : self.manager;

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            self.directReports = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"directReports"] count]];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [self.directReports addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"members"] != [NSNull null]){
            self.members = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"members"] count]];
            
            for (id object in [dic objectForKey: @"members"]) {
                [self.members addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            self.memberOf = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"memberOf"] count]];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [self.memberOf addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"owners"] != [NSNull null]){
            self.owners = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"owners"] count]];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [self.owners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            self.ownedObjects = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ownedObjects"] count]];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [self.ownedObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
        }
        

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = (self.accountEnabled?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"accountEnabled"];}
	{id curVal = [self.appDisplayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"appDisplayName"];}
	{id curVal = [self.appId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"appId"];}
	{id curVal = [self.appOwnerTenantId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"appOwnerTenantId"];}
	{id curVal = (self.appRoleAssignmentRequired?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"appRoleAssignmentRequired"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"appRoles"];}
	{id curVal = [self.displayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.errorUrl copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"errorUrl"];}
	{id curVal = [self.homepage copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"homepage"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"keyCredentials"];}
	{id curVal = [self.logoutUrl copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"logoutUrl"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"oauth2Permissions"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"passwordCredentials"];}
	{id curVal = [self.preferredTokenSigningKeyThumbprint copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"preferredTokenSigningKeyThumbprint"];}
	{id curVal = [self.publisherName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"publisherName"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"replyUrls"];}
	{id curVal = [self.samlMetadataUrl copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"samlMetadataUrl"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"servicePrincipalNames"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"tags"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"appRoleAssignedTo"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"appRoleAssignments"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"oauth2PermissionGrants"];}
	{id curVal = [self.objectType copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp]; if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
	{id curVal = [self.createdOnBehalfOf toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{id curVal = [self.manager toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"members"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"owners"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
    [dic setValue: @"#Microsoft.DirectoryServices.ServicePrincipal" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.accountEnabled;
    if([self.updatedValues containsObject:@"accountEnabled"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"accountEnabled"];
    }
    }
	{id curVal = self.appDisplayName;
    if([self.updatedValues containsObject:@"appDisplayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"appDisplayName"];
    }
    }
	{id curVal = self.appId;
    if([self.updatedValues containsObject:@"appId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"appId"];
    }
    }
	{id curVal = self.appOwnerTenantId;
    if([self.updatedValues containsObject:@"appOwnerTenantId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"appOwnerTenantId"];
    }
    }
	{id curVal = self.appRoleAssignmentRequired;
    if([self.updatedValues containsObject:@"appRoleAssignmentRequired"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"appRoleAssignmentRequired"];
    }
    }
	{id curVal = self.appRoles;
    if([self.updatedValues containsObject:@"appRoles"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"appRoles"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
    }
    }
	{id curVal = self.errorUrl;
    if([self.updatedValues containsObject:@"errorUrl"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"errorUrl"];
    }
    }
	{id curVal = self.homepage;
    if([self.updatedValues containsObject:@"homepage"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"homepage"];
    }
    }
	{id curVal = self.keyCredentials;
    if([self.updatedValues containsObject:@"keyCredentials"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"keyCredentials"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.logoutUrl;
    if([self.updatedValues containsObject:@"logoutUrl"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"logoutUrl"];
    }
    }
	{id curVal = self.oauth2Permissions;
    if([self.updatedValues containsObject:@"oauth2Permissions"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"oauth2Permissions"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.passwordCredentials;
    if([self.updatedValues containsObject:@"passwordCredentials"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"passwordCredentials"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.preferredTokenSigningKeyThumbprint;
    if([self.updatedValues containsObject:@"preferredTokenSigningKeyThumbprint"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredTokenSigningKeyThumbprint"];
    }
    }
	{id curVal = self.publisherName;
    if([self.updatedValues containsObject:@"publisherName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"publisherName"];
    }
    }
	{id curVal = self.replyUrls;
    if([self.updatedValues containsObject:@"replyUrls"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"replyUrls"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.samlMetadataUrl;
    if([self.updatedValues containsObject:@"samlMetadataUrl"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"samlMetadataUrl"];
    }
    }
	{id curVal = self.servicePrincipalNames;
    if([self.updatedValues containsObject:@"servicePrincipalNames"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"servicePrincipalNames"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.tags;
    if([self.updatedValues containsObject:@"tags"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"tags"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.appRoleAssignedTo;
    if([self.updatedValues containsObject:@"appRoleAssignedTo"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"appRoleAssignedTo"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.appRoleAssignments;
    if([self.updatedValues containsObject:@"appRoleAssignments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"appRoleAssignments"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.oauth2PermissionGrants;
    if([self.updatedValues containsObject:@"oauth2PermissionGrants"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"oauth2PermissionGrants"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
    }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
    }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
    }
    }
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"directReports"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.members;
    if([self.updatedValues containsObject:@"members"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"members"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"memberOf"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"owners"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ownedObjects"];
    }
        else
    {
                
        //Check collection change:
        
            }}
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property appDisplayName
 *
 */
- (void) setAppDisplayName: (NSString *) value {
    _appDisplayName = value;
    [self valueChangedFor:@"appDisplayName"];
}
       
/** Setter implementation for property appId
 *
 */
- (void) setAppId: (NSString *) value {
    _appId = value;
    [self valueChangedFor:@"appId"];
}
       
/** Setter implementation for property appOwnerTenantId
 *
 */
- (void) setAppOwnerTenantId: (NSString *) value {
    _appOwnerTenantId = value;
    [self valueChangedFor:@"appOwnerTenantId"];
}
       
/** Setter implementation for property appRoleAssignmentRequired
 *
 */
- (void) setAppRoleAssignmentRequired: (bool) value {
    _appRoleAssignmentRequired = value;
    [self valueChangedFor:@"appRoleAssignmentRequired"];
}
       
/** Setter implementation for property appRoles
 *
 */
- (void) setAppRoles: (NSMutableArray *) value {
    _appRoles = value;
    [self valueChangedFor:@"appRoles"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property errorUrl
 *
 */
- (void) setErrorUrl: (NSString *) value {
    _errorUrl = value;
    [self valueChangedFor:@"errorUrl"];
}
       
/** Setter implementation for property homepage
 *
 */
- (void) setHomepage: (NSString *) value {
    _homepage = value;
    [self valueChangedFor:@"homepage"];
}
       
/** Setter implementation for property keyCredentials
 *
 */
- (void) setKeyCredentials: (NSMutableArray *) value {
    _keyCredentials = value;
    [self valueChangedFor:@"keyCredentials"];
}
       
/** Setter implementation for property logoutUrl
 *
 */
- (void) setLogoutUrl: (NSString *) value {
    _logoutUrl = value;
    [self valueChangedFor:@"logoutUrl"];
}
       
/** Setter implementation for property oauth2Permissions
 *
 */
- (void) setOauth2Permissions: (NSMutableArray *) value {
    _oauth2Permissions = value;
    [self valueChangedFor:@"oauth2Permissions"];
}
       
/** Setter implementation for property passwordCredentials
 *
 */
- (void) setPasswordCredentials: (NSMutableArray *) value {
    _passwordCredentials = value;
    [self valueChangedFor:@"passwordCredentials"];
}
       
/** Setter implementation for property preferredTokenSigningKeyThumbprint
 *
 */
- (void) setPreferredTokenSigningKeyThumbprint: (NSString *) value {
    _preferredTokenSigningKeyThumbprint = value;
    [self valueChangedFor:@"preferredTokenSigningKeyThumbprint"];
}
       
/** Setter implementation for property publisherName
 *
 */
- (void) setPublisherName: (NSString *) value {
    _publisherName = value;
    [self valueChangedFor:@"publisherName"];
}
       
/** Setter implementation for property replyUrls
 *
 */
- (void) setReplyUrls: (NSMutableArray *) value {
    _replyUrls = value;
    [self valueChangedFor:@"replyUrls"];
}
       
/** Setter implementation for property samlMetadataUrl
 *
 */
- (void) setSamlMetadataUrl: (NSString *) value {
    _samlMetadataUrl = value;
    [self valueChangedFor:@"samlMetadataUrl"];
}
       
/** Setter implementation for property servicePrincipalNames
 *
 */
- (void) setServicePrincipalNames: (NSMutableArray *) value {
    _servicePrincipalNames = value;
    [self valueChangedFor:@"servicePrincipalNames"];
}
       
/** Setter implementation for property tags
 *
 */
- (void) setTags: (NSMutableArray *) value {
    _tags = value;
    [self valueChangedFor:@"tags"];
}
       
/** Setter implementation for property appRoleAssignedTo
 *
 */
- (void) setAppRoleAssignedTo: (NSMutableArray *) value {
    _appRoleAssignedTo = value;
    [self valueChangedFor:@"appRoleAssignedTo"];
}
       
/** Setter implementation for property appRoleAssignments
 *
 */
- (void) setAppRoleAssignments: (NSMutableArray *) value {
    _appRoleAssignments = value;
    [self valueChangedFor:@"appRoleAssignments"];
}
       
/** Setter implementation for property oauth2PermissionGrants
 *
 */
- (void) setOauth2PermissionGrants: (NSMutableArray *) value {
    _oauth2PermissionGrants = value;
    [self valueChangedFor:@"oauth2PermissionGrants"];
}
       

@end
