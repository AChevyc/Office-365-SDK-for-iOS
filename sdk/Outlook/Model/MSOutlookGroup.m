/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSOutlookGroup
 *
 */
@implementation MSOutlookGroup


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"AccessType", @"accessType", @"AllowExternalSenders", @"allowExternalSenders", @"AutoSubscribeNewMembers", @"autoSubscribeNewMembers", @"Description", @"_description", @"DisplayName", @"displayName", @"EmailAddress", @"emailAddress", @"IsFavorite", @"isFavorite", @"IsSubscribedByMail", @"isSubscribedByMail", @"UnseenCount", @"unseenCount", @"Threads", @"threads", @"Calendar", @"calendar", @"CalendarView", @"calendarView", @"Events", @"events", @"Conversations", @"conversations", @"Subscriptions", @"subscriptions", @"Photo", @"photo", @"AcceptedSenders", @"acceptedSenders", @"RejectedSenders", @"rejectedSenders", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.Group";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_accessType = [dic objectForKey: @"AccessType"] != nil ? [MSOutlookGroupAccessTypeSerializer fromString:[dic objectForKey: @"AccessType"]] : _accessType;
		_allowExternalSenders = [dic objectForKey: @"AllowExternalSenders"] != nil ? [[dic objectForKey: @"AllowExternalSenders"] boolValue] : _allowExternalSenders;
		_autoSubscribeNewMembers = [dic objectForKey: @"AutoSubscribeNewMembers"] != nil ? [[dic objectForKey: @"AutoSubscribeNewMembers"] boolValue] : _autoSubscribeNewMembers;
		__description = [dic objectForKey: @"Description"] != nil ? [[dic objectForKey: @"Description"] copy] : __description;
		_displayName = [dic objectForKey: @"DisplayName"] != nil ? [[dic objectForKey: @"DisplayName"] copy] : _displayName;
		_emailAddress = [dic objectForKey: @"EmailAddress"] != nil ? [[dic objectForKey: @"EmailAddress"] copy] : _emailAddress;
		_isFavorite = [dic objectForKey: @"IsFavorite"] != nil ? [[dic objectForKey: @"IsFavorite"] boolValue] : _isFavorite;
		_isSubscribedByMail = [dic objectForKey: @"IsSubscribedByMail"] != nil ? [[dic objectForKey: @"IsSubscribedByMail"] boolValue] : _isSubscribedByMail;
		_unseenCount = [dic objectForKey: @"UnseenCount"] != nil ? [[dic objectForKey: @"UnseenCount"] intValue] : _unseenCount;

        if([dic objectForKey: @"Threads"] != [NSNull null]){
            _threads = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Threads"]) {
                [_threads addObject:[[MSOutlookConversationThread alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_threads resetChangedFlag];
        }
        
		_calendar = [dic objectForKey: @"Calendar"] != nil ? [[MSOutlookCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]] : _calendar;

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarView resetChangedFlag];
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_events resetChangedFlag];
        }
        

        if([dic objectForKey: @"Conversations"] != [NSNull null]){
            _conversations = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Conversations"]) {
                [_conversations addObject:[[MSOutlookConversation alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_conversations resetChangedFlag];
        }
        

        if([dic objectForKey: @"Subscriptions"] != [NSNull null]){
            _subscriptions = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"Subscriptions"]) {
                [_subscriptions addObject:[[MSOutlookSubscription alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_subscriptions resetChangedFlag];
        }
        
		_photo = [dic objectForKey: @"Photo"] != nil ? [[MSOutlookPhoto alloc] initWithDictionary: [dic objectForKey: @"Photo"]] : _photo;

        if([dic objectForKey: @"AcceptedSenders"] != [NSNull null]){
            _acceptedSenders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"AcceptedSenders"]) {
                [_acceptedSenders addObject:[[MSOutlookDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_acceptedSenders resetChangedFlag];
        }
        

        if([dic objectForKey: @"RejectedSenders"] != [NSNull null]){
            _rejectedSenders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"RejectedSenders"]) {
                [_rejectedSenders addObject:[[MSOutlookDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_rejectedSenders resetChangedFlag];
        }
        
		self._id = [dic objectForKey: @"Id"] != nil ? [[dic objectForKey: @"Id"] copy] : self._id;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{[dic setValue: [MSOutlookGroupAccessTypeSerializer toString:self.accessType] forKey: @"AccessType"];}
	{[dic setValue: (self.allowExternalSenders?@"true":@"false") forKey: @"AllowExternalSenders"];}
	{[dic setValue: (self.autoSubscribeNewMembers?@"true":@"false") forKey: @"AutoSubscribeNewMembers"];}
	{id curVal = [self._description copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Description"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"DisplayName"];}
	{id curVal = [self.emailAddress copy];if (curVal!=nil) [dic setValue: curVal forKey: @"EmailAddress"];}
	{[dic setValue: (self.isFavorite?@"true":@"false") forKey: @"IsFavorite"];}
	{[dic setValue: (self.isSubscribedByMail?@"true":@"false") forKey: @"IsSubscribedByMail"];}
	{[dic setValue: [NSNumber numberWithInt: self.unseenCount] forKey: @"UnseenCount"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.threads) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Threads"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarView"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Events"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.conversations) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Conversations"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.subscriptions) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"Subscriptions"];}
	{id curVal = [self.photo toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"Photo"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.acceptedSenders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"AcceptedSenders"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.rejectedSenders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"RejectedSenders"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.Group" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

 if([self.updatedValues containsObject:@"AccessType"])
            { [dic setValue: [MSOutlookGroupAccessTypeSerializer toString:self.accessType] forKey: @"AccessType"];
} if([self.updatedValues containsObject:@"AllowExternalSenders"])
            { [dic setValue: (self.allowExternalSenders?@"true":@"false") forKey: @"AllowExternalSenders"];
} if([self.updatedValues containsObject:@"AutoSubscribeNewMembers"])
            { [dic setValue: (self.autoSubscribeNewMembers?@"true":@"false") forKey: @"AutoSubscribeNewMembers"];
}	{id curVal = self._description;
    if([self.updatedValues containsObject:@"Description"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Description"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"DisplayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"DisplayName"];
            }
    }
	{id curVal = self.emailAddress;
    if([self.updatedValues containsObject:@"EmailAddress"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"EmailAddress"];
            }
    }
 if([self.updatedValues containsObject:@"IsFavorite"])
            { [dic setValue: (self.isFavorite?@"true":@"false") forKey: @"IsFavorite"];
} if([self.updatedValues containsObject:@"IsSubscribedByMail"])
            { [dic setValue: (self.isSubscribedByMail?@"true":@"false") forKey: @"IsSubscribedByMail"];
} if([self.updatedValues containsObject:@"UnseenCount"])
            { [dic setValue: [NSNumber numberWithInt: self.unseenCount] forKey: @"UnseenCount"];
}	{id curVal = self.threads;
    if([self.updatedValues containsObject:@"Threads"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Threads"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.threads) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Threads"];
        }
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"CalendarView"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"CalendarView"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"CalendarView"];
        }
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"Events"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Events"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Events"];
        }
        
            }}
	{id curVal = self.conversations;
    if([self.updatedValues containsObject:@"Conversations"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Conversations"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.conversations) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Conversations"];
        }
        
            }}
	{id curVal = self.subscriptions;
    if([self.updatedValues containsObject:@"Subscriptions"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"Subscriptions"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.subscriptions) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"Subscriptions"];
        }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"Photo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Photo"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Photo"];
            }
        
            }}
	{id curVal = self.acceptedSenders;
    if([self.updatedValues containsObject:@"AcceptedSenders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"AcceptedSenders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.acceptedSenders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"AcceptedSenders"];
        }
        
            }}
	{id curVal = self.rejectedSenders;
    if([self.updatedValues containsObject:@"RejectedSenders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"RejectedSenders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.rejectedSenders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"RejectedSenders"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
            }
    }
    return dic;
}


/** Setter implementation for property accessType
 *
 */
- (void) setAccessType: (MSOutlookGroupAccessType) value {
    _accessType = value;
    [self valueChangedFor:@"AccessType"];
}
       

- (void)setAccessTypeString:(NSString *)string {
        
    _accessType = [MSOutlookGroupAccessTypeSerializer fromString:string];
    [self valueChangedFor:@"AccessType"]; 
}

/** Setter implementation for property allowExternalSenders
 *
 */
- (void) setAllowExternalSenders: (bool) value {
    _allowExternalSenders = value;
    [self valueChangedFor:@"AllowExternalSenders"];
}
       
/** Setter implementation for property autoSubscribeNewMembers
 *
 */
- (void) setAutoSubscribeNewMembers: (bool) value {
    _autoSubscribeNewMembers = value;
    [self valueChangedFor:@"AutoSubscribeNewMembers"];
}
       
/** Setter implementation for property _description
 *
 */
- (void) setDescription: (NSString *) value {
    __description = value;
    [self valueChangedFor:@"Description"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"DisplayName"];
}
       
/** Setter implementation for property emailAddress
 *
 */
- (void) setEmailAddress: (NSString *) value {
    _emailAddress = value;
    [self valueChangedFor:@"EmailAddress"];
}
       
/** Setter implementation for property isFavorite
 *
 */
- (void) setIsFavorite: (bool) value {
    _isFavorite = value;
    [self valueChangedFor:@"IsFavorite"];
}
       
/** Setter implementation for property isSubscribedByMail
 *
 */
- (void) setIsSubscribedByMail: (bool) value {
    _isSubscribedByMail = value;
    [self valueChangedFor:@"IsSubscribedByMail"];
}
       
/** Setter implementation for property unseenCount
 *
 */
- (void) setUnseenCount: (int) value {
    _unseenCount = value;
    [self valueChangedFor:@"UnseenCount"];
}
       
/** Setter implementation for property threads
 *
 */
- (void) setThreads: (NSMutableArray *) value {
    _threads = value;
    [self valueChangedFor:@"Threads"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSOutlookCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property conversations
 *
 */
- (void) setConversations: (NSMutableArray *) value {
    _conversations = value;
    [self valueChangedFor:@"Conversations"];
}
       
/** Setter implementation for property subscriptions
 *
 */
- (void) setSubscriptions: (NSMutableArray *) value {
    _subscriptions = value;
    [self valueChangedFor:@"Subscriptions"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSOutlookPhoto *) value {
    _photo = value;
    [self valueChangedFor:@"Photo"];
}
       
/** Setter implementation for property acceptedSenders
 *
 */
- (void) setAcceptedSenders: (NSMutableArray *) value {
    _acceptedSenders = value;
    [self valueChangedFor:@"AcceptedSenders"];
}
       
/** Setter implementation for property rejectedSenders
 *
 */
- (void) setRejectedSenders: (NSMutableArray *) value {
    _rejectedSenders = value;
    [self valueChangedFor:@"RejectedSenders"];
}
       

@end
