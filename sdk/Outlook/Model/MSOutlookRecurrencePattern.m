/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"


/** Implementation for MSOutlookRecurrencePattern
 *
 */
@implementation MSOutlookRecurrencePattern


@synthesize odataType = _odataType;

+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"Type", @"type", @"Interval", @"interval", @"Month", @"month", @"DayOfMonth", @"dayOfMonth", @"DaysOfWeek", @"daysOfWeek", @"FirstDayOfWeek", @"firstDayOfWeek", @"Index", @"index", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.RecurrencePattern";

        
		_daysOfWeek = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}

/** Setter implementation for property type
 *
 */
- (void) setType: (MSOutlookRecurrencePatternType) value {
    _type = value;
    [self valueChangedForInt:_type forProperty:@"Type"];
}
       

- (void)setTypeString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeDaily], @"Daily", [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeWeekly], @"Weekly", [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeAbsoluteMonthly], @"AbsoluteMonthly", [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeRelativeMonthly], @"RelativeMonthly", [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeAbsoluteYearly], @"AbsoluteYearly", [NSNumber numberWithInt:MSOutlookRecurrencePatternTypeRelativeYearly], @"RelativeYearly",
            nil        
        ];
    }
    
    self.type = [stringMappings[value] intValue]; 
}

/** Setter implementation for property interval
 *
 */
- (void) setInterval: (int) value {
    _interval = value;
    [self valueChangedForInt:_interval forProperty:@"Interval"];
}
       
/** Setter implementation for property month
 *
 */
- (void) setMonth: (int) value {
    _month = value;
    [self valueChangedForInt:_month forProperty:@"Month"];
}
       
/** Setter implementation for property dayOfMonth
 *
 */
- (void) setDayOfMonth: (int) value {
    _dayOfMonth = value;
    [self valueChangedForInt:_dayOfMonth forProperty:@"DayOfMonth"];
}
       
/** Setter implementation for property daysOfWeek
 *
 */
- (void) setDaysOfWeek: (NSMutableArray *) value {
    _daysOfWeek = value;
    [self valueChanged:_daysOfWeek forProperty:@"DaysOfWeek"];
}
       
/** Setter implementation for property firstDayOfWeek
 *
 */
- (void) setFirstDayOfWeek: (MSOutlookDayOfWeek) value {
    _firstDayOfWeek = value;
    [self valueChangedForInt:_firstDayOfWeek forProperty:@"FirstDayOfWeek"];
}
       

- (void)setFirstDayOfWeekString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookDayOfWeekSunday], @"Sunday", [NSNumber numberWithInt:MSOutlookDayOfWeekMonday], @"Monday", [NSNumber numberWithInt:MSOutlookDayOfWeekTuesday], @"Tuesday", [NSNumber numberWithInt:MSOutlookDayOfWeekWednesday], @"Wednesday", [NSNumber numberWithInt:MSOutlookDayOfWeekThursday], @"Thursday", [NSNumber numberWithInt:MSOutlookDayOfWeekFriday], @"Friday", [NSNumber numberWithInt:MSOutlookDayOfWeekSaturday], @"Saturday",
            nil        
        ];
    }
    
    self.firstDayOfWeek = [stringMappings[value] intValue]; 
}

/** Setter implementation for property index
 *
 */
- (void) setIndex: (MSOutlookWeekIndex) value {
    _index = value;
    [self valueChangedForInt:_index forProperty:@"Index"];
}
       

- (void)setIndexString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookWeekIndexFirst], @"First", [NSNumber numberWithInt:MSOutlookWeekIndexSecond], @"Second", [NSNumber numberWithInt:MSOutlookWeekIndexThird], @"Third", [NSNumber numberWithInt:MSOutlookWeekIndexFourth], @"Fourth", [NSNumber numberWithInt:MSOutlookWeekIndexLast], @"Last",
            nil        
        ];
    }
    
    self.index = [stringMappings[value] intValue]; 
}


@end
