/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"



/** Implementation for MSOutlookUser
 *
 */
@implementation MSOutlookUser


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"DisplayName", @"displayName", @"Alias", @"alias", @"MailboxGuid", @"mailboxGuid", @"Messages", @"messages", @"Folders", @"folders", @"Calendar", @"calendar", @"Calendars", @"calendars", @"CalendarGroups", @"calendarGroups", @"CalendarView", @"calendarView", @"Events", @"events", @"Contacts", @"contacts", @"ContactFolders", @"contactFolders", @"RootFolder", @"rootFolder", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.User";
        
        
		_messages = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_folders = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_calendars = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_calendarGroups = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_calendarView = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_events = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_contacts = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_contactFolders = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_displayName = [dic objectForKey: @"DisplayName"] != nil ? [[dic objectForKey: @"DisplayName"] copy] : _displayName;
		_alias = [dic objectForKey: @"Alias"] != nil ? [[dic objectForKey: @"Alias"] copy] : _alias;
		_mailboxGuid = [dic objectForKey: @"MailboxGuid"] != nil ? [[dic objectForKey: @"MailboxGuid"] copy] : _mailboxGuid;

        if([dic objectForKey: @"Messages"] != [NSNull null]){
            _messages = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Messages"] count]];
            
            for (id object in [dic objectForKey: @"Messages"]) {
                [_messages addObject:[[MSOutlookMessage alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Folders"] != [NSNull null]){
            _folders = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Folders"] count]];
            
            for (id object in [dic objectForKey: @"Folders"]) {
                [_folders addObject:[[MSOutlookFolder alloc] initWithDictionary: object]];
            }
        }
        
		_calendar = [dic objectForKey: @"Calendar"] != nil ? [[MSOutlookCalendar alloc] initWithDictionary: [dic objectForKey: @"Calendar"]] : _calendar;

        if([dic objectForKey: @"Calendars"] != [NSNull null]){
            _calendars = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Calendars"] count]];
            
            for (id object in [dic objectForKey: @"Calendars"]) {
                [_calendars addObject:[[MSOutlookCalendar alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"CalendarGroups"] != [NSNull null]){
            _calendarGroups = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"CalendarGroups"] count]];
            
            for (id object in [dic objectForKey: @"CalendarGroups"]) {
                [_calendarGroups addObject:[[MSOutlookCalendarGroup alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"CalendarView"] != [NSNull null]){
            _calendarView = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"CalendarView"] count]];
            
            for (id object in [dic objectForKey: @"CalendarView"]) {
                [_calendarView addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Events"] != [NSNull null]){
            _events = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Events"] count]];
            
            for (id object in [dic objectForKey: @"Events"]) {
                [_events addObject:[[MSOutlookEvent alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"Contacts"] != [NSNull null]){
            _contacts = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Contacts"] count]];
            
            for (id object in [dic objectForKey: @"Contacts"]) {
                [_contacts addObject:[[MSOutlookContact alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ContactFolders"] != [NSNull null]){
            _contactFolders = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ContactFolders"] count]];
            
            for (id object in [dic objectForKey: @"ContactFolders"]) {
                [_contactFolders addObject:[[MSOutlookContactFolder alloc] initWithDictionary: object]];
            }
        }
        
		_rootFolder = [dic objectForKey: @"RootFolder"] != nil ? [[MSOutlookFolder alloc] initWithDictionary: [dic objectForKey: @"RootFolder"]] : _rootFolder;
		self._id = [dic objectForKey: @"Id"] != nil ? [[dic objectForKey: @"Id"] copy] : self._id;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.displayName copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"DisplayName"];}
	{id curVal = [self.alias copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Alias"];}
	{id curVal = [self.mailboxGuid copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"MailboxGuid"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Messages"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Folders"];}
	{id curVal = [self.calendar toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Calendar"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Calendars"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarGroups"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"CalendarView"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Events"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Contacts"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ContactFolders"];}
	{id curVal = [self.rootFolder toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"RootFolder"];}
	{id curVal = [self._id copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.User" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"DisplayName"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"DisplayName"];
    }
    }
	{id curVal = self.alias;
    if([self.updatedValues containsObject:@"Alias"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Alias"];
    }
    }
	{id curVal = self.mailboxGuid;
    if([self.updatedValues containsObject:@"MailboxGuid"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"MailboxGuid"];
    }
    }
	{id curVal = self.messages;
    if([self.updatedValues containsObject:@"Messages"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Messages"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.folders;
    if([self.updatedValues containsObject:@"Folders"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Folders"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"Calendar"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendar"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Calendar"];
            }
        
            }}
	{id curVal = self.calendars;
    if([self.updatedValues containsObject:@"Calendars"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Calendars"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.calendarGroups;
    if([self.updatedValues containsObject:@"CalendarGroups"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"CalendarGroups"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"CalendarView"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"CalendarView"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"Events"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Events"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.contacts;
    if([self.updatedValues containsObject:@"Contacts"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Contacts"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.contactFolders;
    if([self.updatedValues containsObject:@"ContactFolders"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ContactFolders"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.rootFolder;
    if([self.updatedValues containsObject:@"RootFolder"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"RootFolder"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"RootFolder"];
            }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
    }
    }
    return dic;
}


/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"DisplayName"];
}
       
/** Setter implementation for property alias
 *
 */
- (void) setAlias: (NSString *) value {
    _alias = value;
    [self valueChangedFor:@"Alias"];
}
       
/** Setter implementation for property mailboxGuid
 *
 */
- (void) setMailboxGuid: (NSString *) value {
    _mailboxGuid = value;
    [self valueChangedFor:@"MailboxGuid"];
}
       
/** Setter implementation for property messages
 *
 */
- (void) setMessages: (NSMutableArray *) value {
    _messages = value;
    [self valueChangedFor:@"Messages"];
}
       
/** Setter implementation for property folders
 *
 */
- (void) setFolders: (NSMutableArray *) value {
    _folders = value;
    [self valueChangedFor:@"Folders"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSOutlookCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"Calendar"];
}
       
/** Setter implementation for property calendars
 *
 */
- (void) setCalendars: (NSMutableArray *) value {
    _calendars = value;
    [self valueChangedFor:@"Calendars"];
}
       
/** Setter implementation for property calendarGroups
 *
 */
- (void) setCalendarGroups: (NSMutableArray *) value {
    _calendarGroups = value;
    [self valueChangedFor:@"CalendarGroups"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"CalendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"Events"];
}
       
/** Setter implementation for property contacts
 *
 */
- (void) setContacts: (NSMutableArray *) value {
    _contacts = value;
    [self valueChangedFor:@"Contacts"];
}
       
/** Setter implementation for property contactFolders
 *
 */
- (void) setContactFolders: (NSMutableArray *) value {
    _contactFolders = value;
    [self valueChangedFor:@"ContactFolders"];
}
       
/** Setter implementation for property rootFolder
 *
 */
- (void) setRootFolder: (MSOutlookFolder *) value {
    _rootFolder = value;
    [self valueChangedFor:@"RootFolder"];
}
       

@end
