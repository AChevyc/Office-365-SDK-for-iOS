/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"



/** Implementation for MSOutlookMessage
 *
 */
@implementation MSOutlookMessage


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"DateTimeReceived", @"dateTimeReceived", @"DateTimeSent", @"dateTimeSent", @"HasAttachments", @"hasAttachments", @"Subject", @"subject", @"Body", @"body", @"BodyPreview", @"bodyPreview", @"Importance", @"importance", @"ParentFolderId", @"parentFolderId", @"Sender", @"sender", @"From", @"from", @"ToRecipients", @"toRecipients", @"CcRecipients", @"ccRecipients", @"BccRecipients", @"bccRecipients", @"ReplyTo", @"replyTo", @"ConversationId", @"conversationId", @"UniqueBody", @"uniqueBody", @"IsDeliveryReceiptRequested", @"isDeliveryReceiptRequested", @"IsReadReceiptRequested", @"isReadReceiptRequested", @"IsRead", @"isRead", @"IsDraft", @"isDraft", @"WebLink", @"webLink", @"Attachments", @"attachments", @"DateTimeCreated", @"dateTimeCreated", @"DateTimeLastModified", @"dateTimeLastModified", @"ChangeKey", @"changeKey", @"Categories", @"categories", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.Message";
        
        
		_toRecipients = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_ccRecipients = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_bccRecipients = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_replyTo = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_attachments = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_dateTimeReceived = [dic objectForKey: @"DateTimeReceived"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeReceived"]] : _dateTimeReceived;
		_dateTimeSent = [dic objectForKey: @"DateTimeSent"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeSent"]] : _dateTimeSent;
		_hasAttachments = [dic objectForKey: @"HasAttachments"] != nil ? [[dic objectForKey: @"HasAttachments"] boolValue] : _hasAttachments;
		_subject = [dic objectForKey: @"Subject"] != nil ? [[dic objectForKey: @"Subject"] copy] : _subject;
		_body = [dic objectForKey: @"Body"] != nil ? [[MSOutlookItemBody alloc] initWithDictionary: [dic objectForKey: @"Body"]] : _body;
		_bodyPreview = [dic objectForKey: @"BodyPreview"] != nil ? [[dic objectForKey: @"BodyPreview"] copy] : _bodyPreview;
		_importance = [dic objectForKey: @"Importance"] != nil ? [MSOutlookImportanceSerializer fromString:[dic objectForKey: @"Importance"]] : _importance;
		_parentFolderId = [dic objectForKey: @"ParentFolderId"] != nil ? [[dic objectForKey: @"ParentFolderId"] copy] : _parentFolderId;
		_sender = [dic objectForKey: @"Sender"] != nil ? [[MSOutlookRecipient alloc] initWithDictionary: [dic objectForKey: @"Sender"]] : _sender;
		_from = [dic objectForKey: @"From"] != nil ? [[MSOutlookRecipient alloc] initWithDictionary: [dic objectForKey: @"From"]] : _from;

        if([dic objectForKey: @"ToRecipients"] != [NSNull null]){
            _toRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ToRecipients"] count]];
            
            for (id object in [dic objectForKey: @"ToRecipients"]) {
                [_toRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"CcRecipients"] != [NSNull null]){
            _ccRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"CcRecipients"] count]];
            
            for (id object in [dic objectForKey: @"CcRecipients"]) {
                [_ccRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"BccRecipients"] != [NSNull null]){
            _bccRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"BccRecipients"] count]];
            
            for (id object in [dic objectForKey: @"BccRecipients"]) {
                [_bccRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ReplyTo"] != [NSNull null]){
            _replyTo = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ReplyTo"] count]];
            
            for (id object in [dic objectForKey: @"ReplyTo"]) {
                [_replyTo addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        
		_conversationId = [dic objectForKey: @"ConversationId"] != nil ? [[dic objectForKey: @"ConversationId"] copy] : _conversationId;
		_uniqueBody = [dic objectForKey: @"UniqueBody"] != nil ? [[MSOutlookItemBody alloc] initWithDictionary: [dic objectForKey: @"UniqueBody"]] : _uniqueBody;
		_isDeliveryReceiptRequested = [dic objectForKey: @"IsDeliveryReceiptRequested"] != nil ? [[dic objectForKey: @"IsDeliveryReceiptRequested"] boolValue] : _isDeliveryReceiptRequested;
		_isReadReceiptRequested = [dic objectForKey: @"IsReadReceiptRequested"] != nil ? [[dic objectForKey: @"IsReadReceiptRequested"] boolValue] : _isReadReceiptRequested;
		_isRead = [dic objectForKey: @"IsRead"] != nil ? [[dic objectForKey: @"IsRead"] boolValue] : _isRead;
		_isDraft = [dic objectForKey: @"IsDraft"] != nil ? [[dic objectForKey: @"IsDraft"] boolValue] : _isDraft;
		_webLink = [dic objectForKey: @"WebLink"] != nil ? [[dic objectForKey: @"WebLink"] copy] : _webLink;

        if([dic objectForKey: @"Attachments"] != [NSNull null]){
            _attachments = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Attachments"] count]];
            
            for (id object in [dic objectForKey: @"Attachments"]) {
                [_attachments addObject:[[MSOutlookAttachment alloc] initWithDictionary: object]];
            }
        }
        
		self.dateTimeCreated = [dic objectForKey: @"DateTimeCreated"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeCreated"]] : self.dateTimeCreated;
		self.dateTimeLastModified = [dic objectForKey: @"DateTimeLastModified"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeLastModified"]] : self.dateTimeLastModified;
		self.changeKey = [dic objectForKey: @"ChangeKey"] != nil ? [[dic objectForKey: @"ChangeKey"] copy] : self.changeKey;

        if([dic objectForKey: @"Categories"] != [NSNull null]){
            self.categories = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Categories"] count]];
            
            for (id object in [dic objectForKey: @"Categories"]) {
                [self.categories addObject:[object copy]];
            }
        }
        
		self._id = [dic objectForKey: @"Id"] != nil ? [[dic objectForKey: @"Id"] copy] : self._id;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeReceived]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeReceived"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeSent]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeSent"];}
	{id curVal = (self.hasAttachments?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"HasAttachments"];}
	{id curVal = [self.subject copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Subject"];}
	{id curVal = [self.body toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Body"];}
	{id curVal = [self.bodyPreview copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"BodyPreview"];}
	{id curVal = [MSOutlookImportanceSerializer toString:self.importance]; if (curVal!=nil) [dic setValue: curVal forKey: @"Importance"];}
	{id curVal = [self.parentFolderId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ParentFolderId"];}
	{id curVal = [self.sender toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Sender"];}
	{id curVal = [self.from toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"From"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ToRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"CcRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"BccRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ReplyTo"];}
	{id curVal = [self.conversationId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ConversationId"];}
	{id curVal = [self.uniqueBody toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"UniqueBody"];}
	{id curVal = (self.isDeliveryReceiptRequested?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsDeliveryReceiptRequested"];}
	{id curVal = (self.isReadReceiptRequested?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsReadReceiptRequested"];}
	{id curVal = (self.isRead?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsRead"];}
	{id curVal = (self.isDraft?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsDraft"];}
	{id curVal = [self.webLink copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"WebLink"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Attachments"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeCreated]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeCreated"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeLastModified]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeLastModified"];}
	{id curVal = [self.changeKey copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ChangeKey"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Categories"];}
	{id curVal = [self._id copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.Message" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.dateTimeReceived;
    if([self.updatedValues containsObject:@"DateTimeReceived"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeReceived"];
    }
    }
	{id curVal = self.dateTimeSent;
    if([self.updatedValues containsObject:@"DateTimeSent"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeSent"];
    }
    }
	{id curVal = self.hasAttachments;
    if([self.updatedValues containsObject:@"HasAttachments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"HasAttachments"];
    }
    }
	{id curVal = self.subject;
    if([self.updatedValues containsObject:@"Subject"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Subject"];
    }
    }
	{id curVal = self.body;
    if([self.updatedValues containsObject:@"Body"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Body"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Body"];
            }
        
            }}
	{id curVal = self.bodyPreview;
    if([self.updatedValues containsObject:@"BodyPreview"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"BodyPreview"];
    }
    }
	{id curVal = self.importance;
    if([self.updatedValues containsObject:@"Importance"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOutlookImportanceSerializer toString:curVal] forKey: @"Importance"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Importance"];
            }
        
            }}
	{id curVal = self.parentFolderId;
    if([self.updatedValues containsObject:@"ParentFolderId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ParentFolderId"];
    }
    }
	{id curVal = self.sender;
    if([self.updatedValues containsObject:@"Sender"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Sender"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Sender"];
            }
        
            }}
	{id curVal = self.from;
    if([self.updatedValues containsObject:@"From"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"From"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"From"];
            }
        
            }}
	{id curVal = self.toRecipients;
    if([self.updatedValues containsObject:@"ToRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ToRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ccRecipients;
    if([self.updatedValues containsObject:@"CcRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"CcRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.bccRecipients;
    if([self.updatedValues containsObject:@"BccRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"BccRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.replyTo;
    if([self.updatedValues containsObject:@"ReplyTo"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ReplyTo"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.conversationId;
    if([self.updatedValues containsObject:@"ConversationId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ConversationId"];
    }
    }
	{id curVal = self.uniqueBody;
    if([self.updatedValues containsObject:@"UniqueBody"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"UniqueBody"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"UniqueBody"];
            }
        
            }}
	{id curVal = self.isDeliveryReceiptRequested;
    if([self.updatedValues containsObject:@"IsDeliveryReceiptRequested"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsDeliveryReceiptRequested"];
    }
    }
	{id curVal = self.isReadReceiptRequested;
    if([self.updatedValues containsObject:@"IsReadReceiptRequested"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsReadReceiptRequested"];
    }
    }
	{id curVal = self.isRead;
    if([self.updatedValues containsObject:@"IsRead"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsRead"];
    }
    }
	{id curVal = self.isDraft;
    if([self.updatedValues containsObject:@"IsDraft"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsDraft"];
    }
    }
	{id curVal = self.webLink;
    if([self.updatedValues containsObject:@"WebLink"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"WebLink"];
    }
    }
	{id curVal = self.attachments;
    if([self.updatedValues containsObject:@"Attachments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Attachments"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.dateTimeCreated;
    if([self.updatedValues containsObject:@"DateTimeCreated"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeCreated"];
    }
    }
	{id curVal = self.dateTimeLastModified;
    if([self.updatedValues containsObject:@"DateTimeLastModified"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeLastModified"];
    }
    }
	{id curVal = self.changeKey;
    if([self.updatedValues containsObject:@"ChangeKey"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ChangeKey"];
    }
    }
	{id curVal = self.categories;
    if([self.updatedValues containsObject:@"Categories"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Categories"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
    }
    }
    return dic;
}


/** Setter implementation for property dateTimeReceived
 *
 */
- (void) setDateTimeReceived: (NSDate *) value {
    _dateTimeReceived = value;
    [self valueChangedFor:@"DateTimeReceived"];
}
       
/** Setter implementation for property dateTimeSent
 *
 */
- (void) setDateTimeSent: (NSDate *) value {
    _dateTimeSent = value;
    [self valueChangedFor:@"DateTimeSent"];
}
       
/** Setter implementation for property hasAttachments
 *
 */
- (void) setHasAttachments: (bool) value {
    _hasAttachments = value;
    [self valueChangedFor:@"HasAttachments"];
}
       
/** Setter implementation for property subject
 *
 */
- (void) setSubject: (NSString *) value {
    _subject = value;
    [self valueChangedFor:@"Subject"];
}
       
/** Setter implementation for property body
 *
 */
- (void) setBody: (MSOutlookItemBody *) value {
    _body = value;
    [self valueChangedFor:@"Body"];
}
       
/** Setter implementation for property bodyPreview
 *
 */
- (void) setBodyPreview: (NSString *) value {
    _bodyPreview = value;
    [self valueChangedFor:@"BodyPreview"];
}
       
/** Setter implementation for property importance
 *
 */
- (void) setImportance: (MSOutlookImportance) value {
    _importance = value;
    [self valueChangedFor:@"Importance"];
}
       

- (void)setImportanceString:(NSString *)string {
        
    _importance = [MSOutlookImportanceSerializer fromString:string];
    [self valueChangedFor:@"Importance"]; 
}

/** Setter implementation for property parentFolderId
 *
 */
- (void) setParentFolderId: (NSString *) value {
    _parentFolderId = value;
    [self valueChangedFor:@"ParentFolderId"];
}
       
/** Setter implementation for property sender
 *
 */
- (void) setSender: (MSOutlookRecipient *) value {
    _sender = value;
    [self valueChangedFor:@"Sender"];
}
       
/** Setter implementation for property from
 *
 */
- (void) setFrom: (MSOutlookRecipient *) value {
    _from = value;
    [self valueChangedFor:@"From"];
}
       
/** Setter implementation for property toRecipients
 *
 */
- (void) setToRecipients: (NSMutableArray *) value {
    _toRecipients = value;
    [self valueChangedFor:@"ToRecipients"];
}
       
/** Setter implementation for property ccRecipients
 *
 */
- (void) setCcRecipients: (NSMutableArray *) value {
    _ccRecipients = value;
    [self valueChangedFor:@"CcRecipients"];
}
       
/** Setter implementation for property bccRecipients
 *
 */
- (void) setBccRecipients: (NSMutableArray *) value {
    _bccRecipients = value;
    [self valueChangedFor:@"BccRecipients"];
}
       
/** Setter implementation for property replyTo
 *
 */
- (void) setReplyTo: (NSMutableArray *) value {
    _replyTo = value;
    [self valueChangedFor:@"ReplyTo"];
}
       
/** Setter implementation for property conversationId
 *
 */
- (void) setConversationId: (NSString *) value {
    _conversationId = value;
    [self valueChangedFor:@"ConversationId"];
}
       
/** Setter implementation for property uniqueBody
 *
 */
- (void) setUniqueBody: (MSOutlookItemBody *) value {
    _uniqueBody = value;
    [self valueChangedFor:@"UniqueBody"];
}
       
/** Setter implementation for property isDeliveryReceiptRequested
 *
 */
- (void) setIsDeliveryReceiptRequested: (bool) value {
    _isDeliveryReceiptRequested = value;
    [self valueChangedFor:@"IsDeliveryReceiptRequested"];
}
       
/** Setter implementation for property isReadReceiptRequested
 *
 */
- (void) setIsReadReceiptRequested: (bool) value {
    _isReadReceiptRequested = value;
    [self valueChangedFor:@"IsReadReceiptRequested"];
}
       
/** Setter implementation for property isRead
 *
 */
- (void) setIsRead: (bool) value {
    _isRead = value;
    [self valueChangedFor:@"IsRead"];
}
       
/** Setter implementation for property isDraft
 *
 */
- (void) setIsDraft: (bool) value {
    _isDraft = value;
    [self valueChangedFor:@"IsDraft"];
}
       
/** Setter implementation for property webLink
 *
 */
- (void) setWebLink: (NSString *) value {
    _webLink = value;
    [self valueChangedFor:@"WebLink"];
}
       
/** Setter implementation for property attachments
 *
 */
- (void) setAttachments: (NSMutableArray *) value {
    _attachments = value;
    [self valueChangedFor:@"Attachments"];
}
       

@end
