/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"



/** Implementation for MSOutlookEventMessage
 *
 */
@implementation MSOutlookEventMessage


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"MeetingMessageType", @"meetingMessageType", @"Event", @"event", @"DateTimeReceived", @"dateTimeReceived", @"DateTimeSent", @"dateTimeSent", @"HasAttachments", @"hasAttachments", @"Subject", @"subject", @"Body", @"body", @"BodyPreview", @"bodyPreview", @"Importance", @"importance", @"ParentFolderId", @"parentFolderId", @"Sender", @"sender", @"From", @"from", @"ToRecipients", @"toRecipients", @"CcRecipients", @"ccRecipients", @"BccRecipients", @"bccRecipients", @"ReplyTo", @"replyTo", @"ConversationId", @"conversationId", @"UniqueBody", @"uniqueBody", @"IsDeliveryReceiptRequested", @"isDeliveryReceiptRequested", @"IsReadReceiptRequested", @"isReadReceiptRequested", @"IsRead", @"isRead", @"IsDraft", @"isDraft", @"WebLink", @"webLink", @"Attachments", @"attachments", @"DateTimeCreated", @"dateTimeCreated", @"DateTimeLastModified", @"dateTimeLastModified", @"ChangeKey", @"changeKey", @"Categories", @"categories", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.EventMessage";
        
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
    
		_meetingMessageType = [dic objectForKey: @"MeetingMessageType"] != nil ? [MSOutlookMeetingMessageTypeSerializer fromString:[dic objectForKey: @"MeetingMessageType"]] : _meetingMessageType;
		_event = [dic objectForKey: @"Event"] != nil ? [[MSOutlookEvent alloc] initWithDictionary: [dic objectForKey: @"Event"]] : _event;
		self.dateTimeReceived = [dic objectForKey: @"DateTimeReceived"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeReceived"]] : self.dateTimeReceived;
		self.dateTimeSent = [dic objectForKey: @"DateTimeSent"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeSent"]] : self.dateTimeSent;
		self.hasAttachments = [dic objectForKey: @"HasAttachments"] != nil ? [[dic objectForKey: @"HasAttachments"] boolValue] : self.hasAttachments;
		self.subject = [dic objectForKey: @"Subject"] != nil ? [[dic objectForKey: @"Subject"] copy] : self.subject;
		self.body = [dic objectForKey: @"Body"] != nil ? [[MSOutlookItemBody alloc] initWithDictionary: [dic objectForKey: @"Body"]] : self.body;
		self.bodyPreview = [dic objectForKey: @"BodyPreview"] != nil ? [[dic objectForKey: @"BodyPreview"] copy] : self.bodyPreview;
		self.importance = [dic objectForKey: @"Importance"] != nil ? [MSOutlookImportanceSerializer fromString:[dic objectForKey: @"Importance"]] : self.importance;
		self.parentFolderId = [dic objectForKey: @"ParentFolderId"] != nil ? [[dic objectForKey: @"ParentFolderId"] copy] : self.parentFolderId;
		self.sender = [dic objectForKey: @"Sender"] != nil ? [[MSOutlookRecipient alloc] initWithDictionary: [dic objectForKey: @"Sender"]] : self.sender;
		self.from = [dic objectForKey: @"From"] != nil ? [[MSOutlookRecipient alloc] initWithDictionary: [dic objectForKey: @"From"]] : self.from;

        if([dic objectForKey: @"ToRecipients"] != [NSNull null]){
            self.toRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ToRecipients"] count]];
            
            for (id object in [dic objectForKey: @"ToRecipients"]) {
                [self.toRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"CcRecipients"] != [NSNull null]){
            self.ccRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"CcRecipients"] count]];
            
            for (id object in [dic objectForKey: @"CcRecipients"]) {
                [self.ccRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"BccRecipients"] != [NSNull null]){
            self.bccRecipients = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"BccRecipients"] count]];
            
            for (id object in [dic objectForKey: @"BccRecipients"]) {
                [self.bccRecipients addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        

        if([dic objectForKey: @"ReplyTo"] != [NSNull null]){
            self.replyTo = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"ReplyTo"] count]];
            
            for (id object in [dic objectForKey: @"ReplyTo"]) {
                [self.replyTo addObject:[[MSOutlookRecipient alloc] initWithDictionary: object]];
            }
        }
        
		self.conversationId = [dic objectForKey: @"ConversationId"] != nil ? [[dic objectForKey: @"ConversationId"] copy] : self.conversationId;
		self.uniqueBody = [dic objectForKey: @"UniqueBody"] != nil ? [[MSOutlookItemBody alloc] initWithDictionary: [dic objectForKey: @"UniqueBody"]] : self.uniqueBody;
		self.isDeliveryReceiptRequested = [dic objectForKey: @"IsDeliveryReceiptRequested"] != nil ? [[dic objectForKey: @"IsDeliveryReceiptRequested"] boolValue] : self.isDeliveryReceiptRequested;
		self.isReadReceiptRequested = [dic objectForKey: @"IsReadReceiptRequested"] != nil ? [[dic objectForKey: @"IsReadReceiptRequested"] boolValue] : self.isReadReceiptRequested;
		self.isRead = [dic objectForKey: @"IsRead"] != nil ? [[dic objectForKey: @"IsRead"] boolValue] : self.isRead;
		self.isDraft = [dic objectForKey: @"IsDraft"] != nil ? [[dic objectForKey: @"IsDraft"] boolValue] : self.isDraft;
		self.webLink = [dic objectForKey: @"WebLink"] != nil ? [[dic objectForKey: @"WebLink"] copy] : self.webLink;

        if([dic objectForKey: @"Attachments"] != [NSNull null]){
            self.attachments = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Attachments"] count]];
            
            for (id object in [dic objectForKey: @"Attachments"]) {
                [self.attachments addObject:[[MSOutlookAttachment alloc] initWithDictionary: object]];
            }
        }
        
		self.dateTimeCreated = [dic objectForKey: @"DateTimeCreated"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeCreated"]] : self.dateTimeCreated;
		self.dateTimeLastModified = [dic objectForKey: @"DateTimeLastModified"] != nil ? [MSOrcObjectizer dateFromString:[dic objectForKey: @"DateTimeLastModified"]] : self.dateTimeLastModified;
		self.changeKey = [dic objectForKey: @"ChangeKey"] != nil ? [[dic objectForKey: @"ChangeKey"] copy] : self.changeKey;

        if([dic objectForKey: @"Categories"] != [NSNull null]){
            self.categories = [NSMutableArray arrayWithCapacity:[[dic objectForKey: @"Categories"] count]];
            
            for (id object in [dic objectForKey: @"Categories"]) {
                [self.categories addObject:[object copy]];
            }
        }
        
		self._id = [dic objectForKey: @"Id"] != nil ? [[dic objectForKey: @"Id"] copy] : self._id;

    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [MSOutlookMeetingMessageTypeSerializer toString:self.meetingMessageType]; if (curVal!=nil) [dic setValue: curVal forKey: @"MeetingMessageType"];}
	{id curVal = [self.event toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Event"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeReceived]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeReceived"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeSent]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeSent"];}
	{id curVal = (self.hasAttachments?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"HasAttachments"];}
	{id curVal = [self.subject copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Subject"];}
	{id curVal = [self.body toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Body"];}
	{id curVal = [self.bodyPreview copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"BodyPreview"];}
	{id curVal = [MSOutlookImportanceSerializer toString:self.importance]; if (curVal!=nil) [dic setValue: curVal forKey: @"Importance"];}
	{id curVal = [self.parentFolderId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ParentFolderId"];}
	{id curVal = [self.sender toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"Sender"];}
	{id curVal = [self.from toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"From"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ToRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"CcRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"BccRecipients"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"ReplyTo"];}
	{id curVal = [self.conversationId copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ConversationId"];}
	{id curVal = [self.uniqueBody toDictionary]; if (curVal!=nil) [dic setValue: curVal forKey: @"UniqueBody"];}
	{id curVal = (self.isDeliveryReceiptRequested?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsDeliveryReceiptRequested"];}
	{id curVal = (self.isReadReceiptRequested?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsReadReceiptRequested"];}
	{id curVal = (self.isRead?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsRead"];}
	{id curVal = (self.isDraft?@"true":@"false"); if (curVal!=nil) [dic setValue: curVal forKey: @"IsDraft"];}
	{id curVal = [self.webLink copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"WebLink"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Attachments"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeCreated]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeCreated"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.dateTimeLastModified]; if (curVal!=nil) [dic setValue: curVal forKey: @"DateTimeLastModified"];}
	{id curVal = [self.changeKey copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"ChangeKey"];}
	{id curVal = nil/*MUST SERIALIZE COLLECTION!*/; if (curVal!=nil) [dic setValue: curVal forKey: @"Categories"];}
	{id curVal = [self._id copy]; if (curVal!=nil) [dic setValue: curVal forKey: @"Id"];}
    [dic setValue: @"#Microsoft.OutlookServices.EventMessage" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.meetingMessageType;
    if([self.updatedValues containsObject:@"MeetingMessageType"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOutlookMeetingMessageTypeSerializer toString:curVal] forKey: @"MeetingMessageType"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"MeetingMessageType"];
            }
        
            }}
	{id curVal = self.event;
    if([self.updatedValues containsObject:@"Event"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Event"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Event"];
            }
        
            }}
	{id curVal = self.dateTimeReceived;
    if([self.updatedValues containsObject:@"DateTimeReceived"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeReceived"];
    }
    }
	{id curVal = self.dateTimeSent;
    if([self.updatedValues containsObject:@"DateTimeSent"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeSent"];
    }
    }
	{id curVal = self.hasAttachments;
    if([self.updatedValues containsObject:@"HasAttachments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"HasAttachments"];
    }
    }
	{id curVal = self.subject;
    if([self.updatedValues containsObject:@"Subject"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Subject"];
    }
    }
	{id curVal = self.body;
    if([self.updatedValues containsObject:@"Body"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Body"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Body"];
            }
        
            }}
	{id curVal = self.bodyPreview;
    if([self.updatedValues containsObject:@"BodyPreview"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"BodyPreview"];
    }
    }
	{id curVal = self.importance;
    if([self.updatedValues containsObject:@"Importance"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOutlookImportanceSerializer toString:curVal] forKey: @"Importance"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Importance"];
            }
        
            }}
	{id curVal = self.parentFolderId;
    if([self.updatedValues containsObject:@"ParentFolderId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ParentFolderId"];
    }
    }
	{id curVal = self.sender;
    if([self.updatedValues containsObject:@"Sender"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Sender"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"Sender"];
            }
        
            }}
	{id curVal = self.from;
    if([self.updatedValues containsObject:@"From"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"From"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"From"];
            }
        
            }}
	{id curVal = self.toRecipients;
    if([self.updatedValues containsObject:@"ToRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ToRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.ccRecipients;
    if([self.updatedValues containsObject:@"CcRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"CcRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.bccRecipients;
    if([self.updatedValues containsObject:@"BccRecipients"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"BccRecipients"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.replyTo;
    if([self.updatedValues containsObject:@"ReplyTo"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"ReplyTo"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.conversationId;
    if([self.updatedValues containsObject:@"ConversationId"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ConversationId"];
    }
    }
	{id curVal = self.uniqueBody;
    if([self.updatedValues containsObject:@"UniqueBody"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"UniqueBody"];
    }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"UniqueBody"];
            }
        
            }}
	{id curVal = self.isDeliveryReceiptRequested;
    if([self.updatedValues containsObject:@"IsDeliveryReceiptRequested"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsDeliveryReceiptRequested"];
    }
    }
	{id curVal = self.isReadReceiptRequested;
    if([self.updatedValues containsObject:@"IsReadReceiptRequested"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsReadReceiptRequested"];
    }
    }
	{id curVal = self.isRead;
    if([self.updatedValues containsObject:@"IsRead"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsRead"];
    }
    }
	{id curVal = self.isDraft;
    if([self.updatedValues containsObject:@"IsDraft"])
    {
        [dic setValue: curVal==nil?[NSNull null]:(curVal?@"true":@"false") forKey: @"IsDraft"];
    }
    }
	{id curVal = self.webLink;
    if([self.updatedValues containsObject:@"WebLink"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"WebLink"];
    }
    }
	{id curVal = self.attachments;
    if([self.updatedValues containsObject:@"Attachments"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"Attachments"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self.dateTimeCreated;
    if([self.updatedValues containsObject:@"DateTimeCreated"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeCreated"];
    }
    }
	{id curVal = self.dateTimeLastModified;
    if([self.updatedValues containsObject:@"DateTimeLastModified"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"DateTimeLastModified"];
    }
    }
	{id curVal = self.changeKey;
    if([self.updatedValues containsObject:@"ChangeKey"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"ChangeKey"];
    }
    }
	{id curVal = self.categories;
    if([self.updatedValues containsObject:@"Categories"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Categories"];
    }
        else
    {
                
        //Check collection change:
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"Id"])
    {
        [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"Id"];
    }
    }
    return dic;
}


/** Setter implementation for property meetingMessageType
 *
 */
- (void) setMeetingMessageType: (MSOutlookMeetingMessageType) value {
    _meetingMessageType = value;
    [self valueChangedFor:@"MeetingMessageType"];
}
       

- (void)setMeetingMessageTypeString:(NSString *)string {
        
    _meetingMessageType = [MSOutlookMeetingMessageTypeSerializer fromString:string];
    [self valueChangedFor:@"MeetingMessageType"]; 
}

/** Setter implementation for property event
 *
 */
- (void) setEvent: (MSOutlookEvent *) value {
    _event = value;
    [self valueChangedFor:@"Event"];
}
       

@end
