/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSOutlookModels.h"



/** Implementation for MSOutlookEvent
 *
 */
@implementation MSOutlookEvent


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
    if(_$$$_$$$propertiesNamesMappings==nil){
    _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"Subject", @"subject", @"Body", @"body", @"BodyPreview", @"bodyPreview", @"Importance", @"importance", @"HasAttachments", @"hasAttachments", @"Start", @"start", @"OriginalStart", @"originalStart", @"StartTimeZone", @"startTimeZone", @"End", @"end", @"EndTimeZone", @"endTimeZone", @"Reminder", @"reminder", @"Location", @"location", @"ShowAs", @"showAs", @"ResponseStatus", @"responseStatus", @"IsAllDay", @"isAllDay", @"IsCancelled", @"isCancelled", @"IsOrganizer", @"isOrganizer", @"ResponseRequested", @"responseRequested", @"Type", @"type", @"SeriesMasterId", @"seriesMasterId", @"Attendees", @"attendees", @"Recurrence", @"recurrence", @"Organizer", @"organizer", @"iCalUId", @"iCalUId", @"WebLink", @"webLink", @"Attachments", @"attachments", @"Calendar", @"calendar", @"Instances", @"instances", @"ChangeKey", @"changeKey", @"Categories", @"categories", @"DateTimeCreated", @"dateTimeCreated", @"DateTimeLastModified", @"dateTimeLastModified", @"Id", @"_id", nil];
    
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.OutlookServices.Event";
        
        
		_attendees = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_attachments = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
		_instances = [[NSMutableArray alloc] initWithCollectionType:@"NSMutableArray"];
    }

	return self;
}

/** Setter implementation for property subject
 *
 */
- (void) setSubject: (NSString *) value {
    _subject = value;
    [self valueChanged:_subject forProperty:@"Subject"];
}
       
/** Setter implementation for property body
 *
 */
- (void) setBody: (MSOutlookItemBody *) value {
    _body = value;
    [self valueChanged:_body forProperty:@"Body"];
}
       
/** Setter implementation for property bodyPreview
 *
 */
- (void) setBodyPreview: (NSString *) value {
    _bodyPreview = value;
    [self valueChanged:_bodyPreview forProperty:@"BodyPreview"];
}
       
/** Setter implementation for property importance
 *
 */
- (void) setImportance: (MSOutlookImportance) value {
    _importance = value;
    [self valueChangedForInt:_importance forProperty:@"Importance"];
}
       

- (void)setImportanceString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookImportanceLow], @"Low", [NSNumber numberWithInt:MSOutlookImportanceNormal], @"Normal", [NSNumber numberWithInt:MSOutlookImportanceHigh], @"High",
            nil        
        ];
    }
    
    self.importance = [stringMappings[value] intValue]; 
}

/** Setter implementation for property hasAttachments
 *
 */
- (void) setHasAttachments: (bool) value {
    _hasAttachments = value;
    [self valueChangedForBool:_hasAttachments forProperty:@"HasAttachments"];
}
       
/** Setter implementation for property start
 *
 */
- (void) setStart: (NSDate *) value {
    _start = value;
    [self valueChanged:_start forProperty:@"Start"];
}
       
/** Setter implementation for property originalStart
 *
 */
- (void) setOriginalStart: (NSDate *) value {
    _originalStart = value;
    [self valueChanged:_originalStart forProperty:@"OriginalStart"];
}
       
/** Setter implementation for property startTimeZone
 *
 */
- (void) setStartTimeZone: (NSString *) value {
    _startTimeZone = value;
    [self valueChanged:_startTimeZone forProperty:@"StartTimeZone"];
}
       
/** Setter implementation for property end
 *
 */
- (void) setEnd: (NSDate *) value {
    _end = value;
    [self valueChanged:_end forProperty:@"End"];
}
       
/** Setter implementation for property endTimeZone
 *
 */
- (void) setEndTimeZone: (NSString *) value {
    _endTimeZone = value;
    [self valueChanged:_endTimeZone forProperty:@"EndTimeZone"];
}
       
/** Setter implementation for property reminder
 *
 */
- (void) setReminder: (int) value {
    _reminder = value;
    [self valueChangedForInt:_reminder forProperty:@"Reminder"];
}
       
/** Setter implementation for property location
 *
 */
- (void) setLocation: (MSOutlookLocation *) value {
    _location = value;
    [self valueChanged:_location forProperty:@"Location"];
}
       
/** Setter implementation for property showAs
 *
 */
- (void) setShowAs: (MSOutlookFreeBusyStatus) value {
    _showAs = value;
    [self valueChangedForInt:_showAs forProperty:@"ShowAs"];
}
       

- (void)setShowAsString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookFreeBusyStatusFree], @"Free", [NSNumber numberWithInt:MSOutlookFreeBusyStatusTentative], @"Tentative", [NSNumber numberWithInt:MSOutlookFreeBusyStatusBusy], @"Busy", [NSNumber numberWithInt:MSOutlookFreeBusyStatusOof], @"Oof", [NSNumber numberWithInt:MSOutlookFreeBusyStatusWorkingElsewhere], @"WorkingElsewhere", [NSNumber numberWithInt:MSOutlookFreeBusyStatusUnknown], @"Unknown",
            nil        
        ];
    }
    
    self.showAs = [stringMappings[value] intValue]; 
}

/** Setter implementation for property responseStatus
 *
 */
- (void) setResponseStatus: (MSOutlookResponseStatus *) value {
    _responseStatus = value;
    [self valueChanged:_responseStatus forProperty:@"ResponseStatus"];
}
       
/** Setter implementation for property isAllDay
 *
 */
- (void) setIsAllDay: (bool) value {
    _isAllDay = value;
    [self valueChangedForBool:_isAllDay forProperty:@"IsAllDay"];
}
       
/** Setter implementation for property isCancelled
 *
 */
- (void) setIsCancelled: (bool) value {
    _isCancelled = value;
    [self valueChangedForBool:_isCancelled forProperty:@"IsCancelled"];
}
       
/** Setter implementation for property isOrganizer
 *
 */
- (void) setIsOrganizer: (bool) value {
    _isOrganizer = value;
    [self valueChangedForBool:_isOrganizer forProperty:@"IsOrganizer"];
}
       
/** Setter implementation for property responseRequested
 *
 */
- (void) setResponseRequested: (bool) value {
    _responseRequested = value;
    [self valueChangedForBool:_responseRequested forProperty:@"ResponseRequested"];
}
       
/** Setter implementation for property type
 *
 */
- (void) setType: (MSOutlookEventType) value {
    _type = value;
    [self valueChangedForInt:_type forProperty:@"Type"];
}
       

- (void)setTypeString:(NSString *)value {
    
    static NSDictionary *stringMappings=nil;
    
    if(stringMappings==nil)
    {
        stringMappings=[[NSDictionary alloc] initWithObjectsAndKeys:
         [NSNumber numberWithInt:MSOutlookEventTypeSingleInstance], @"SingleInstance", [NSNumber numberWithInt:MSOutlookEventTypeOccurrence], @"Occurrence", [NSNumber numberWithInt:MSOutlookEventTypeException], @"Exception", [NSNumber numberWithInt:MSOutlookEventTypeSeriesMaster], @"SeriesMaster",
            nil        
        ];
    }
    
    self.type = [stringMappings[value] intValue]; 
}

/** Setter implementation for property seriesMasterId
 *
 */
- (void) setSeriesMasterId: (NSString *) value {
    _seriesMasterId = value;
    [self valueChanged:_seriesMasterId forProperty:@"SeriesMasterId"];
}
       
/** Setter implementation for property attendees
 *
 */
- (void) setAttendees: (NSMutableArray *) value {
    _attendees = value;
    [self valueChanged:_attendees forProperty:@"Attendees"];
}
       
/** Setter implementation for property recurrence
 *
 */
- (void) setRecurrence: (MSOutlookPatternedRecurrence *) value {
    _recurrence = value;
    [self valueChanged:_recurrence forProperty:@"Recurrence"];
}
       
/** Setter implementation for property organizer
 *
 */
- (void) setOrganizer: (MSOutlookRecipient *) value {
    _organizer = value;
    [self valueChanged:_organizer forProperty:@"Organizer"];
}
       
/** Setter implementation for property iCalUId
 *
 */
- (void) setICalUId: (NSString *) value {
    _iCalUId = value;
    [self valueChanged:_iCalUId forProperty:@"iCalUId"];
}
       
/** Setter implementation for property webLink
 *
 */
- (void) setWebLink: (NSString *) value {
    _webLink = value;
    [self valueChanged:_webLink forProperty:@"WebLink"];
}
       
/** Setter implementation for property attachments
 *
 */
- (void) setAttachments: (NSMutableArray *) value {
    _attachments = value;
    [self valueChanged:_attachments forProperty:@"Attachments"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSOutlookCalendar *) value {
    _calendar = value;
    [self valueChanged:_calendar forProperty:@"Calendar"];
}
       
/** Setter implementation for property instances
 *
 */
- (void) setInstances: (NSMutableArray *) value {
    _instances = value;
    [self valueChanged:_instances forProperty:@"Instances"];
}
       

@end
