/*******************************************************************************
Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the MIT or Apache License; see LICENSE in the source repository
root for authoritative license information.ï»¿

**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
******************************************************************************/

#import "MSDirectoryServicesODataEntities.h"

@implementation MSDirectoryServicesDirectoryObjectFetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSODataExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[MSDirectoryServicesDirectoryObject class]]) {

		_operations = [[MSDirectoryServicesDirectoryObjectOperations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (NSURLSessionTask *)updateDirectoryObject:(id)entity callback:(void (^)(MSDirectoryServicesDirectoryObject *directoryObject, MSODataException *exception))callback {

	return [super updateEntity:entity callback:callback];
}

- (NSURLSessionTask *)deleteDirectoryObject:(void (^)(int status, MSODataException *exception))callback {

	return [super deleteWithCallback:callback];
}

- (MSDirectoryServicesDirectoryObjectFetcher *) getcreatedOnBehalfOf {

	 return [[MSDirectoryServicesDirectoryObjectFetcher alloc] initWithUrl:@"createdOnBehalfOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getcreatedObjects {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getcreatedObjectsById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesDirectoryObjectFetcher *) getmanager {

	 return [[MSDirectoryServicesDirectoryObjectFetcher alloc] initWithUrl:@"manager" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getdirectReports {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getdirectReportsById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getmembers {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getmembersById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getmemberOf {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getmemberOfById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getowners {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getownersById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)getownedObjects {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (id<MSDirectoryServicesDirectoryObjectFetcher>)getownedObjectsById:(NSString *)_id {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:_id];
}

- (MSDirectoryServicesApplicationFetcher *)asApplication {

	return [[MSDirectoryServicesApplicationFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesApplication class]];
}

- (MSDirectoryServicesUserFetcher *)asUser {

	return [[MSDirectoryServicesUserFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesUser class]];
}

- (MSDirectoryServicesExtensionPropertyFetcher *)asExtensionProperty {

	return [[MSDirectoryServicesExtensionPropertyFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesExtensionProperty class]];
}

- (MSDirectoryServicesContactFetcher *)asContact {

	return [[MSDirectoryServicesContactFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesContact class]];
}

- (MSDirectoryServicesDeviceFetcher *)asDevice {

	return [[MSDirectoryServicesDeviceFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesDevice class]];
}

- (MSDirectoryServicesDeviceConfigurationFetcher *)asDeviceConfiguration {

	return [[MSDirectoryServicesDeviceConfigurationFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesDeviceConfiguration class]];
}

- (MSDirectoryServicesDirectoryLinkChangeFetcher *)asDirectoryLinkChange {

	return [[MSDirectoryServicesDirectoryLinkChangeFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesDirectoryLinkChange class]];
}

- (MSDirectoryServicesAppRoleAssignmentFetcher *)asAppRoleAssignment {

	return [[MSDirectoryServicesAppRoleAssignmentFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesAppRoleAssignment class]];
}

- (MSDirectoryServicesGroupFetcher *)asGroup {

	return [[MSDirectoryServicesGroupFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesGroup class]];
}

- (MSDirectoryServicesDirectoryRoleFetcher *)asDirectoryRole {

	return [[MSDirectoryServicesDirectoryRoleFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesDirectoryRole class]];
}

- (MSDirectoryServicesDirectoryRoleTemplateFetcher *)asDirectoryRoleTemplate {

	return [[MSDirectoryServicesDirectoryRoleTemplateFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesDirectoryRoleTemplate class]];
}

- (MSDirectoryServicesServicePrincipalFetcher *)asServicePrincipal {

	return [[MSDirectoryServicesServicePrincipalFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesServicePrincipal class]];
}

- (MSDirectoryServicesTenantDetailFetcher *)asTenantDetail {

	return [[MSDirectoryServicesTenantDetailFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicesTenantDetail class]];
}

@end