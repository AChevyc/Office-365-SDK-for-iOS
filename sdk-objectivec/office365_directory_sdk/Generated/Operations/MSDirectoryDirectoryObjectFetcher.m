/*******************************************************************************
Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the MIT or Apache License; see LICENSE in the source repository
root for authoritative license information.ï»¿

**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
******************************************************************************/

#import "MSDirectoryODataEntities.h"

@implementation MSDirectoryDirectoryObjectFetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSODataExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[MSDirectoryDirectoryObject class]]) {

		_operations = [[MSDirectoryDirectoryObjectOperations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (NSURLSessionTask *)updateDirectoryObject:(id)entity callback:(void (^)(MSDirectoryDirectoryObject *directoryObject, MSODataException *exception))callback {

	return [super updateEntity:entity callback:callback];
}

- (NSURLSessionTask *)deleteDirectoryObject:(void (^)(int status, MSODataException *exception))callback {

	return [super deleteWithCallback:callback];
}

- (MSDirectoryDirectoryObjectFetcher *) getcreatedOnBehalfOf {

	 return [[MSDirectoryDirectoryObjectFetcher alloc] initWithUrl:@"createdOnBehalfOf" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getcreatedObjects {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getcreatedObjectsById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryDirectoryObjectFetcher *) getmanager {

	 return [[MSDirectoryDirectoryObjectFetcher alloc] initWithUrl:@"manager" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getdirectReports {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getdirectReportsById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getmembers {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getmembersById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getmemberOf {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getmemberOfById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getowners {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getownersById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryDirectoryObjectCollectionFetcher *)getownedObjects {

    return [[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryDirectoryObject class]];
}

- (id<MSDirectoryDirectoryObjectFetcher>)getownedObjectsById:(NSString *)_id {

    return [[[MSDirectoryDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryDirectoryObject class]] getById:_id];
}

- (MSDirectoryApplicationFetcher *)asApplication {

	return [[MSDirectoryApplicationFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryApplication class]];
}

- (MSDirectoryUserFetcher *)asUser {

	return [[MSDirectoryUserFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryUser class]];
}

- (MSDirectoryExtensionPropertyFetcher *)asExtensionProperty {

	return [[MSDirectoryExtensionPropertyFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryExtensionProperty class]];
}

- (MSDirectoryContactFetcher *)asContact {

	return [[MSDirectoryContactFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryContact class]];
}

- (MSDirectoryDeviceFetcher *)asDevice {

	return [[MSDirectoryDeviceFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryDevice class]];
}

- (MSDirectoryDeviceConfigurationFetcher *)asDeviceConfiguration {

	return [[MSDirectoryDeviceConfigurationFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryDeviceConfiguration class]];
}

- (MSDirectoryDirectoryLinkChangeFetcher *)asDirectoryLinkChange {

	return [[MSDirectoryDirectoryLinkChangeFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryDirectoryLinkChange class]];
}

- (MSDirectoryAppRoleAssignmentFetcher *)asAppRoleAssignment {

	return [[MSDirectoryAppRoleAssignmentFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryAppRoleAssignment class]];
}

- (MSDirectoryGroupFetcher *)asGroup {

	return [[MSDirectoryGroupFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryGroup class]];
}

- (MSDirectoryDirectoryRoleFetcher *)asDirectoryRole {

	return [[MSDirectoryDirectoryRoleFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryDirectoryRole class]];
}

- (MSDirectoryDirectoryRoleTemplateFetcher *)asDirectoryRoleTemplate {

	return [[MSDirectoryDirectoryRoleTemplateFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryDirectoryRoleTemplate class]];
}

- (MSDirectoryServicePrincipalFetcher *)asServicePrincipal {

	return [[MSDirectoryServicePrincipalFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryServicePrincipal class]];
}

- (MSDirectoryTenantDetailFetcher *)asTenantDetail {

	return [[MSDirectoryTenantDetailFetcher alloc] initWithUrl:self.urlComponent parent:self asClass:[MSDirectoryTenantDetail class]];
}

@end