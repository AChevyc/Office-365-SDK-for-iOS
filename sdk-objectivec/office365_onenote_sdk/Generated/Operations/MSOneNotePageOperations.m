/*******************************************************************************
 Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
 Licensed under the MIT or Apache License; see LICENSE in the source repository
 root for authoritative license information.ï»¿
 
 **NOTE** This code was generated by a tool and will occasionally be
 overwritten. We welcome comments and issues regarding this code; they will be
 addressed in the generation tool. If you wish to submit pull requests, please
 do so for the templates in that tool.
 
 This code was generated by Vipr (https://github.com/microsoft/vipr) using
 the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
 ******************************************************************************/

#import "MSOneNoteOrcEntities.h"

/**
 * The implementation file for type MSOneNotePageOperations.
 */

@implementation MSOneNotePageOperations

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {
    
    return [super initOperationWithUrl:urlComponent parent:parent];
}

- (void)patchContentWithCommands:(NSArray<MSOneNotePatchContentCommand> *)commands
                        callback:(void (^)(int returnValue, MSOrcError *error))callback {
    
    NSString *commandsString = [self.resolver.jsonSerializer serialize:commands property:@"commands"];
    
    return [self patchContentRawWithCommands:commandsString callback:^(NSString *returnValue, MSOrcError *error) {
        
        if (error == nil) {
            
            int result = (int)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:nil];
            callback(result, error);
        }
        else {
            
            callback((int)[returnValue integerValue], error);
        }
    }];
}

- (void)patchContentRawWithCommands:(NSString *) commands
                           callback:(void(^)(NSString *returnValue, MSOrcError *error))callback {
    
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSData* payload = [commands dataUsingEncoding:NSUTF8StringEncoding];
    
    [request setContent:payload];
    
    [request.url appendPathComponent:@"PatchContent"];
    [request setVerb:HTTP_VERB_POST];
    
    return [super oDataExecuteRequest:request callback:^(id<MSODataResponse> response, MSOrcError *error) {
        
        if (error == nil) {
            
            callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], error);
        }
        else {
            
            callback([[NSString alloc] initWithFormat:@"%d", response.status], error);
        }
    }];
}

@end