/*******************************************************************************
Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the MIT or Apache License; see LICENSE in the source repository
root for authoritative license information.ï»¿

**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).
******************************************************************************/

#import "MSSampleContainerODataEntities.h"

/**
* The implementation file for type MSSampleContainerSampleEntityOperations.
*/

@implementation MSSampleContainerSampleEntityOperations

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSODataExecutable>)parent {
 
    return [super initOperationWithUrl:urlComponent parent:parent];
}


- (NSURLSessionTask *)twoParamsActionsFirstIsEntityTypeWithAnEntity:(MSSampleContainerSampleEntity *) anEntity booleanParams:(BOOL ) booleanParams callback:(void (^)(int returnValue, MSODataException *exception))callback {
	
	NSString *anEntityString = [self.resolver.jsonSerializer serialize:anEntity property:@"AnEntity"];
	NSString *booleanParamsString = [self.resolver.jsonSerializer serialize:(booleanParams ? @"true" : @"false") property:@"BooleanParams"];

	NSURLSessionTask* task = [self twoParamsActionsFirstIsEntityTypeRawWithAnEntity:anEntityString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSODataException *exception){
       
	   if(exception == nil){

			int result = (int)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:nil];
            callback(result, exception);
        }
        else{
            callback((int)[returnValue integerValue], exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)twoParamsActionsFirstIsEntityTypeRawWithAnEntity:(NSString *) anEntity booleanParams:(NSString *) booleanParams callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :anEntity,@"AnEntity", nil],
                          [[NSDictionary alloc] initWithObjectsAndKeys :booleanParams,@"BooleanParams", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];

	
	[[request url] appendPathComponent:@"TwoParamsActionsFirstIsEntityType"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if(exception == nil){
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else{

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				

- (NSURLSessionTask *)twoParamsActionsFirstIsComplexTypeWithComplexType:(MSSampleContainerSampleComplexType *) complexType booleanParams:(BOOL ) booleanParams callback:(void (^)(int returnValue, MSODataException *exception))callback {
	
	NSString *complexTypeString = [self.resolver.jsonSerializer serialize:complexType property:@"ComplexType"];
	NSString *booleanParamsString = [self.resolver.jsonSerializer serialize:(booleanParams ? @"true" : @"false") property:@"BooleanParams"];

	NSURLSessionTask* task = [self twoParamsActionsFirstIsComplexTypeRawWithComplexType:complexTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSODataException *exception){
       
	   if(exception == nil){

			int result = (int)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:nil];
            callback(result, exception);
        }
        else{
            callback((int)[returnValue integerValue], exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)twoParamsActionsFirstIsComplexTypeRawWithComplexType:(NSString *) complexType booleanParams:(NSString *) booleanParams callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :complexType,@"ComplexType", nil],
                          [[NSDictionary alloc] initWithObjectsAndKeys :booleanParams,@"BooleanParams", nil], nil];


    NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];

	
	[[request url] appendPathComponent:@"TwoParamsActionsFirstIsComplexType"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if(exception == nil){
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else{

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				

- (NSURLSessionTask *)twoParamsActionsFirstIsCollectionEntityTypeWithCollectionType:(MSSampleContainerSampleEntity *) collectionType booleanParams:(BOOL ) booleanParams callback:(void (^)(int returnValue, MSODataException *exception))callback {
	
	NSString *collectionTypeString = [self.resolver.jsonSerializer serialize:collectionType property:@"CollectionType"];
	NSString *booleanParamsString = [self.resolver.jsonSerializer serialize:(booleanParams ? @"true" : @"false") property:@"BooleanParams"];

	NSURLSessionTask* task = [self twoParamsActionsFirstIsCollectionEntityTypeRawWithCollectionType:collectionTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSODataException *exception){
       
	   if(exception == nil){

			int result = (int)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:nil];
            callback(result, exception);
        }
        else{
            callback((int)[returnValue integerValue], exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)twoParamsActionsFirstIsCollectionEntityTypeRawWithCollectionType:(NSString *) collectionType booleanParams:(NSString *) booleanParams callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :collectionType,@"CollectionType", nil],
                          [[NSDictionary alloc] initWithObjectsAndKeys :booleanParams,@"BooleanParams", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];

	
	[[request url] appendPathComponent:@"TwoParamsActionsFirstIsCollectionEntityType"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if(exception == nil){
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else{

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				

- (NSURLSessionTask *)twoParamsActionsFirstIsCollectionComplexTypeWithCollectionType:(MSSampleContainerSampleComplexType *) collectionType booleanParams:(BOOL ) booleanParams callback:(void (^)(int returnValue, MSODataException *exception))callback {
	
	NSString *collectionTypeString = [self.resolver.jsonSerializer serialize:collectionType property:@"CollectionType"];
	NSString *booleanParamsString = [self.resolver.jsonSerializer serialize:(booleanParams ? @"true" : @"false") property:@"BooleanParams"];

	NSURLSessionTask* task = [self twoParamsActionsFirstIsCollectionComplexTypeRawWithCollectionType:collectionTypeString booleanParams:booleanParamsString callback:^(NSString *returnValue, MSODataException *exception){
       
	   if(exception == nil){

			int result = (int)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:nil];
            callback(result, exception);
        }
        else{
            callback((int)[returnValue integerValue], exception);
        }
    }];
    
    return task;
}

- (NSURLSessionTask *)twoParamsActionsFirstIsCollectionComplexTypeRawWithCollectionType:(NSString *) collectionType booleanParams:(NSString *) booleanParams callback:(void(^)(NSString *returnValue, MSODataException *exception))callback {

	id<MSODataRequest> request = [super.resolver createODataRequest];
	
	NSArray *parameters = [[NSArray alloc] initWithObjects:
                          [[NSDictionary alloc] initWithObjectsAndKeys :collectionType,@"CollectionType", nil],
                          [[NSDictionary alloc] initWithObjectsAndKeys :booleanParams,@"BooleanParams", nil], nil];

	NSData* payload = [[MSODataBaseContainerHelper generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];

	[request setContent:payload];

	
	[[request url] appendPathComponent:@"TwoParamsActionsFirstIsCollectionComplexType"];
	[request setVerb:HTTP_VERB_POST];

	NSURLSessionTask *task = [super oDataExecuteRequest:request 
											   callback:^(id<MSODataResponse> response, MSODataException *exception) {
        
		if(exception == nil){
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], exception);
        }
        else{

            callback([[NSString alloc] initWithFormat:@"%d", response.status], exception);
        }
    }];
    
    return task;
}
    				
@end